[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d TutorHelper"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W13-4/main[image:https://travis-ci.org/CS2103-AY1819S1-W13-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongyz"
        },
        "content": "https://ci.appveyor.com/project/ongyz/main-l2qq8[image:https://ci.appveyor.com/api/projects/status/qagnvxbv6i98hcky?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W13-4/main?branch\u003dmaster[image:https://coveralls.io/repos/CS2103-AY1819S1-W13-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* This is a desktop TutorHelper application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* It is a Java sample application intended for Tutors who would like to organise their students\u0027 information."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "* This application contains:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "** A GUI that includes a list panel and a details panel."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "** Test cases, including automated GUI testing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI and Appveyor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* This application was adapted from https://github.com/nus-cs2103-AY1819S1/AddressBook-level4[AddressBook4]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 2,
      "ongyz": 2,
      "andlimey": 2,
      "lywjoel": 5,
      "-": 23
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andlimey"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"githubId\": \"andlimey\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"displayName\": \"Andy Chan\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"authorNames\": [\"andlimey\", \"Andy\", \"DESKTOP-4O94ROD\\\\Andy\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"githubId\": \"SusterDrifter\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"displayName\": \"Anthony Halim\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"authorNames\": [\"SusterDrifter\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"githubId\": \"lywjoel\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"displayName\": \"Joel Lee\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"authorNames\": [\"lywjoel\", \"Joel Lee\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"githubId\": \"ongyz\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"displayName\": \"Ong Yan Zhi\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"authorNames\": [\"ongyz\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"githubId\": \"ooihuiying\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"displayName\": \"Ooi Hui Ying\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \"authorNames\": [\"ooihuiying\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    archiveName \u003d \u0027TutorHelper.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u0027site-name\u0027: \u0027TutorHelper\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W13-4/main\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "lywjoel": 2,
      "-": 243
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "TutorHelper was developed by the https://github.com/CS2103-AY1819S1-W13-4[CS2103-AY1819S1-W13-4] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d\u003d Andy Chan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "image::andlimey.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "{empty}https://github.com/andlimey[GitHub] | \u003c\u003candlimey#, Portfolio\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Responsibilities: Feature Development, Integration"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d\u003d Anthony Halim"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "image::susterdrifter.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "{empty}http://github.com/SusterDrifter[GitHub] | \u003c\u003csusterdrifter#, Portfolio\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Responsibilities: Feature Development, UI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d\u003d Joel Lee"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "image::lywjoel.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "{empty}http://github.com/lywjoel[GitHub] | \u003c\u003clywjoel#, Portfolio\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Responsibilities: Feature Development, UI"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d\u003d Ong Yan Zhi"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "image::ongyz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "{empty}http://github.com/ongyz[GitHub] | \u003c\u003congyz#, Portfolio\u003e\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Responsibilities: Feature Development, Integration"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d\u003d Ooi Hui Ying"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andlimey"
        },
        "content": "image::ooihuiying.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "{empty}http://github.com/ooihuiying[GitHub] | \u003c\u003cooihuiying#, Portfolio\u003e\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Responsibilities: Feature Development, Integration"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "andlimey": 11,
      "lywjoel": 12,
      "-": 33
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W13-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "andlimey": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d TutorHelper - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W13-4/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "By: `CS2103-AY1819S1-W13-4`      Since: `Aug 2018`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedStudent.java[`XmlAdaptedStudent.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": "After forking the repo, the documentation will still refer to the `CS2103-AY1819S1-W13-4/main` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `CS2103-AY1819S1-W13-4/main`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Note how the `Model` simply raises a `TutorHelperChangedEvent` when the TutorHelper data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongyz"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `StudentListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongyz"
        },
        "content": ".  `Logic` uses the `TutorHelperParser` class to parse the user command."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongyz"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a student) and/or raise events."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* stores the TutorHelper data."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cStudent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongyz"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `TutorHelper`, which `Student` can reference. This would allow `TutorHelper` to only require one `Tag` object per unique `Tag`, instead of each `Student` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* can save the TutorHelper data in xml format and read it back."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andlimey"
        },
        "content": "// tag::group[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d\u003d Group Students feature"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Classes related to Group and its functionality is listed below:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `TutorHelperParser` -- Creates a GroupCommandParser object and parses the user\u0027s input."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `GroupCommandParser` -- Analyses the input, creates a predicate based on the input and returns a GroupCommand object with the predicate as the argument."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `GroupCommand` -- Filters the list based on the predicate and displays it to the user."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "andlimey"
        },
        "content": "Given below is an example usage scenario and how the group mechanism behaves at each step."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andlimey"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andlimey"
        },
        "content": "Step 2. Assuming that the application isn\u0027t empty, the user executes \u0027group Monday\u0027 command to group all students with a class on Monday. The group command will be called by `GroupCommandParser.parse()`, parsing the argument to check against. The application will check the list and display all students with classes on Monday, sorted based on the earliest timing."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andlimey"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andlimey"
        },
        "content": "The user can execute `list` to re-display the full list of students again."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ongyz"
        },
        "content": "The user can execute `undo` to undo the sorting done to the list."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ongyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ongyz"
        },
        "content": "The group command is CASE-SENSITIVE. E.g. Passing `MONDAY` as an input instead of `Monday` will throw an error."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ongyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Only 12-hr timings are valid."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andlimey"
        },
        "content": "The following sequence diagram shows how the group operation works:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andlimey"
        },
        "content": "image::GroupSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ongyz"
        },
        "content": "// end::group[]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ongyz"
        },
        "content": "// tag::payment[]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d Students payment feature"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ongyz"
        },
        "content": "The Payment mechanism is facilitated by VersionedTutorHelper and FilteredList\u003cStudent\u003e. VersionedTutorHelper extends from TutorHelper and classes related to Payment calls methods from VersionedTutorHelper to retrieve students\u0027 data, update them and display accordingly."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Classes that are related to Payment and their functionality are as listed below:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `TutorHelperParser` -- Creates a PayCommandParser object and calls parse method in object to parse user\u0027s argument input."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `PayCommandParser` -- Analyses the input, checks for any violation of syntax and returns a PayCommand object with the Payment object as the argument."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `PayCommand` -- Calls on methods in VersionedTutorHelper to update new Payments made."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `Payment` -- -Contains fields to store student id, amount paid, month of payment and year of payment."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Given below is an example usage scenario and how the payment mechanism behaves at each step."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 1. The tutor launches the application and wants to record a payment for his/her student called Alice."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2. He/she makes a mental note of Alice\u0027s student index as listed in the left side of the application."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 2a. Lets say, Alice has student id 2. The payment she made was $400 for the month and year of November 2018. He/she proceeds to key in the command in the following format: paid 2 400 11 2018"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 2b. The tutor\u0027s input is passed from the text box through LogicManager class to TutorHelperParser. TutorHelperParser sieves out the arguments and command word(in this case, paid) and creates the PayCommandParser object, followed by calling parse method, with the arguments passed in."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2c. PayCommandParser then checks if the inputs are of the correct format and it initialises a Payment object with the inputs."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2d. The PayCommandParser method then returns a PayCommand object with payment object."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2e. This is propagated back to the LogicManager class which then proceed to call execute method in the returned PayCommand object."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 2f. The execute method in PayCommand proceed to obtain the list of students from the model. Since 2 is a valid student index, it proceeds to retrieve information from Alice Student class."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 2g. Alice student class contains payment class. The PayCommand execute method proceeds to call the method updatePayments, then calls updateStudent in model class to modify Alice Student class with the new updated payment."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 3. Now, payment details have been updated and the tutor will be able to see a payment updated successfully message below the command text box and the list of payments as well as other details about Alice"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 4. The tutor may also choose to view the details from browser panel by clicking on Alice tab on the left. Payments will be displayed in one of the rows."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Payment list will keep up to 5 payments at any one time. When the 6th payment is added, the payment list will remove the oldest payment record."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ongyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ongyz"
        },
        "content": "The maximum amount of payment that can be made each time is $10 000."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "The diagram below illustrates the sequence diagram."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "image:PaymentSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ongyz"
        },
        "content": "// end::payment[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ongyz"
        },
        "content": "// tag::editpaid[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ongyz"
        },
        "content": "\u003d\u003d\u003d Students edit payment feature"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ongyz"
        },
        "content": "The Edit Payment mechanism is facilitated by VersionedTutorHelper and FilteredList\u003cStudent\u003e. VersionedTutorHelper extends from TutorHelper and classes related to Payment calls methods from VersionedTutorHelper to retrieve students\u0027 data, update them and display accordingly."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Classes that are related to Payment and their functionality are as listed below:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `TutorHelperParser` -- Creates a PayCommandParser object and calls parse method in object to parse user\u0027s argument input."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `PayCommandParser` -- Analyses the input, checks for any violation of syntax and returns a PayCommand object with the Payment object as the argument."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `PayCommand` -- Calls on methods in VersionedTutorHelper to update new Payments made."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `Payment` -- -Contains fields to store student id, amount paid, month of payment and year of payment."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Given below is an example usage scenario and how the payment mechanism behaves at each step."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 1. The tutor launches the application and wants to record a payment for his/her student called Alice."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2. He/she makes a mental note of Alice\u0027s student index as listed in the left side of the application."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 2a. Lets say, Alice has student id 2. The payment she made was $400 for the month and year of November 2018. He/she proceeds to key in the command in the following format: paid 2 400 11 2018"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 2b. The tutor\u0027s input is passed from the text box through LogicManager class to TutorHelperParser. TutorHelperParser sieves out the arguments and command word(in this case, paid) and creates the PayCommandParser object, followed by calling parse method, with the arguments passed in."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 2c. PayCommandParser then checks if the inputs are of the correct format and it initialises a Payment object with the inputs."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2d. The PayCommandParser method then returns a PayCommand object with payment object."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2e. This is propagated back to the LogicManager class which then proceed to call execute method in the returned PayCommand object."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 2f. The execute method in PayCommand proceed to obtain the list of students from the model. Since 2 is a valid student index, it proceeds to retrieve information from Alice Student class."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 2g. Alice student class contains payment class. The PayCommand execute method proceeds to call the method updatePayments, then calls updateStudent in model class to modify Alice Student class with the new updated payment."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 3. Now, payment details have been updated and the tutor will be able to see a payment updated successfully message below the command text box and the list of payments as well as other details about Alice"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 4. The tutor may also choose to view the details from browser panel by clicking on Alice tab on the left. Payments will be displayed in one of the rows."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Payment list will keep up to 5 payments at any one time. When the 6th payment is added, the payment list will remove the oldest payment record."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ongyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ongyz"
        },
        "content": "The maximum amount of payment that can be made each time is $10 000."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ongyz"
        },
        "content": "The diagram below illustrates the sequence diagram."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ongyz"
        },
        "content": "image:EditPaymentSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ongyz"
        },
        "content": "// end::editpaid[]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ongyz"
        },
        "content": "// tag::earnings[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d Tutor\u0027s Earnings feature"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ongyz"
        },
        "content": "The Earnings mechanism is mainly facilitated by the filteredStudentList found in model. It works by checking through all past recorded payments for that specific month and year as requested by the tutor and returns the total earnings."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "The classes related to Earnings are EarningsCommand, EarningsCommandParser."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `TutorHelperParser` -- Creates a PayCommandParser object and calls parse method in object to parse user\u0027s argument input."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `EarningsCommandParser` --Takes in users\u0027 input and checks if it adheres to the required format. Returns a EarningsCommand with the month and year passed in."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* `EarningsCommand` -- Takes in month and year as inputs in its constructed. In Execute() method, it performs the checking of all recorded payments and returns the total payments received for that specified month and year."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Given below is an example usage scenario and how the earning mechanism behaves at each step."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 1. The tutor launches the application and wants to view his/her earnings for the month of November 2018."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2. He/she enters input in the format of: earnings 11 2018"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 2a. The tutor\u0027s input is passed from the text box through LogicManager class to TutorHelperParser. TutorHelperParser sieves out the arguments and command word(in this case, earnings) and creates the EarningsCommandParser object, followed by calling parse method, with the arguments passed in."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2b. EarningCommandParser checks if the inputs are of the correct format."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2b. The PayCommandParser method then returns a EarningCommand object with month and year passed in."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2c. This is propagated back to the LogicManager class which then proceed to call execute method in the returned EarningsCommand object."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2d. The execute method in EarningsCommand proceed to obtain the list of students from the model and proceeds to search for Payment records made for that requested month and year."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 2e. The amount is then returned."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Step 3. The tutor will then see a message below the command text box, showing the earnings for the requested month and year."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "The diagram below illustrates the sequence diagram."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "image:EarningsSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ongyz"
        },
        "content": "// end::earnings[]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "// tag::copysub[]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d Copy Subject feature"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "The copy subject command operates by making a duplicate of the selected subject of the student and adds it the other student."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "If the other student already has the same subject, append the content of the subject instead. State of each syllabus is also copied. Duplicate syllabus will not be added."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Classes related to copy command and its functionality are listed below:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `TutorHelperParser` -- Creates CopySubCommandParser which parses the input from user."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `CopySubCommandParser` -- Parses user\u0027s input into proper argument and creates CopySubCommand"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `CopySubCommand` -- Updates the target student based on the argument"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `SubjectsUtil` -- Manage the finding and copying aspect of copysub command."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Given below is an example usage scenario with 2 possible outcomes and how to copy function addresses each case."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Step 2. Assuming that the application isn\u0027t empty, the user executes `copysub 1 2 4`."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Step 3. Assuming that each argument given is a valid input, the system will perform the copysub command."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Step 4. The system will locate the _first_ student from the student list, and make a separate copy of the _second_ subject stored under the student data."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Step 5. The system will locate the _fourth_ student from the student list, and make a decision."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* Step 5a. If the same subject as _second_ subject in Step 4, system will append the content of subject of _second_ subject into the _fourth_ student."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* Step 5b. If there is no subject same as _second_ subject in Step 4, system will add the _second_ subject as a new subject under the _fourth_ student."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "The process is described with sequence diagram below:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "image::CopySubSequenceDiagrams.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "// end::copysub[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ongyz"
        },
        "content": "// tag::adddelsub[]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d Add / Delete Subject"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ongyz"
        },
        "content": "The add / delete subject mechanism is facilitated with `TutorHelperParser`."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Classes related to the functionality of the mechanism are listed below:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `TutorHelperParser` -- Creates a `AddSubCommandParser` / `DeleteSubCommandParser` object and parses the user\u0027s input."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `AddSubCommandParser` / `DeleteSubCommandParser` -- Analyses user input to create a corresponding `Command` object."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* `AddSubCommand` / `DeleteSubCommand` -- Execution results in addition / deletion of a subject for a specified student index."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Given below is an example usage scenario of how the add / delete subject mechanism behaves at each step."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Add Subject"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 2. The tutor executes a command of the format `addsub STUDENT_INDEX s/SUBJECT` on the CLI."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 3. The arguments are parsed by `AddSubCommandParser`, which produces an instance of `AddSubCommand`."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 4. `AddSubCommand.execute()` is called, and the supplied subject is added for the student at the specified student index by TutorHelper."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Delete Subject"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 2. The tutor executes a command of the format `deletesub STUDENT_INDEX SUBJECT_INDEX` on the CLI."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 3. The arguments are parsed by `DeleteSubCommandParser`, which produces an instance of `DeleteSubCommand`."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Step 4. `DeleteSubCommand.execute()` is called, and the subject at the specified subject index of the student at the specified student index is deleted by TutorHelper."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "The TutorHelper has to have at least 1 student as a precondition for both `addsub` and `deletesub`."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "`deletesub` requires the student at the specified student index to have at least two subjects. After deletion, a student cannot have 0 subjects."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "The following sequence diagram shows how the `addsub` operation works:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "image::AddSubSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "The following sequence diagram shows how the `deletesub` operation works:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "image::DeleteSubSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ongyz"
        },
        "content": "// end::adddelsub[]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ongyz"
        },
        "content": "// tag::editsyll[]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ongyz"
        },
        "content": "\u003d\u003d\u003d Edit Syllabus"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ongyz"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Classes that are related to edit syllabus and their functionality are as listed below:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `TutorHelperParser` -- Creates a EditSyllCommandParser object and calls parse method in object to parse user\u0027s argument input."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `EditSyllCommandParser` -- Analyses the input, checks for any violation of syntax and returns a EditSyllCommand object with the student,subject,syllabus index object as well as the new Syllabus object as the argument."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `EditSyllCommand` -- Locates the corresponding syllabus to update and calls corresponding subject to edit syllabus."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `Subject` -- Locates and edits existing syllabus entry with new syllabus entry"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Given below is an example usage scenario and how the earning mechanism behaves at each step."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 1. The tutor launches the application."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 2. He/she executes the command in the format `editsyll STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX sy/SYLLABUS` on the CLI."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 3. The arguments are parsed by `EditSyllCommandParser`, which produces an instance of `EditSyllCommand`."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Step 4. `EditSyllCommand.execute()` is called, and the syllabus at the specified subject index and syllabus index of the student at the specified student index is edited by TutorHelper."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ongyz"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ongyz"
        },
        "content": "The TutorHelper has to have at least 1 student as a precondition for `editsyll`."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ongyz"
        },
        "content": "The diagram below shows how the `editsyll` operation works:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ongyz"
        },
        "content": "image:EditSyllSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ongyz"
        },
        "content": "// end::editsyll[]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ongyz"
        },
        "content": "A project often depends on third-party libraries. For example, TutorHelper depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Current: +"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `Tutors use reminder applications to keep track of lessons`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `Tutors use physical diaries or notepads to keep track of current lesson progress`"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ongyz"
        },
        "content": "Value Proposition:"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* `Tutors have a platform where they can keep track of all their students\u0027 details, their progress and the syllabus they intend to cover.`"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ongyz"
        },
        "content": ". As a busy tutor, I want to be able to manage my students\u0027 schedules individually, so that I can plan my time properly."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ongyz"
        },
        "content": ". As a tutor, I want to be able to find out where my students live and what time I should be there for tuition."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ongyz"
        },
        "content": ". As a tutor, I want to know my students\u0027 individual progress so that I know what topics I need to cover for the next tuition session."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ongyz"
        },
        "content": ". As a tutor, I want to keep track of my students\u0027 payments."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ongyz"
        },
        "content": ". As a tutor, I want to be able to edit teaching data such as editing my syllabus to keep up with changes in school\u0027s curriculum or updating payments made by students."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ongyz"
        },
        "content": "1. Add Student"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  System: TutorHelper"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  Actor: Tutor"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  MSS:"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    1. Tutor inputs to add a student and his/her details."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    2. System adds student details into the database."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  Extensions:"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    2a. Tutor did not key in all mandatory fields."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2a1. System displays error message informing tutor of invalid index."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2b1. Resume step 1."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  2. Edit Student"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  System: TutorHelper"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  Actor: Tutor"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  MSS:"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    1. Tutor inputs to edit a student\u0027s details."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    2. System edits student details into the database."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  Extensions:"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    2a. Index is out of bounds"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2a1. System displays error message informing tutor of invalid index."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2b1. Resume step 1."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  3. Delete Student"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  System: TutorHelper"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  Actor: Tutor"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  MSS:"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    1. Tutor inputs student\u0027s index to delete."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    2. System deletes student details from the database."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  Extensions:"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    2a. Index is out of bounds"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     2a1. System displays error message informing tutor of invalid index."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     2b1. Resume step 1."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  4. List Students"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  System: TutorHelper"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  Actor: Tutor"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  MSS:"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    1. Tutor requests to list students."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    2. System displays current list of students."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  5. Group Students"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  System: TutorHelper"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  Actor: Tutor"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  Precondition: Current list of students is not empty."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  MSS:"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    1. Tutor requests to group students by day or timing."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    2. System filters the current list of students based on the timing entered."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    3. System sorts the filtered list of students in order of timing."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    4. System displays filtered and sorted list to Tutor."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  Extensions:"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    2a. Input is invalid"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2a1. System displays examples of valid input to Tutor."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  6. Record students\u0027 payments"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    System: TutorHelper"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    Actor: Tutor"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    Precondition: student index entered must be valid."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    MSS:"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      1. Tutor request to add in payment for a student."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2. System searches for that student according to index entered."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      3. System adds Payment amount, month and year to student\u0027s record."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      4. System displays payment record in browser panel."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      5. System displays successful recording of payment under command box."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     Extensions:"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2a. Tutor does not enter all the required entries correctly"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2a1. System displays error message"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2a2. System gives tutor an example of a correct entry."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2a3. Repeat step 1"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2b. Tutor does not enter a valid student index"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2b1. System displays error message telling tutor that index is invalid"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2b2. Repeat step 1."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  7. Edit students\u0027 payments"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    System: TutorHelper"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    Actor: Tutor"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    Precondition: student index entered must be valid"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    MSS:"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      1. Tutor request to add in edited payment for a student."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2. System finds the existing payment entry with same month and year."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      3. System adds new payment entry to existing entry."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      4. System displays payment record in browser panel."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      5. System displays successful recording of payment under command box."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     Extensions:"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2a. Tutor does not enter all the required entries correctly"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2a1. System displays error message"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2a2. System gives tutor an example of a correct entry."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2a3. Repeat step 1"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2b. Tutor does not enter a valid student index"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2b1. System displays error message telling tutor that index is invalid"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2b2. Repeat step 1."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  8. Display tutor\u0027s earnings for that month and year"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    System: TutorHelper"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    Actor: Tutor"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    Precondition: Tutor has recorded payment for students before."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    MSS:"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      1. Tutor request for earnings for a specific month and year."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2. System searches for all the payment records made from all the students for that particular month and year."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      3. System adds up all the payment."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      4. System displays total earnings under the command box."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      Use case end."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     Extensions:"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2a. System does not find any payment recorded for that month and year."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2a1. System displays $0 as result."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "      2b. Tutor does not enter all the required entries correctly"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        2b1. System displays error message"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        2b2. System gives tutor an example of a correct entry."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        2b3. Repeat step 1"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "      2c. Tutor does not enter a valid entry"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        2c1. System displays error message telling tutor that entry is invalid"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        2c2. Repeat step 1."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ongyz"
        },
        "content": "  9. Edit students\u0027 syllabus for that subject"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    System: TutorHelper"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    Actor: Tutor"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    Precondition: Tutor has an existing syllabus entry at the index."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    MSS:"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      1. Tutor request to edit syllabus for a specific student, subject and syllabus"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2. System searches for the student and the respective subject and syllabus at specified index."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      3. System edits the syllabus at the specified index with new syllabus"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      4. System displays edited syllabus list in browser panel"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      5. System displays successful editing of syllabus under command box."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      Use case end."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     Extensions:"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2a. System does not find any student entry at specified index."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2a1. System displays error message telling tutor that index is invalid"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2a2. Repeat step 1."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2b. System does not find any subject entry at specified index."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2b1. System displays error message telling tutor that index is invalid"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2b2. Repeat step 1."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2c. System does not find any syllabus entry at specified index."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2c1. System displays error message telling tutor that index is invalid."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2c2. Repeat step 1."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      2d. System find same syllabus entry already exists in subject."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2d1. System displays error message telling tutor that syllabus already exist."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        2d2. Repeat step 1."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "ongyz"
        },
        "content": ". The system should respond in two seconds."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "ongyz"
        },
        "content": ". The system should be understandable to a novice in working with computers."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ongyz"
        },
        "content": ".  Should be able to hold up to 1000 students without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "ongyz"
        },
        "content": "[[subject]] Subject::"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "ongyz"
        },
        "content": "A branch of knowledge studied by the student"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "ongyz"
        },
        "content": "[[syllabus]] Syllabus::"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "ongyz"
        },
        "content": "The required topics to be covered under the subject"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "ongyz"
        },
        "content": "\u003d\u003d\u003d Deleting a student"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "ongyz"
        },
        "content": ". Deleting a student while all students are listed"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "ongyz"
        },
        "content": ".. Prerequisites: List all students using the `list` command. Multiple students in the list."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "ongyz"
        },
        "content": "   Expected: No student is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d\u003d Grouping"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ". Grouping by day or time while all persons are listed."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Prerequisites: List all persons using the \u0027list\u0027 command. Multiple persons in the list."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027group Monday\u0027"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: X students listed! (X is the number of students meeting the requirements)"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027group 3:00pm\u0027"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: X students listed!"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027group Monday 3pm\u0027"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Invalid command format. Group command message usage is shown."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Other incorrect grouping commands to try \u0027group\u0027, \u0027group monday\u0027, \u0027group 3pm\u0027"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Invalid command format. Group command message usage is shown."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d\u003d Making Payment for a student"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ". Adding a payment while all persons are listed"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Prerequisites: List all persons using the \u0027list\u0027 command. Multiple persons in the list."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027paid 1 200 8 2018\u0027 +"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Payment for this student is added. Details of the paid contact shown in the status message."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027paid 0 200 8 2018\u0027 +"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Index is not a non-zero unsigned integer."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027paid X 200 8 920\u0027 (X is a number greater than the list) +"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: The student index provided is invalid."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027paid 1 -200 8 2018\u0027 +"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Amount should only contain zero or positive numbers, and has to be smaller than 10 000."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027paid 1 200 16 2018\u0027 +"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Month should only contain numbers between 1 to 12, inclusive."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027paid 1 200 8 920\u0027 +"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Year should only contain 4 digits numbers."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Other incorrect payment commands to try: `paid`, `paid x` (where x is any number), \u0027paid x 8\u0027,"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   \u0027paid x 200 8\u0027, \u0027paid x 200 2018\u0027"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Invalid command format. Pay command message usage is shown."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d\u003d Editing Payment for a student"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ". Editing a payment while all persons are listed"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Prerequisites: List all persons using the \u0027list\u0027 command. Multiple persons in the list."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Prerequisites: Payment for the month and year must have been added previously."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027paid 1 200 8 2018\u0027 +"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Payment for this student has been edited: Details of the paid contact shown in the status message."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027paid 0 200 8 2018\u0027 +"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Index is not a non-zero unsigned integer."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027paid X 200 8 920\u0027 (X is a number greater than the list) +"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: The student index provided is invalid."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027paid 1 -200 8 2018\u0027 +"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Amount should only contain zero or positive numbers, and has to be smaller than 10 000."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027paid 1 200 16 2018\u0027 +"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Month should only contain numbers between 1 to 12, inclusive."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027paid 1 200 8 920\u0027 +"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Year should only contain 4 digits numbers."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Other incorrect payment commands to try: `paid`, `paid x` (where x is any number), \u0027paid x 8\u0027,"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   \u0027paid x 200 8\u0027, \u0027paid x 200 2018\u0027"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Invalid command format. Pay command message usage is shown."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d\u003d Viewing earnings command"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027earnings 8 2018\u0027"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Earnings: $X (X is the total earnings)"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027earnings 8 299\u0027"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Year should only contain 4 digits numbers."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027earnings 0 2018\u0027"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected:  Month should only contain numbers between 1 to 12, inclusive."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Other incorrect earnings commands to try: \u0027earnings\u0027, \u0027earnings 8\u0027, \u0027earnings 2018\u0027"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Invalid command format. Earnings command message usage is shown."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d\u003d Add subject command"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Adding a subject to an existing student"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Prerequisite: TutorHelper is not empty"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027addsub 1 s/Chemistry\u0027"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Added subject to student: Display student details"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027addsub X s/Chemistry\u0027 (X is an invalid student index)"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: The student index provided is invalid"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027addsub 1 s/X\u0027 (X is a subject student index 1 is already taking)"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: Subject is already taken by student: Display student index."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Other incorrect addsub commands to try: \u0027addsub\u0027, \u0027addsub 2\u0027, \u0027addsub 1 Physics\u0027, \u0027áddsub Physics\u0027"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: Invalid command format. addsub command message usage is shown."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d Delete subject command"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Deleting subject from existing student"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Prerequisite: Tutorhelper is not empty"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027deletesub 1 1\u0027"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: Deleted subject from student: Display student details"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027deletesub 1 X\u0027 (X is an invalid subject index)"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: The subject index provided is invalid."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027deletesub X 1\u0027 (X is an invalid student index)"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: The student index provided is invalid"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Other incorrect deletesub commands to try: \u0027deletesub\u0027, \u0027deletesub 1\u0027"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: Invalid command format. deletesub command message usage is shown."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d\u003d Copy subject command"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Copying a subject from one student profile to another student."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Prerequisites: Tutorhelper is not empty."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027copysub 1 1 2\u0027"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Copied syllabus to Student: Display student\u0027s details."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027copysub 1 X 2\u0027 (X is an invalid subject index of the source student)"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: The subject index provided is invalid"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027copysub 1 1 X\u0027 (X is an invalid student index)"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: The student index provided is invalid"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027copysub X 1 1\u0027 (X is in invalid student index)"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: The student index provided is invalid"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027copysub 1 1 1\u0027"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Copying subject to the same student is not allowed: Display student\u0027s details."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027copysub 1 X 3\u0027 (X is an existing subject in student 3)"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Copied syllabus to Student: Display destination student details"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Other incorrect copysub commands to try: \u0027copysub\u0027, \u0027copysub 1\u0027, \u0027copysub 1 1\u0027"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "   Expected: Invalid command format. copysub command message usage is shown."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d Add syllabus command"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Adds a new syllabus topic for a specified student and subject"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Prerequisite: Tutorhelper must not be empty"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027addsyll 1 1 sy/Integration\u0027"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: Added syllabus to Student: Display destination student details"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027addsyll X 1 sy/Integration\u0027 (X is an invalid student index)"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: The student index provided is invalid"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027addsyll 1 X sy/Integration\u0027 (X is an invalid subject index)"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: The subject index provided is invalid"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027addsyll 1 1 sy/X\u0027 (X is a syllabus already in student)"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: Syllabus is already in Student: Display student details."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Other incorrect addsyll commands to try: \u0027addsyll\u0027, \u0027addsyll 1\u0027, \u0027addsyll 1 1\u0027, \u0027addsyll 1 1 sy/\u0027"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: Invalid command format. addsyll command message usage is shown."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d Delete syllabus command"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Deletes a syllabus from an existing student"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Prerequisite: Tutorhelper must not be empty"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027deletesyll 1 1 1\u0027"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: Removed selected syllabus from Student: Display student\u0027s details."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027deletesyll X 1 1\u0027 (X is an invalid student index)"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: The student index provided is invalid"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027deletesyll 1 X 1\u0027 (X is an invalid subject index)"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: The subject index provided is invalid"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027deletesyll 1 1 X\u0027 (X is an invalid syllabus index)"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: The syllabus index provided is invalid"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Other incorrect deletesyll commands to try: \u0027deletesyll\u0027, \u0027deletesyll 1\u0027, \u0027deletesyll 1 1\u0027"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: Invalid command format. deletesyll command message usage is shown."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d Edit syllabus command"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Edits a syllabus from an existing student"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Prerequisite: Tutorhelper must not be empty"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027editsyll 1 1 1 sy/Integration\u0027"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: Edited syllabus to Student: Display student\u0027s details."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027editsyll X 1 1 sy/Integration\u0027 (X is an invalid student index)"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: The student index provided is invalid"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027editsyll 1 X 1 sy/Integration\u0027 (X is an invalid subject index)"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: The subject index provided is invalid"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027editsyll 1 1 X sy/Integration\u0027 (X is an invalid syllabus index)"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: The syllabus index provided is invalid"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027editsyll 1 1 X sy/\u0027 (X is an invalid syllabus index)"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: Syllabus can take any values, and it should not be blank or preceded by white space."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Other incorrect editsyll commands to try: \u0027editsyll\u0027, \u0027editsyll 1\u0027, \u0027editsyll 1 1\u0027, \u0027editsyll 1 1 1\u0027"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: Invalid command format. editsyll command message usage is shown."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d\u003d Mark command"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Toggles the state of a specified syllabus topic for a specified student and subject."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Prerequisite: Tutorhelper must not be empty"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027mark 1 1 1\u0027"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: Changed selected syllabus from Student: Display student\u0027s details"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027mark X 1 1 \u0027 (X is an invalid student index)"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: The student index provided is invalid"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027mark 1 X 1 \u0027 (X is an invalid subject index)"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: The subject index provided is invalid"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Test case: \u0027mark 1 1 X \u0027 (X is an invalid syllabus index)"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: The syllabus index provided is invalid"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Other incorrect mark commands to try: \u0027mark\u0027, \u0027mark 1\u0027, \u0027mark 1 1\u0027"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".. Expected: Invalid command format. marksyll command message usage is shown."
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 242,
      "SusterDrifter": 37,
      "ongyz": 264,
      "andlimey": 12,
      "lywjoel": 39,
      "-": 541
    }
  },
  {
    "path": "docs/DummySearchPage.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmeta charset\u003d\"utf-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ctitle\u003eDummy Search Page\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscript type\u003d\"text/javascript\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    function getJsonFromUrl() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      var query \u003d location.search.substr(1);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      var result \u003d {};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      query.split(\"\u0026\").forEach(function(part) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        var item \u003d part.split(\"\u003d\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        result[item[0]] \u003d decodeURIComponent(item[1]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      return result;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    document.addEventListener(\"DOMContentLoaded\", function(event) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      document.getElementById(\"name\").innerHTML\u003dgetJsonFromUrl().name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/script\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "  Hi \u003cspan id\u003d\"name\"\u003e\u003c/span\u003e: This is a placeholder page for se-edu/TutorHelper-level4.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  You may update the code to load a page from a real service (e.g., Google search).\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  This dummy page is used here because, given the high number of forks of this repo, loading a page from a real third-party service by default can result in that service taking counter-measures (e.g., redirecting to captcha pages) due to the high number of rapid requests received from a single IP.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  When you have made the change, please remove:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003col\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cli\u003eThis file (\u003ccode\u003edocs/DummySearchPage.html\u003c/code\u003e).\u003c/li\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cli\u003eTask \u003ccode\u003ecopyDummySearchPage\u003c/code\u003e in both \u003ccode\u003ebuild.gradle\u003c/code\u003e and \u003ccode\u003e.travis.yml\u003c/code\u003e.\u003c/li\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/ol\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "-": 31
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ":repoURL: https://github.com/se-edu/TutorHelper-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e uses events to communicate with components without needing a direct coupling. Also note how the link:{repoURL}/src/main/java/seedu/address/commons/core/index/EventsCenter.java[`EventsCenter.java`] acts as an event dispatcher to facilitate communication between event creators and event consumers."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Note how components of TutorHelper have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Note how the TutorHelper app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* Add more assertions to TutorHelper as you see fit."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the TutorHelper app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Add more logging to TutorHelper as you see fit."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Note how TutorHelper uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Analyze the TutorHelper code/design to identify,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the TutorHelper app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as ControlsFx. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the TutorHelper app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/TutorHelper-level4[image:https://travis-ci.org/se-edu/TutorHelper-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/TutorHelper-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/TutorHelper-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/TutorHelper-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/address/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/address/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/address/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* Test methods `prefsReadSave()` and `TutorHelperReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* Test method `handleTutorHelperChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleTutorHelperChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/address/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/address/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern* : The \u003c\u003cDeveloperGuide#events-driven-nature-of-the-design, event driven mechanism\u003e\u003e used by this code base employs the Observer pattern. For example, objects that are interested in events need to have the `@Subscribe` annotation in the class (this is similar to implementing an `\\\u003c\u003cObserver\u003e\u003e` interface) and register with the `EventsCenter`. When something noteworthy happens, an event is raised and the `EventsCenter` notifies all relevant subscribers. Unlike in the Observer pattern in which the `\\\u003c\u003cObservable\u003e\u003e` class is notifying all `\\\u003c\u003cObserver\u003e\u003e` objects, here the `\\\u003c\u003cObservable\u003e\u003e` classes simply raises an event and the `EventsCenter` takes care of the notifications."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/address/ui/UiPart.java[`UiPart`] (e.g. `StudentListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/TutorHelper-level4/pull/147[example]."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/TutorHelper-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/TutorHelper-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 15,
      "lywjoel": 1,
      "-": 250
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d TutorHelper - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W13-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "By: `W13-4`      Since: `September 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "TutorHelper is for tutors who have trouble managing their students’ details \u0026 progress, time of tuition and their own weekly tuition schedule. This project is an all-in-one scheduler."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": ".  Download the latest version of `TutorHelper` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your TutorHelper."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 s/Mathematics d/Monday, 12:00pm` : adds a student named `John Doe` to the TutorHelper."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "// tag::validinputs[]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d Valid Inputs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d Index"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Index should always be an integer. It has a maximum range of 0 (exclusive) to 2,147,483,647 (inclusive)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Any index outside of this range will automatically make any command an invalid input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Name should only contain alphabetical characters and spaces, and should not be blank."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Phone"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Phone numbers should only be 8 digits long and should not contain spaces."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Email"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Emails should be of the format `local-part@domain`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* The local-part should only contain alphanumeric characters and these special characters, excluding the parentheses, (!#$%\u0026\u0027*+/\u003d?`{|}~^.-) ."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* This is followed by a \u0027@\u0027 and then a domain name. The domain name must:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     - be at least 2 characters long"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     - start and end with alphanumeric characters"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d Subjects"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Valid subjects are limited to only the following subjects: +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "`Mathematics`, `Biology`, `Chemistry`, `Physics`, `Economics`, `Geography`, `History`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* In order to be valid subjects, the input must be a full substring match of length 3 or more with any of the valid subjects. This is to avoid too short of keyword matching."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* The match must start at the beginning of the subject name. This is to avoid confusion and multiple matching."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* Input must be a single word. This is to avoid cases where both invalid and valid keyword are input by user."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* Matching is case insensitive."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `Biology`, `Bio`, or `bio` will match with `Biology`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `iology` will not match will `Biology` as the match does not start from the beginning."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `Ma` will not match `Mathematics` because the length of subtring is shorter than three."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `phy` will only match `Physics` and will not match `Geography` as matching is done from the beginning of the string."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `Maths` will not match `Mathematics` as it is not a full substring match."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `History Literature` will not match anything as it contains more than 1 word."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d\u003d TuitionTiming"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andlimey"
        },
        "content": "The days of the week are case sensitive and the valid inputs are: +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andlimey"
        },
        "content": "`Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andlimey"
        },
        "content": "* The time should follow the 12-hour clock (e.g. 12:00pm)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "// end::validinputs[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d View Help : `help`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add Student: `add`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Adds a student to the TutorHelper +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS s/SUBJECT... d/TUITION TIMING [t/TAG], [MORE TAGS]...`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "A student can have any number of tags (including 0), and must have at least 1 subject."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "****"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* Student must not have the same name and one of these fields as an existing student: phone number, email and address."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* Name cannot contain any integer or symbols."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* Phone number must only be 8 digits long."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Tuition timing has to contain a valid day and valid timing in 12 hour format."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* All inputs need to be valid for the student to be successfully added."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "****"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01, s/Mathematics d/Monday 6:00pm`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01, s/Mathematics s/* d/Monday 6:00pm` will fail due to one invalid subject."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Delete Student : `delete`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified student from the TutorHelper. +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the student at the specified `INDEX`."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* The index cannot be more than number of displayed students on list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd student in the TutorHelper."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st student in the results of the `find` command."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Edit Student : `edit`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Edits an existing student in the TutorHelper. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/SUBJECT] [d/TIMING] [t/TAG]...`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the student at the specified `INDEX`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* The index cannot be more than number of displayed students on list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* When editing tags, the existing tags of the student will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* You can remove all the student\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* You cannot edit payment entries or syllabus entries using edit, you will need to use paid or editsyll specifically."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Edits the phone number and email address of the 1st student to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Edits the name of the 2nd student to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d List Students : `list`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all students in the TutorHelper. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Find Students : `find`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Finds students whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Students matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Returns any student having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::group[]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Group Students : `group`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Lists all students with the specified tuition timing. +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "User can choose to group by time or day of the week. +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Format: `group TIMING`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Lists all students with the specified `TIMING`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The timing refers to either a time or day of the week."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* The day entered is case sensitive. e.g. `Monday` is valid but `MONDAY` isn\u0027t"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* The time entered must be in 12hr format. e.g. `12:00pm` is valid but `1200` isn\u0027t"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `group Monday` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Show all classes on Monday, sorted based on timing."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* `group 12:00pm` +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Show all classes at 12:00pm for the entire week, sorted based on days of the week."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// end::group[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Select Student : `select`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Selects the student identified by the index number used in the displayed student list. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Selects the student and displays the information of the student at the specified `INDEX`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* The index cannot be more than number of displayed students on list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd student in the TutorHelper."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Selects the 1st student in the results of the `find` command."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d List Command History : `history`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo Command : `undo`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the TutorHelper to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Undoable commands: those commands that modify the TutorHelper\u0027s content (`add`, `delete`, `edit`, `clear`, `addsyll`, `deletesyll`, and `copysub`)."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redo Command : `redo`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clear TutorHelper : `clear`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Clears all student records from the TutorHelper. +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "// tag::payment[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Record Payment : `paid`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Records a payment of a specified amount made by a specified student for a specified month and year. +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Format: `paid STUDENT_INDEX AMOUNT MONTH YEAR`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ongyz"
        },
        "content": "If a payment entry already exists, the amount will replace the existing payment record."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "The maximum payment amount allowable is 10 000 each time."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Only positive integers are accepted as payment amount."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* Records a payment of a specified `AMOUNT` for the student at the specified `STUDENT_INDEX`, for a specified `MONTH` and `YEAR`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index, month and year *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* The index cannot be more than number of displayed students on list."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `paid 1 200 01 2018` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "Records a payment of $200 made for January 2018, or adds $200 to the payment made for January 2018 if a payment entry already exists."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "// end::payment[]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "// tag::earnings[]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Display Earnings : `earnings`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "Displays total earnings across all students for a specified month of a specified year. +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "Format: `earnings MONTH YEAR`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* Display tutor earnings across all students for a specified `MONTH` of a specified `YEAR`."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The month and year *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `earnings 01 2018` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Displays earnings made for January 2018."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "// end::earnings[]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::adddelsub[]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add Subject : `addsub`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Adds a new subject to a specified student. Refer to valid subject inputs under 3. Feature. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Format: `addsub STUDENT_INDEX s/SUBJECT, [MORE SUBJECTS...]`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* Adding a subject that already exists for the student will throw an error."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* Adding subject of the same type in a single input will throw an error. +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "e.g `addsub 1 1 s/Chemistry s/Chemistry` is not permitted."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "* Adds a new subject `SUBJECT` for a student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "* The student index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* The index cannot be more than number of displayed students on list."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "* `addsub 1 s/Physics +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a subject \"Physics\" for the first student."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* `addsub 2 s/Mathematics +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a subject \"Mathematics\" for the second student."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Delete Subject : `deletesub`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes a subject from a specified student. +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deletesub STUDENT_INDEX SUBJECT_INDEX`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Attempting to delete the only subject left for a student will throw an error."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "A student must have at least one subject."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes a subject at the specified `SUBJECT_INDEX` for a student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The subject index refers to the index number shown in the student\u0027s subject list."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The student index and subject index *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "* The index cannot be more than number of displayed students on list."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "* `deletesub 1 2` +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the second subject from the first student."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "* `deletesub 3 1` +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the first subject from the third student."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "// end::adddelsub[]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "// tag::copysub[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Copy Subject : `copysub`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "Copies a subject and all its syllabus topics from a specified student to specified target student. Duplicate syllabus topics will not be added. +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `copysub SOURCE_STUDENT_INDEX SUBJECT_INDEX TARGET_STUDENT_INDEX`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Use `find` command to display both the source and target student on the list."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "* Copies a subject (and all its syllabus topics) at the specified `SUBJECT_INDEX` from the student at the specified `SOURCE_STUDENT_INDEX` to the student at the specified `TARGET_STUDENT_INDEX`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "* The source and target student indexes refer to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* The subject index refers to the index number shown in the student\u0027s subject list."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* The subject index and source and target student indexes *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* The student index cannot be more than number of displayed students on list."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "****"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "* `copysub 1 1 2` +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "Copies the first subject from the first student to the second student."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "* `copysub 1 2 3` +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "Copies the second subject from the first student to the third student."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "// end::copysub[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "// tag::addsyll[]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d Add Syllabus Topic : `addsyll`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Adds new syllabuses topic for a specified student and subject. +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Format: `addsyll STUDENT_INDEX SUBJECT_INDEX sy/SYLLABUS, [MORE SYLLABUSES...]`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* Adding a syllabus topic that already exists under the subject will throw an error."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* Adding syllabuses of the same topic in a single input will throw an error. +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "e.g `addsyll 1 1 sy/Calculus sy/Calculus` is not permitted."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "****"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "* Adds a new syllabus topic `SYLLABUS` for a subject at the specified `SUBJECT_INDEX` for a student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "* The student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* The subject index refers to the index number shown in the student\u0027s subject list."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "* The student index and subject index *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "* The student index cannot be more than number of displayed students on list."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "****"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `addsyll 1 2 sy/Integration` +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a syllabus topic \"Integration\" to the second subject of the first student."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `addsyll 3 2 sy/Poisson Distribution` +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a syllabus topic \"Poisson Distribution\" to the second subject of the third student."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "// end::addsyll[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "// tag::deletesyll[]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d\u003d Remove Syllabus Topic : `deletesyll`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "Removes a syllabus topic for a specified student and subject. +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Format: `deletesyll STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "****"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "* Removes a syllabus topic at the specified `SYLLABUS_INDEX` for a subject at the specified `SUBJECT_INDEX` for a student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* The student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "* The subject index refers to the index number shown in the student\u0027s subject list."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "* The syllabus index refers to the index number shown in the student\u0027s list of syllabus topics for a subject."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* The student index, subject index and syllabus index *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* The student index cannot be more than number of displayed students on list."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "****"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `deletesyll 1 1 2` +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the second syllabus topic from the first subject of the first student."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* `deletesyll 3 1 1` +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the first syllabus topic from the first subject of the third student."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "// end::deletesyll[]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ongyz"
        },
        "content": "// tag::editsyll[]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Edit Syllabus Topic : `editsyll`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "Edits a syllabus topic for a specified student and subject. +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `editsyll STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX sy/SYLLABUS`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "Editing a syllabus topic will automatically unmark it."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits a syllabus topic at the specified `SYLLABUS_INDEX` for a subject at the specified `SUBJECT_INDEX` for a student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "* The student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "* The subject index refers to the index number shown in the student\u0027s subject list."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "* The syllabus index refers to the index number shown in the student\u0027s list of syllabus topics for a subject."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "* The student index, subject index and syllabus index *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "* The student index cannot be more than number of displayed students on list."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "* `editsyll 1 1 2 sy/Integration` +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "Changes the second syllabus topic of the first subject of the first student to \"Integration\"."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "* `editsyll 3 1 1 sy/Kinetic Energy` +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "Changes the first syllabus topic of the first subject of the third student to \"Kinetic Energy\"."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ongyz"
        },
        "content": "// end::editsyll[]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "// tag::mark[]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Mark Syllabus Topic : `mark`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "Toggles the state of a specified syllabus topic for a specified student and subject. +"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `mark STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "****"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "* Toggle the state of a syllabus topic at the specified `SYLLABUS_INDEX` for a subject at the specified `SUBJECT_INDEX` for a student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* The student index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* The subject index refers to the index number shown in the student\u0027s subject list."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* The syllabus index refers to the index number shown in the student\u0027s list of syllabus topics for a subject."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "* The student index, subject index and syllabus index *must be positive integers* 1, 2, 3, ..."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "* The student index cannot be more than number of displayed students on list."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "****"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "* `mark 1 1 3` +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "Marks the third syllabus topic of the first subject of the first student."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "* `mark 2 1 2` +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "Marks the second syllabus topic of the first subject of the second student."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "// end::mark[]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exit Program : `exit`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Save Data"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "TutorHelper data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous TutorHelper folder."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "* *View Help* : `help`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add Student* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete Student* : `delete INDEX` +"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit Student* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* *List Students* : `list`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find Students* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "* *Group Students* : `group TIMING` +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "e.g `group Monday` +"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "e.g `group 12:00pm`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select Student* : `select INDEX` +"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "* *List Command History* : `history`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo Command* : `undo`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo Command* : `redo`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear TutorHelper* : `clear`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "* *Record Payment* : `paid STUDENT_INDEX AMOUNT MONTH YEAR` +"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `paid 1 200 08 2018`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "* *Display Earnings* : `earnings MONTH YEAR` +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `earnings 01 2018`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* *Add Subject* : `addsub STUDENT_INDEX s/SUBJECT, [MORE SUBJECTS...]` +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `addsub 1 s/Physics`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* *Remove Subject* : `deletesub STUDENT_INDEX SUBJECT_INDEX` +"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `deletesub 1 2`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "* *Copy Subject* : `copysub SOURCE_STUDENT_INDEX SUBJECT_INDEX TARGET_STUDENT_INDEX` +"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `copysub 1 1 2`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* *Add Syllabus Topic* : `addsyll STUDENT_INDEX SUBJECT_INDEX sy/SYLLABUS, [MORE SYLLABUS...]` +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "e.g. `addsyll 1 2 sy/Integration`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* *Remove Syllabus Topic* : `deletesyll STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX` +"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "e.g. `deletesyll 1 1 1`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit Syllabus Topic* : `editsyll STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX sy/SYLLABUS` +"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `editsyll 1 1 2 sy/Integration`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "* *Mark Syllabus Topic* : `mark STUDENT_INDEX SUBJECT_INDEX SYLLABUS_INDEX` +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `mark 1 1 1`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "* *Exit TutorHelper* : `exit`"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 7,
      "SusterDrifter": 125,
      "ongyz": 4,
      "andlimey": 9,
      "lywjoel": 50,
      "-": 395
    }
  },
  {
    "path": "docs/UsingAppVeyor.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AppVeyor"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.appveyor.com/[AppVeyor] is a _Continuous Integration_ platform for GitHub projects. It runs its builds on Windows virtual machines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AppVeyor can run the project\u0027s tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken on Windows by the changes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "The current AppVeyor setup performs the following things whenever someone pushes code to the repo:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the `gradlew.bat headless allTests` command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* Automatically retries the build up to 3 times if a task fails."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customize your AppVeyor build further, you can learn more about AppVeyor from the https://www.appveyor.com/docs/[AppVeyor Documentation]."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up AppVeyor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://ci.appveyor.com/, and under `Login`, click on `GitHub` to login with your GitHub account. Enter your GitHub account details if needed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/login.png[Click on GitHub in the login page]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".  After logging in, you will be brought to your projects dashboard. Click on `NEW PROJECT`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-1.png[Click on \"NEW PROJECT\" in the projects dashboard]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  You will be brought to the `Select repository` page. Select `GitHub`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* On your first usage of AppVeyor, you will need to give AppVeyor authorization to your GitHub account. Click on `Authorize GitHub`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-2.png[Click on Authorize GitHub]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* This will bring you to a GitHub page that manages the access of third-party applications to your repositories."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Depending on whether you are the owner of the repository, you can either"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "grant access:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Or request access:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  AppVeyor will then list the repositories you have access to in your GitHub account. Find the repository you want to set AppVeyor up on, and then click `ADD`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-3.png[Click \"Add\" on the repository you want to set AppVeyor up on]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".  AppVeyor will then be activated on that repository. To see the CI in action, push a commit to any branch!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the AppVeyor build:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/ci-pending.png[Commit build]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/ci-log.png[AppVeyor build]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \"build status\" badge at the top of `README.adoc` to point to the AppVeyor build status of your own repo."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* To find your build status badge URL, first go to your project settings by clicking on the \"Settings\" icon:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-1.png[Click on project settings]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Then go to the `Badges` section of your project settings by clicking on it:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-2.png[Click on \"Badges\"]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* As AppVeyor does not provide asciidoc code for the badge, we will have to create our own. Start by copying the markdown code provided:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-3.png[Copy the markdown code]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "The markdown code should be in this format:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[![Build status](\u003clink to image\u003e)](\u003clink to project\u003e)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Convert it to the asciidoc format as follows:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003clink to project\u003e[image:\u003clink to image\u003e[Build status]]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The asciidoc code should look similar to:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "https://ci.appveyor.com/project/damithc/TutorHelper-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Copy and paste the asciidoc code to your `README.adoc` file."
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "-": 87
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ". Enter an arbitrary description e.g. TutorHelper"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "-": 41
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "Creates the `TutorHelper.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests in the `seedu.address.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all non-GUI tests in the `seedu.address`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "-": 112
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the `./gradlew clean headless allTests coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* Automatically retries the build up to 3 times if a task fails."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".  If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret! If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ".  Go to the URL `\\https://\u003cyour-username-or-organization-name\u003e.github.io/TutorHelper-level4/`. You should see your `README` file displayed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "-": 131
    }
  },
  {
    "path": "docs/team/andlimey.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d Andy Chan Wai Yee - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d PROJECT: TutorHelper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andlimey"
        },
        "content": "It is a Java sample application intended for Tutors who would like to organise their students\u0027 information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "* *Major enhancement*: added *the ability to group the students based on their tuition timing and sort accordingly to day or time*."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "** What it does: allows the user to either group students by the day of the tuition or the timing. Grouping by day will sort the students in that day by their tuition timing and grouping by time will sort the students with that tuition timing by the days of the week."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "** Justification: Tutors are busy and want to know how many classes they have to teach in a specific day or how often in a week they have to teach at a specific timing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "** Highlights: Grouping the students will permanently sort the list of students. This can be undone with the `undo` command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "** Add Subject and TuitionTiming into TutorHelper (Pull request https://github.com[#11])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "** Updating of test cases for new changes (Pull requests https://github.com[#67], https://github.com[#75], https://github.com[#97], https://github.com[#122])"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dandlimey"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "*** Created issues for the different milestones and labelled them according to the severity and priority on Github."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "*** Refined the regex for name, phone and tuition timing (Pull request https://github.com[#193])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andlimey"
        },
        "content": "*** Wrote additional tests for new features added to increase code coverage (Pull requests https://github.com[#136], https://github.com[#144], https://github.com[#152])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andlimey"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andlimey"
        },
        "content": "*** Added team members\u0027 images in AboutUs"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "*** Edited `Valid Inputs` section in the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "*** Added section for group in the User Guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "*** Edited `User Stories` and `Use Cases` in Developer Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "*** Added section for group in the Developer Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": "*** Reviewed other PRs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andlimey"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andlimey"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andlimey"
        },
        "content": "*** Integrated a third party library (TravisCI) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andlimey"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andlimey"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andlimey"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andlimey"
        },
        "content": "include::../UserGuide.adoc[tag\u003dvalidinputs]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andlimey"
        },
        "content": "include::../UserGuide.adoc[tag\u003dgroup]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andlimey"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andlimey"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andlimey"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andlimey"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andlimey"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duserstories]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andlimey"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dusecases]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andlimey"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dgroup]"
      }
    ],
    "authorContributionMap": {
      "andlimey": 68,
      "lywjoel": 1
    }
  },
  {
    "path": "docs/team/lywjoel.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d Lee Yi Wei, Joel - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d Project: TutorHelper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "TutorHelper is a Java application intended for tutors who would like to organise their students\u0027 information. The tutor interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 25 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* *Contributed Code*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dlywjoel[RepoSense]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* *Major Enhancement*:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "** Added *the ability to add and delete subjects taken to student entries* (Pull Request https://github.com/CS2103-AY1819S1-W13-4/main/pull/112[#112])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "*** This enhancement allows the tutor to add and delete subjects taken by their students. Each subject will have its own list of syllabus topics."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "*** Justification: Students of tutors may request to receive tuition for more than one subject from the same tutor. This enhancement allows the tutor to record such instances instead of creating a new student entry for each subject."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "*** Highlights: A student entry must have at least one subject taken at all times. Logically, a student entry should not exist if the student is not taking a subject taught by the tutor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* *Minor Enhancements*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "** [Deprecated] Added and updated a simple HTML display to facilitate display of student information (Pull Requests https://github.com/CS2103-AY1819S1-W13-4/main/pull/25[#25], https://github.com/CS2103-AY1819S1-W13-4/main/pull/31[#31], https://github.com/CS2103-AY1819S1-W13-4/main/pull/78[#78], https://github.com/CS2103-AY1819S1-W13-4/main/pull/93[#93])"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "** Converted original HTML display to an FXML display (Pull Requests https://github.com/CS2103-AY1819S1-W13-4/main/pull/158[#158], https://github.com/CS2103-AY1819S1-W13-4/main/pull/161[#161])"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "** Project Management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "*** Managed releases v1.1 to v1.3.1 (https://github.com/CS2103-AY1819S1-W13-4/main/releases[4 releases]) on GitHub"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "*** Created and labelled issues for the different milestones on Github"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "** Enhancements to Existing Features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "*** Wrote additional tests for new features added to increase code coverage (Pull Requests https://github.com/CS2103-AY1819S1-W13-4/main/pull/30[#30], https://github.com/CS2103-AY1819S1-W13-4/main/pull/132[#132], https://github.com/CS2103-AY1819S1-W13-4/main/pull/153[#153])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "*** Reviewed, formatted and standardised terminology in documentation (Pull Requests https://github.com/CS2103-AY1819S1-W13-4/main/pull/47[#47], https://github.com/CS2103-AY1819S1-W13-4/main/pull/78[#78], https://github.com/CS2103-AY1819S1-W13-4/main/pull/87[#87], https://github.com/CS2103-AY1819S1-W13-4/main/pull/115[#115], https://github.com/CS2103-AY1819S1-W13-4/main/pull/159/commits/85ef6a6cbc7b33f0bdc21542a98caaf1ab59b687[#159])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "*** Added section for adding and deleting subjects in the https://github.com/CS2103-AY1819S1-W13-4/main/pull/115/commits/28ca85280267d59e3d8b3b6a8381f8c56d569ba3[User Guide]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "*** Added section for adding and deleting subjects in the https://github.com/CS2103-AY1819S1-W13-4/main/pull/87/commits/40e42156feecd1337b7daf60d2cd598e71f7660b[Developer Guide]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "*** Reviewed other PRs"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "*** Fixed code style violations for team"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "*** Reported bugs and gave suggestions to other teams in the class"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "include::../UserGuide.adoc[tag\u003dadddelsub]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dadddelsub]"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 57
    }
  },
  {
    "path": "docs/team/ongyz.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongyz"
        },
        "content": "\u003d Ong Yan Zhi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongyz"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongyz"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongyz"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongyz"
        },
        "content": "\u003d\u003d PROJECT: TutorHelper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongyz"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongyz"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": "It is a Java sample application intended for Tutors who would like to organise their students\u0027 information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* *Major enhancement*: added *the ability to edit existing syllabus entries*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongyz"
        },
        "content": "** What it does: allows the user to edit existing syllabus entries."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongyz"
        },
        "content": "** Justification: Curriculum of subjects taught in schools change constantly, a tutor could update syllabus of a subject whenever there are changes and the app should provide a convenient way to edit them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "** Highlights: Editing syllabus entries will cause changes in the database. The use of the editsyll command ensures that all other fields of student remains unedited."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* *Major enhancement*: added *the ability to edit existing payment entries*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongyz"
        },
        "content": "** What it does: allows the user to edit existing payment entries using the same paid command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "** Justification: Students could pay fees in installments or weekly instead of monthly, as such tutors may need to constantly edit payment entries for the month and the app should provide a convenient way to edit them."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongyz"
        },
        "content": "** Highlights: Editing payment entries will cause changes in the database. The use of the paid command looks for existing payment entries with the same month and year."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": "** Updating of test cases for new changes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongyz"
        },
        "content": "** XmlClasses for data writing into xml files for storage (Pull request https://github.com[#14])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dongyz"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongyz"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongyz"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": "*** Created issues for the different milestones and labelled them according to the severity and priority on Github."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": "*** Create max capacity of payment entries tracked (Pull request https://github.com[#73])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongyz"
        },
        "content": "*** Wrote additional tests for new features added to increase code coverage (Pull requests https://github.com[#126], https://github.com[#141])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongyz"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongyz"
        },
        "content": "*** Added section for editsyll and editing using paid in the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "*** Added section for editsyll and editing using paid in the Developer Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongyz"
        },
        "content": "*** Reviewed other PRs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongyz"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongyz"
        },
        "content": "*** Integrated a third party library (TravisCI) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongyz"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongyz"
        },
        "content": "include::../UserGuide.adoc[tag\u003deditsyll]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongyz"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duserstories]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongyz"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deditsyll]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongyz"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deditpaid]"
      }
    ],
    "authorContributionMap": {
      "ongyz": 67
    }
  },
  {
    "path": "docs/team/ooihuiying.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d Ooi Hui Ying - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d PROJECT: TutorHelper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "It is a Java sample application intended for Tutors who would like to organise their students\u0027 information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* *Major enhancement*: added *the ability to add payments to a student*."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "** What it does: allows the tutor to record payment for his/her student and keep track of which month or year a particular payment amount was made."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "** Justification: It is difficult for tutors to keep track of payment and this feature can help tutors manage their payments and ensure that he/she is fairly paid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "** Highlights: Making a new payment entry will update the student\u0027s details in the database. Only a maximum of $10 000 can be keyed in as payment."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* *Major enhancement*: added *the ability to view tutor\u0027s earning for a specific month and year*."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "** What it does: Tutor can view his total earnings across the board for a specific year and month."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "** Justification: This feature allows tutor to sum up his monthly salary and allow him to better manage his financial accounts."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "** Highlights: If no payment has been made for that particular month or year, then earnings displayed will be of default $0."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "** Add Payment into TutorHelper (Pull request https://github.com[#12])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dooihuiying"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "*** Created issues for the different milestones and labelled them according to the severity and priority on Github."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "*** Wrote additional tests for new features added to increase code coverage (Pull requests https://github.com[#138])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "*** Did refactoring of addressbook to tutorHelper (Pull requests https://github.com[#143])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "*** Added section for payment and earnings in the User Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "*** Added section for payment and earnings in the Developer Guide"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "*** Reviewed other PRs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "*** Integrated a third party library (TravisCI) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "include::../UserGuide.adoc[tag\u003dpayment]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "include::../UserGuide.adoc[tag\u003dearnings]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duserstories]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dusecases]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dpayment]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dearnings]"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 71,
      "lywjoel": 2
    }
  },
  {
    "path": "docs/team/susterdrifter.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d Anthony Halim - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003d\u003d PROJECT: TutorHelper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "It is a Java sample application intended for Tutors who would like to organise their students\u0027 information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* *Major enhancement*: added the ability *to manipulate state of syllabus within subjects as well as copy a subject from one student to another*."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "** What it does: User can add, remove, or mark syllabus from the specified subject. User can also copy a whole subject,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "along its contents, to another student."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "** Justification: Tutors need to differentiate between subjects of different levels or schools."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "Allowing manipulation of syllabus provides greater amount of flexibility and details of each subject."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "However, in the case where multiple students who actually studies the same content, `copysub` command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "allow users to easily manage the subjects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "** Highlights: Copying can lead to duplicated syllabus and subjects which needs to be addressed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "** Add syllabus into TutorHelper"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "** Allow students to have multiple subjects"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "** Converts subjects to enumeration for easier management of code"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "** Data writing into storage of subject and its syllabus"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dsusterdrifter"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "*** Assign issues to group members and labels on Github"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "*** Allow students to have multiple subjects"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "*** Updated the GUI formatting as well as its styling"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "*** Wrote additional tests for features added: addsyll, deletesyll, copysub, mark, subjects and syllabus"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "*** Added section about valid inputs for name, email, and subjects in the User Guide"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "*** Added sections for addsyll, deletesyll, copsub, mark in the User Guide"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "*** Added section for copysub in the Developer Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "*** Review other PRs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "*** Integrated a third party library (TravisCI) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "include::../UserGuide.adoc[tag\u003dvalidinputs]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcopysub]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddsyll]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeletesyll]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmark]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcopysub]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 75,
      "lywjoel": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ReadOnlyTutorHelper;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.storage.TutorHelperStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.storage.XmlTutorHelperStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 1, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TutorHelper ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        TutorHelperStorage tutorHelperStorage \u003d new XmlTutorHelperStorage(userPrefs.getTutorHelperFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        storage \u003d new StorageManager(tutorHelperStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s TutorHelper and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * The data from the sample TutorHelper will be used instead if {@code storage}\u0027s TutorHelper is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * or an empty TutorHelper will be used instead if errors occur when reading {@code storage}\u0027s TutorHelper."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Optional\u003cReadOnlyTutorHelper\u003e tutorHelperOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        ReadOnlyTutorHelper initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            tutorHelperOptional \u003d storage.readTutorHelper();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            if (!tutorHelperOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TutorHelper\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            initialData \u003d tutorHelperOptional.orElseGet(SampleDataUtil::getSampleTutorHelper);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TutorHelper\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            initialData \u003d new TutorHelper();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TutorHelper\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            initialData \u003d new TutorHelper();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TutorHelper\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        logger.info(\"Starting TutorHelper \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Tutor Helper ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 20,
      "lywjoel": 4,
      "-": 184
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private String appTitle \u003d \"TutorHelper\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String LOG_FILE \u003d \"TutorHelper.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "-": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_INVALID_SUBJECT_INDEX \u003d \"The subject index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_INVALID_SYLLABUS_INDEX \u003d \"The syllabus index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_STUDENTS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 2,
      "lywjoel": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/TutorHelperChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ReadOnlyTutorHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "/** Indicates the TutorHelper in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class TutorHelperChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public final ReadOnlyTutorHelper data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public TutorHelperChangedEvent(ReadOnlyTutorHelper data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return \"number of students \" + data.getStudentList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 18,
      "lywjoel": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Indicates a request to jump to the list of students"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/StudentPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Represents a selection change in the Student List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class StudentPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final Student newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentPanelSelectionChangedEvent(Student newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public Student getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final int MINIMUM_LENGTH_TO_MATCH \u003d 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns true if the {@code word} contains the substring {@code toSearch}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Match is only counted from the beginning of {@code word}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * {@code toSearch} must be of minimum length three before it is considered to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * avoid one letter match."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *   Ignores case, only a partial word match is required."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *       containsSubWordIgnoreCase(\"ABcDef\", \"cd\") \u003d\u003d false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *       containsSubWordIgnoreCase(\"ABcdEf\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *       containsSubWordIgnoreCase(\"Abd\", \"AB\") \u003d\u003d false // length less than three"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param word cannot be null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param toSearch cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static boolean isSubstringMatchFromIndexZero(String word, String toSearch) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(toSearch);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String preppedToSearch \u003d toSearch.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        checkArgument(!preppedToSearch.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        checkArgument(preppedToSearch.split(\"\\\\s+\").length \u003d\u003d 1,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // Length of keyword must exceed minimum length"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (preppedToSearch.length() \u003c MINIMUM_LENGTH_TO_MATCH) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (int i \u003d 0; i \u003c preppedToSearch.length(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (Character.toLowerCase(word.charAt(i)) !\u003d Character.toLowerCase(preppedToSearch.charAt(i))) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 36,
      "lywjoel": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of students */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 3,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.parser.TutorHelperParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private final TutorHelperParser tutorHelperParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        tutorHelperParser \u003d new TutorHelperParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            Command command \u003d tutorHelperParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 4,
      "lywjoel": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_AND_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " * Adds a student to the tutor helper."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \": Adds a student to the TutorHelper.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + PREFIX_DAY_AND_TIME + \"TUITION TIMING \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            + PREFIX_SUBJECT + \"Mathematics \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + PREFIX_DAY_AND_TIME + \"Monday 6:00pm \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + PREFIX_TAG + \"friends\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the tutor helper\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Student}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public AddCommand(Student student) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (model.hasStudent(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        model.commitTutorHelper();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "SusterDrifter": 2,
      "andlimey": 3,
      "lywjoel": 15,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddSubCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Adds a subject for a student in the TutorHelper."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class AddSubCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addsub\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \": Adds a subject for a student in the TutorHelper.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"STUDENT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + PREFIX_SUBJECT + \"Physics \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_ADDSUB_SUCCESS \u003d \"Added subject to student: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SUBJECT \u003d \"Subject is already taken by student: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final Subject subject;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Creates an AddSubCommand to add the {@code Subject} to the student at the {@code studentIndex}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public AddSubCommand(Index studentIndex, Subject subject) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(studentIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d lastShownList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d addSubjectTo(studentTarget, subject);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student updatedStudent \u003d SubjectsUtil.createStudentWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateStudent(studentTarget, updatedStudent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        model.commitTutorHelper();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADDSUB_SUCCESS, studentTarget));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Add a subject to a student."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param studentTarget The student to add the subject to."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param subject The subject to add to the student."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @return A new {@code Set\u003cSubject\u003e} with the specified subject added."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Set\u003cSubject\u003e addSubjectTo(Student studentTarget, Subject subject)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (subjects.contains(subject)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_SUBJECT, studentTarget));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e updatedSubjects \u003d subjects;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        updatedSubjects.add(subject);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                || (other instanceof AddSubCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((AddSubCommand) other).studentIndex))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 subject.equals(((AddSubCommand) other).subject); // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Stores the format of the AddSub Command."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static class AddSubFormatChecker {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public static final int STUDENT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public static final int NUMBER_OF_ARGS \u003d 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "lywjoel": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddSyllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SYLLABUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Adds a syllabus topic to a subject for a student in the TutorHelper."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class AddSyllCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addsyll\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \": Adds a syllabus topic to a subject for a student in the TutorHelper.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"STUDENT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"SUBJECT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            + PREFIX_SYLLABUS + \"SYLLABUS, [MORE SYLLABUSES]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 1 \" + PREFIX_SYLLABUS + \"Integration\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDSYLL_SUCCESS \u003d \"Added syllabus to Student: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SYLLABUS_IN_STUDENT \u003d \"Syllabus is already in Student: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SYLLABUS_IN_ARGUMENT \u003d \"Duplicate syllabuses are not allowed\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index subjectIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final List\u003cSyllabus\u003e syllabuses;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public AddSyllCommand(Index studentIndex, Index subjectIndex, List\u003cSyllabus\u003e syllabuses) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(studentIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(subjectIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(syllabuses);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectIndex \u003d subjectIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.syllabuses \u003d syllabuses;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Student studentTarget \u003d lastShownList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (subjectIndex.getZeroBased() \u003e\u003d studentTarget.getSubjects().size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Set\u003cSubject\u003e addedSubjectContent \u003d addSubjectContentTo(studentTarget, subjectIndex, syllabuses);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Student studentSubjUpdated \u003d SubjectsUtil.createStudentWithNewSubjects(studentTarget, addedSubjectContent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateStudentInternalField(studentTarget, studentSubjUpdated);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        model.commitTutorHelper();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADDSYLL_SUCCESS, studentSubjUpdated));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Add syllabus to the student."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param studentTarget The student to add to."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param subjectIndex The index of subject to add to."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param syllabuses The list of syllabus to add."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Set\u003cSubject\u003e} with the specified syllabus added"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private Set\u003cSubject\u003e addSubjectContentTo(Student studentTarget, Index subjectIndex, Collection\u003cSyllabus\u003e syllabuses)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        checkForDuplicates(syllabuses);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject selectedSubject \u003d subjects.get(subjectIndex.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject updatedSubject \u003d selectedSubject;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (Syllabus syllabus: syllabuses) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (selectedSubject.contains(syllabus)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_DUPLICATE_SYLLABUS_IN_STUDENT, studentTarget));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            updatedSubject \u003d updatedSubject.add(syllabus);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjects.set(subjectIndex.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws CommandException if duplicates exist within the {@code syllabuses}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private void checkForDuplicates(Collection\u003cSyllabus\u003e syllabuses) throws CommandException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Set\u003cSyllabus\u003e duplicateCheck \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (Syllabus syllabus : syllabuses) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if(!duplicateCheck.add(syllabus)){"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_SYLLABUS_IN_ARGUMENT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || (other instanceof AddSyllCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((AddSyllCommand) other).studentIndex))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 syllabuses.equals(((AddSyllCommand) other).syllabuses); // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Stores the details of the AddSyll command format."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static class AddSyllFormatChecker {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public static final int STUDENT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int SUBJECT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int NUMBER_OF_ARGS \u003d 2;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 103,
      "andlimey": 1,
      "lywjoel": 7,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Clears the TutorHelper."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"TutorHelper has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        model.resetData(new TutorHelper());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        model.commitTutorHelper();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 3,
      "lywjoel": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CopySubCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Copies a subject and its syllabus topics from one student to another."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class CopySubCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"copysub\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \": Copies a subject and its syllabus topics from one student to another. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"New syllabus topics will be appended in if the student is already taking the subject.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"SOURCE_STUDENT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"SUBJECT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"TARGET_STUDENT_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 2 4\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_COPYSUB_SUCCESS \u003d \"Copied syllabus to Student: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_COPYSUB_FAILED_SAME_STUDENT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \"Copying subject to the same student is not allowed: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final Index sourceStudentIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index subjectIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final Index targetStudentIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Creates a CopySubCommand to copy the subject at the {@code subjectIndex} from the student at the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code sourceStudentIndex} to the student at the {@code targetStudentIndex}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public CopySubCommand(Index sourceStudentIndex, Index subjectIndex, Index targetStudentIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.sourceStudentIndex \u003d sourceStudentIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectIndex \u003d subjectIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.targetStudentIndex \u003d targetStudentIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (sourceStudentIndex.getZeroBased() \u003e\u003d lastShownList.size()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            || targetStudentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentSource \u003d lastShownList.get(sourceStudentIndex.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d lastShownList.get(targetStudentIndex.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (sourceStudentIndex.equals(targetStudentIndex)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_COPYSUB_FAILED_SAME_STUDENT, studentSource));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (subjectIndex.getZeroBased() \u003e\u003d studentSource.getSubjects().size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Subject selectedSubject \u003d SubjectsUtil.copySubjectFrom(studentSource, subjectIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Set\u003cSubject\u003e updatedSubjects \u003d updateSubjectsFor(studentTarget, selectedSubject);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentUpdated \u003d SubjectsUtil.createStudentWithNewSubjects(studentTarget, updatedSubjects);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateStudent(studentTarget, studentUpdated);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        model.commitTutorHelper();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COPYSUB_SUCCESS, studentUpdated));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Add subject into studentTarget. If studentTarget already has the same subject, append the content"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param studentTarget the student to be updated"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param newSubject the subject to be added"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Set\u003cSubject\u003e} with updated subjects"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Set\u003cSubject\u003e updateSubjectsFor(Student studentTarget, Subject newSubject) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e targetSubjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (SubjectsUtil.hasSubject(studentTarget, newSubject.getSubjectType())) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            Index index \u003d SubjectsUtil.findSubjectIndex(studentTarget, newSubject.getSubjectType()).get();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            Subject updatedSubject \u003d targetSubjects.get(index.getZeroBased())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                                                   .append(newSubject.getSubjectContent());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            targetSubjects.set(index.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            targetSubjects.add(newSubject);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new HashSet\u003c\u003e(targetSubjects);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || (other instanceof CopySubCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 sourceStudentIndex.equals(((CopySubCommand) other).sourceStudentIndex)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 targetStudentIndex.equals(((CopySubCommand) other).targetStudentIndex)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 subjectIndex.equals(((CopySubCommand) other).subjectIndex));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Stores the details of CopySyll command format."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static class CopySubFormatChecker {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public static final int SOURCE_STUDENT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int SUBJECT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public static final int TARGET_STUDENT_INDEX \u003d 2;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int NUMBER_OF_ARGS \u003d 3;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "SusterDrifter": 75,
      "lywjoel": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Deletes a student identified using it\u0027s displayed index from the TutorHelper."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Creates a DeleteCommand to delete the student at the {@code targetIndex}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        model.commitTutorHelper();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "lywjoel": 12,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteSubCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SUBJECT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Deletes a subject for a student in the TutorHelper."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class DeleteSubCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletesub\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \": Deletes a subject for a student in the TutorHelper.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"STUDENT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"SUBJECT_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"2\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_DELETESUB_SUCCESS \u003d \"Deleted subject from student: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_DELETE_ONLY_SUBJECT \u003d \"At least one subject must be studied by student: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final Index subjectIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Creates a DeleteSubCommand to delete the subject at the {@code subjectIndex}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * from the student at the {@code studentIndex}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public DeleteSubCommand(Index studentIndex, Index subjectIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.subjectIndex \u003d subjectIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d lastShownList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d removeSubjectFrom(studentTarget);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student updatedStudent \u003d SubjectsUtil.createStudentWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateStudent(studentTarget, updatedStudent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        model.commitTutorHelper();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETESUB_SUCCESS, studentTarget));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Deletes a subject from a student."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param studentTarget The student to add the subject to."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @return A new {@code Set\u003cSubject\u003e} without the subject."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Set\u003cSubject\u003e removeSubjectFrom(Student studentTarget)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (isSubjectIndexOutOfBounds(subjects)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (hasOneSubject(subjects)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DELETE_ONLY_SUBJECT, studentTarget));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e updatedSubjects \u003d subjects;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        updatedSubjects.remove(subjectIndex.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private boolean isSubjectIndexOutOfBounds(List\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return subjectIndex.getOneBased() \u003e subjects.size();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private boolean hasOneSubject(List\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return subjects.size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                || (other instanceof DeleteSubCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((DeleteSubCommand) other).studentIndex))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 subjectIndex.equals(((DeleteSubCommand) other).subjectIndex); // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Stores the format of the DeleteSub Command."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static class DeleteSubFormatChecker {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public static final int STUDENT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public static final int SUBJECT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public static final int NUMBER_OF_ARGS \u003d 2;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "lywjoel": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteSyllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Removes a syllabus topic from a specified subject of a specified student."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongyz"
        },
        "content": "public class DeleteSyllCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletesyll\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \": Removes a syllabus topic from a subject of a student.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"STUDENT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"SUBJECT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"SYLLABUS_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 1 2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String MESSAGE_DELETESYLL_SUCCESS \u003d \"Removed selected syllabus from Student: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index subjectIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index syllabusIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public DeleteSyllCommand(Index studentIndex, Index subjectIndex, Index syllabusIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectIndex \u003d subjectIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.syllabusIndex \u003d syllabusIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d lastShownList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Set\u003cSubject\u003e removedSubjectContent \u003d removeSubjectContentFrom(studentTarget);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentSubjUpdated \u003d SubjectsUtil.createStudentWithNewSubjects(studentTarget, removedSubjectContent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.updateStudentInternalField(studentTarget, studentSubjUpdated);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.commitTutorHelper();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETESYLL_SUCCESS, studentSubjUpdated));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Removes syllabus topic from the specified student."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param studentTarget The student to remove from."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Set\u003cSubject\u003e} with the specified syllabus removed"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws CommandException if the index to remove from is invalid"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private Set\u003cSubject\u003e removeSubjectContentFrom(Student studentTarget) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d studentTarget.getSubjects().stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (hasExceededNumberOfSubjects(subjects)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (hasExceededNumberOfSyllabus(subjects.get(subjectIndex.getZeroBased()))) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject updatedSubject \u003d subjects.get(subjectIndex.getZeroBased()).remove(syllabusIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjects.set(subjectIndex.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private boolean hasExceededNumberOfSubjects(List\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectIndex.getOneBased() \u003e subjects.size();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private boolean hasExceededNumberOfSyllabus(Subject subject) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return syllabusIndex.getOneBased() \u003e subject.getSubjectContent().size();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                || (other instanceof DeleteSyllCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((DeleteSyllCommand) other).studentIndex))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                \u0026\u0026 subjectIndex.equals(((DeleteSyllCommand) other).subjectIndex)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                \u0026\u0026 syllabusIndex.equals(((DeleteSyllCommand) other).syllabusIndex); // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Stores the details of deletesyll command format."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static class DeleteSyllFormatChecker {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public static final int STUDENT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int SUBJECT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int SYLLABUS_INDEX \u003d 2;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int NUMBER_OF_ARGS \u003d 3;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 73,
      "ongyz": 35,
      "lywjoel": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EarningsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Payment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " * Displays earning of the month, year."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class EarningsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"earnings\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            + \": Shows earnings of the month\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"MONTH (must be an integer from 1 to 12, inclusive) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"YEAR (must be a 4-digit integer) \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 08 2018 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private long earnings \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public EarningsCommand(int month, int year) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            List\u003cPayment\u003e studentPaymentsList \u003d lastShownList.get(i).getPayments();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            for (int j \u003d 0; j \u003c studentPaymentsList.size(); j++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                Payment thisPayment \u003d studentPaymentsList.get(j);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                if (thisPayment.getMonth() \u003d\u003d this.month \u0026\u0026 thisPayment.getYear() \u003d\u003d this.year) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                    this.earnings +\u003d (thisPayment.getAmount());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return new CommandResult(\"Earnings: $\" + String.valueOf(earnings));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (!(other instanceof EarningsCommand)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        EarningsCommand e \u003d (EarningsCommand) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return month \u003d\u003d ((EarningsCommand) other).month"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                \u0026\u0026 year \u003d\u003d ((EarningsCommand) other).year;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 57,
      "lywjoel": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_AND_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Payment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Edits the details of an existing student in the TutorHelper."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"by the index number used in the displayed student list. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"[\" + PREFIX_SUBJECT + \"SUBJECT]... \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"[\" + PREFIX_DAY_AND_TIME + \"TUITION TIMING] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the TutorHelper.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param index of the student in the filtered student list to edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param editStudentDescriptor details to edit the student with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public EditCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(editStudentDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (!studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.commitTutorHelper();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * edited with {@code editStudentDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Phone updatedPhone \u003d editStudentDescriptor.getPhone().orElse(studentToEdit.getPhone());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Address updatedAddress \u003d editStudentDescriptor.getAddress().orElse(studentToEdit.getAddress());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Set\u003cSubject\u003e updatedSubject \u003d editStudentDescriptor.getSubjects().orElse(studentToEdit.getSubjects());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        TuitionTiming updatedTuitionTiming \u003d editStudentDescriptor.getTuitionTiming()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .orElse(studentToEdit.getTuitionTiming());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editStudentDescriptor.getTags().orElse(studentToEdit.getTags());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cPayment\u003e updatedPayments \u003d studentToEdit.getPayments();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new Student(updatedName, updatedPhone, updatedEmail,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                updatedAddress, updatedSubject, updatedTuitionTiming, updatedTags, updatedPayments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field subjectName will replace the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * corresponding field subjectName of the student."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        private Set\u003cSubject\u003e subjects;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        private TuitionTiming tuitionTiming;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        private List\u003cPayment\u003e payments;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public EditStudentDescriptor() {}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            setSubjects(toCopy.subjects);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            setTuitionTiming(toCopy.tuitionTiming);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            setPayments(toCopy.payments);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, subjects);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public void setSubjects(Set\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            this.subjects \u003d (subjects !\u003d null) ? new HashSet\u003c\u003e(subjects) : null;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public Optional\u003cSet\u003cSubject\u003e\u003e getSubjects() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return (subjects !\u003d null) ? Optional.of(Collections.unmodifiableSet(subjects)) : Optional.empty();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        public void setTuitionTiming(TuitionTiming tuitionTiming) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            this.tuitionTiming \u003d tuitionTiming;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        public Optional\u003cTuitionTiming\u003e getTuitionTiming() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            return Optional.ofNullable(tuitionTiming);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * Sets {@code payment} to this object\u0027s {@code payments}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * A defensive copy of {@code payments} is used internally."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public void setPayments(List\u003cPayment\u003e payments) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            this.payments \u003d (payments !\u003d null) ? new ArrayList\u003c\u003e(payments) : new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public Optional\u003cList\u003cPayment\u003e\u003e getPayments() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return (payments !\u003d null) ? Optional.of(Collections.unmodifiableList(payments)) : Optional.empty();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            if (!(other instanceof EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u0026\u0026 getSubjects().equals(e.getSubjects())"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    \u0026\u0026 getTuitionTiming().equals(e.getTuitionTiming())"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u0026\u0026 getPayments().equals(e.getPayments());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 34,
      "ongyz": 1,
      "andlimey": 17,
      "lywjoel": 52,
      "-": 179
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditSyllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongyz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SYLLABUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Edits a syllabus topic of a subject of a student."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongyz"
        },
        "content": "public class EditSyllCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editsyll\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \": Edits a syllabus topic of a subject of a student.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"STUDENT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"SUBJECT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"SYLLABUS_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + PREFIX_SYLLABUS + \"SYLLABUS\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 1 1 \" + PREFIX_SYLLABUS + \"Integration\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String MESSAGE_EDITSYLL_SUCCESS \u003d \"Edited syllabus to Student: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String MESSAGE_SUBJECT_NOT_FOUND \u003d \"Subject index not found in Student\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SYLLABUS \u003d \"This syllabus already exists in the TutorHelper.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private final Index subjectIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private final Index syllabusIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private final Syllabus syllabusEdit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public EditSyllCommand(Index studentIndex, Index subjectIndex, Index syllabusIndex, Syllabus syllabusEdit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        this.subjectIndex \u003d subjectIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        this.syllabusIndex \u003d syllabusIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        this.syllabusEdit \u003d syllabusEdit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d lastShownList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (subjects.size() \u003c subjectIndex.getOneBased()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_SUBJECT_NOT_FOUND, studentTarget));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Subject selectedSubject \u003d subjects.get(subjectIndex.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (selectedSubject.contains(syllabusEdit)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_SYLLABUS, studentTarget));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        subjects.set(subjectIndex.getZeroBased(), selectedSubject.edit(syllabusEdit, syllabusIndex));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Set\u003cSubject\u003e editedSubjectContent \u003d new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentSubjUpdated \u003d SubjectsUtil.createStudentWithNewSubjects(studentTarget, editedSubjectContent);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.updateStudentInternalField(studentTarget, studentSubjUpdated);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.commitTutorHelper();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDITSYLL_SUCCESS, studentSubjUpdated));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                || (other instanceof EditSyllCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((EditSyllCommand) other).studentIndex)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                \u0026\u0026 subjectIndex.equals(((EditSyllCommand) other).subjectIndex)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                \u0026\u0026 syllabusIndex.equals(((EditSyllCommand) other).syllabusIndex)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                \u0026\u0026 syllabusEdit.equals(((EditSyllCommand) other).syllabusEdit)); // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Stores the details of EditSyll command format."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static class EditSyllFormatChecker {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public static final int STUDENT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public static final int SUBJECT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public static final int SYLLABUS_INDEX \u003d 2;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public static final int NUMBER_OF_ARGS \u003d 3;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongyz": 98,
      "lywjoel": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting TutorHelper as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Finds and lists all students in TutorHelper whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW, model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 5,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andlimey"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTimingContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andlimey"
        },
        "content": " * Groups the students in TutorHelper based on their tuition timings and sorts the list accordingly."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andlimey"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class GroupCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"group\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Groups all students based on the specified DAY \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            + \"or TIME and displays them as a list.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            + \"Parameter: KEYWORD\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Examples:\\n\" + COMMAND_WORD + \" Monday\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            + COMMAND_WORD + \" 12:00pm\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Grouped all students\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private final TuitionTimingContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final boolean isDay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final boolean isTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public GroupCommand(TuitionTimingContainsKeywordsPredicate predicate, boolean isDayRegex, boolean isTimeRegex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.isDay \u003d isDayRegex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.isTime \u003d isTimeRegex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (this.isDay) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            assert !this.isTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            model.sortByTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            model.commitTutorHelper();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        } else if (this.isTime) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            model.sortByDay();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            model.commitTutorHelper();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW, model.getFilteredStudentList().size())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                || (other instanceof GroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                \u0026\u0026 predicate.equals(((GroupCommand) other).predicate)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                \u0026\u0026 isDay \u003d\u003d (((GroupCommand) other).isDay)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                \u0026\u0026 isTime \u003d\u003d (((GroupCommand) other).isTime)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 10,
      "andlimey": 48,
      "lywjoel": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Lists all students in the TutorHelper to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MarkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Toggles the marked state of a syllabus topic of a subject of a student."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class MarkCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mark\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \": Toggles the marked state of a syllabus topic of a subject of a student. \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"STUDENT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"SUBJECT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"SYLLABUS_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 1 2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String MESSAGE_MARK_SUCCESS \u003d \"Changed selected syllabus from Student: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index subjectIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Index syllabusIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public MarkCommand(Index studentIndex, Index subjectIndex, Index syllabusIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectIndex \u003d subjectIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.syllabusIndex \u003d syllabusIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d lastShownList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Set\u003cSubject\u003e updatedSubjectContent \u003d markSubjectContentFrom(studentTarget);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentSubjUpdated \u003d SubjectsUtil.createStudentWithNewSubjects(studentTarget, updatedSubjectContent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.updateStudentInternalField(studentTarget, studentSubjUpdated);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.commitTutorHelper();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_SUCCESS, studentSubjUpdated));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Returns a new {@code Set\u003cSubject\u003e} with the syllabus state changed from the student specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param studentTarget the student to change syllabus from"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Set\u003cSubject\u003e} with the specified syllabus state changed"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws CommandException if the index to remove from is invalid"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private Set\u003cSubject\u003e markSubjectContentFrom(Student studentTarget)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d studentTarget.getSubjects().stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (hasExceededNumberOfSubjects(subjects)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (hasExceededNumberOfSyllabus(subjects.get(subjectIndex.getZeroBased()))) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject updatedSubject \u003d subjects.get(subjectIndex.getZeroBased()).toggleState(syllabusIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjects.set(subjectIndex.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private boolean hasExceededNumberOfSubjects(List\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectIndex.getOneBased() \u003e subjects.size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private boolean hasExceededNumberOfSyllabus(Subject subject) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return syllabusIndex.getOneBased() \u003e subject.getSubjectContent().size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || (other instanceof MarkCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((MarkCommand) other).studentIndex))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 subjectIndex.equals(((MarkCommand) other).subjectIndex)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 syllabusIndex.equals(((MarkCommand) other).syllabusIndex); // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Stores the details of the mark command format."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static class MarkFormatChecker {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public static final int STUDENT_INDEX_LOCATION \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int SUBJECT_INDEX_LOCATION \u003d 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int SYLLABUS_INDEX_LOCATION \u003d 2;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public static final int MARK_NUMBER_OF_ARGS \u003d 3;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 78,
      "ongyz": 30,
      "lywjoel": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PayCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Payment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Adds a payment record of a student."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class PayCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"paid\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \": Adds a payment record of a student.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"AMOUNT (must be a positive integer between 0 to 10 000) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"MONTH (must be an integer from 1 to 12, inclusive) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \"YEAR (must be a 4-digit integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 200 08 2018 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String MESSAGE_PAYMENT_SUCCESS \u003d \"Payment for this student is added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String MESSAGE_EDITPAYMENT_SUCCESS \u003d \"Payment for this student has been edited: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private static final int MINVALUE \u003d -1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private static final int MAXPAYMENTSDISPLAYED \u003d 5;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private Payment newPayment;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public PayCommand(Payment payment) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.targetIndex \u003d payment.getIndex();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.newPayment \u003d payment;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        boolean editEntry;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size() || targetIndex.getZeroBased() \u003c\u003d MINVALUE) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cPayment\u003e pay \u003d studentTarget.getPayments();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        editEntry \u003d findPaymentToUpdate(pay, newPayment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (!editEntry) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            if (pay.size() \u003e MAXPAYMENTSDISPLAYED) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                pay.remove(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            pay \u003d updatePayment(studentTarget.getPayments(), newPayment);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            pay \u003d editPaymentField(pay, newPayment);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentToPay \u003d new Student(studentTarget.getName(), studentTarget.getPhone(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                studentTarget.getEmail(), studentTarget.getAddress(), studentTarget.getSubjects(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                studentTarget.getTuitionTiming(), studentTarget.getTags(), pay);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (editEntry) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            model.updateStudentInternalField(studentTarget, studentToPay);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            model.commitTutorHelper();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDITPAYMENT_SUCCESS, studentToPay));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            model.updateStudent(studentTarget, studentToPay);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            model.commitTutorHelper();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_PAYMENT_SUCCESS, studentToPay));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Update payment for this student and returns a new instance of this student."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @return the same student but updated with payment."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public List\u003cPayment\u003e updatePayment(List\u003cPayment\u003e oldPayments, Payment newPayment) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cPayment\u003e updatedPayment \u003d new ArrayList\u003c\u003e(oldPayments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        updatedPayment.add(newPayment);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return updatedPayment;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Checks if student to edit has the payment field."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param payments the list of payment to check for entry with same details."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param toFind the payment entry to edit."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @return true if payment field has already existed; false otherwise."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private boolean findPaymentToUpdate(List\u003cPayment\u003e payments, Payment toFind) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        for (int i \u003d 0; i \u003c payments.size(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            if (payments.get(i).getMonth() \u003d\u003d toFind.getMonth() \u0026\u0026 payments.get(i).getYear() \u003d\u003d toFind.getYear()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Updates payment field in list of payments."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param payments the list of payment to check for entry with same details."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param toEdit the payment entry to edit."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @return the edited list of payments."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private List\u003cPayment\u003e editPaymentField(List\u003cPayment\u003e payments, Payment toEdit) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        for (int i \u003d 0; i \u003c payments.size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            if (payments.get(i).getMonth() \u003d\u003d toEdit.getMonth() \u0026\u0026 payments.get(i).getYear() \u003d\u003d toEdit.getYear()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                payments.set(i, toEdit);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return payments;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (!(other instanceof PayCommand)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommand e \u003d (PayCommand) other;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                \u0026\u0026 newPayment.equals(e.newPayment);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 23,
      "SusterDrifter": 44,
      "ongyz": 69,
      "lywjoel": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Reverts the {@code model}\u0027s TutorHelper to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (!model.canRedoTutorHelper()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        model.redoTutorHelper();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "lywjoel": 3,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Selects a student identified using it\u0027s displayed index from the TutorHelper."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + \": Selects the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_SELECT_STUDENT_SUCCESS \u003d \"Selected Student: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cStudent\u003e filteredStudentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredStudentList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_STUDENT_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 8,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Reverts the {@code model}\u0027s TutorHelper to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (!model.canUndoTutorHelper()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        model.undoTutorHelper();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "lywjoel": 3,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_AND_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                            PREFIX_ADDRESS, PREFIX_SUBJECT, PREFIX_DAY_AND_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    PREFIX_ADDRESS, PREFIX_SUBJECT, PREFIX_DAY_AND_TIME)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            Set\u003cSubject\u003e subjects \u003d ParserUtil.parseSubjects(argMultimap.getValue(PREFIX_SUBJECT).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            TuitionTiming tuitionTiming \u003d ParserUtil.parseTuitionTiming("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                    argMultimap.getValue(PREFIX_DAY_AND_TIME).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e() ;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                tagList \u003d ParserUtil.parseTags(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            Student student \u003d new Student(name, phone, email, address, subjects, tuitionTiming, tagList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            return new AddCommand(student);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 4,
      "ongyz": 19,
      "andlimey": 3,
      "lywjoel": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddSubCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.AddSubCommand.AddSubFormatChecker.NUMBER_OF_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.AddSubCommand.AddSubFormatChecker.STUDENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.AddSubCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Parses user arguments and creates a new AddSubCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class AddSubCommandParser implements Parser\u003cAddSubCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddSubCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * and returns an AddSubCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public AddSubCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SUBJECT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            indexList \u003d ParserUtil.parseIndexes(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSubCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (indexList.size() !\u003d NUMBER_OF_ARGS) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSubCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentIndex \u003d getStudentIndex(indexList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SUBJECT).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSubCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Subject subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new AddSubCommand(studentIndex, subject);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static Index getStudentIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return indexList.get(STUDENT_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddSyllCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.AddSyllCommand.AddSyllFormatChecker.NUMBER_OF_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.AddSyllCommand.AddSyllFormatChecker.STUDENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.AddSyllCommand.AddSyllFormatChecker.SUBJECT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SYLLABUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.AddSyllCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": " * Parses input arguments and creates a new AddSyllCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongyz"
        },
        "content": "public class AddSyllCommandParser implements Parser\u003cAddSyllCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddSyllCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * and returns an AddSyllCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public AddSyllCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SYLLABUS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index subjectIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            indexList \u003d ParserUtil.parseIndexes(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSyllCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (indexList.size() !\u003d NUMBER_OF_ARGS) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        studentIndex \u003d getStudentIndex(indexList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjectIndex \u003d getSubjectIndex(indexList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SYLLABUS).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabuses \u003d ParserUtil.parseSyllabuses(argMultimap.getValue(PREFIX_SYLLABUS).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return new AddSyllCommand(studentIndex, subjectIndex, syllabuses);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private static Index getStudentIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return indexList.get(STUDENT_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSubjectIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SUBJECT_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 48,
      "ongyz": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * i.e. the same argument subjectName"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Associates the specified argument subjectName with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * If the map previously contained a mapping for the key, the new subjectName is"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument subjectName is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param argValue Argument subjectName to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns the last subjectName of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 8,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003esubjectName \u003cprefix\u003esubjectName ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * 1. An argument\u0027s subjectName can be an empty string e.g. the subjectName of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument subjectName will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the subjectName of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003esubjectName \u003cprefix\u003esubjectName ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003esubjectName \u003cprefix\u003esubjectName ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003esubjectName \u003cprefix\u003esubjectName ...}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns the trimmed subjectName of the argument in the arguments string specified"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * by {@code currentPrefixPosition}. The end position of the subjectName is determined"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 10,
      "ongyz": 1,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final Prefix PREFIX_DAY_AND_TIME \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final Prefix PREFIX_SYLLABUS \u003d new Prefix(\"sy/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 2,
      "andlimey": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CopySubCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CopySubCommand.CopySubFormatChecker.NUMBER_OF_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CopySubCommand.CopySubFormatChecker.SOURCE_STUDENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CopySubCommand.CopySubFormatChecker.SUBJECT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CopySubCommand.CopySubFormatChecker.TARGET_STUDENT_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.CopySubCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Parses input arguments and creates a new CopySubCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class CopySubCommandParser implements Parser\u003cCopySubCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddSyllCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * and returns an AddSyllCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public CopySubCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index sourceStudentIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index subjectIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index targetStudentIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            indexList \u003d ParserUtil.parseIndexes(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopySubCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (indexList.size() !\u003d NUMBER_OF_ARGS) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopySubCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        sourceStudentIndex \u003d getSourceStudentIndex(indexList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjectIndex \u003d getSubjectIndex(indexList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        targetStudentIndex \u003d getTargetStudentIndex(indexList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new CopySubCommand(sourceStudentIndex, subjectIndex, targetStudentIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static Index getSourceStudentIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return indexList.get(SOURCE_STUDENT_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSubjectIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SUBJECT_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static Index getTargetStudentIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return indexList.get(TARGET_STUDENT_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 50,
      "lywjoel": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteSubCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.DeleteSubCommand.DeleteSubFormatChecker.NUMBER_OF_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.DeleteSubCommand.DeleteSubFormatChecker.STUDENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.DeleteSubCommand.DeleteSubFormatChecker.SUBJECT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.DeleteSubCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Parses user arguments and creates a new DeleteSubCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class DeleteSubCommandParser implements Parser\u003cDeleteSubCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteSubCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * and returns an DeleteSubCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public DeleteSubCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index subjectIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            indexList \u003d ParserUtil.parseIndexes(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSubCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (indexList.size() !\u003d NUMBER_OF_ARGS) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSubCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentIndex \u003d getStudentIndex(indexList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        subjectIndex \u003d getSubjectIndex(indexList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new DeleteSubCommand(studentIndex, subjectIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static Index getStudentIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return indexList.get(STUDENT_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static Index getSubjectIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return indexList.get(SUBJECT_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteSyllCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.DeleteSyllCommand.DeleteSyllFormatChecker.NUMBER_OF_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.DeleteSyllCommand.DeleteSyllFormatChecker.STUDENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.DeleteSyllCommand.DeleteSyllFormatChecker.SUBJECT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.DeleteSyllCommand.DeleteSyllFormatChecker.SYLLABUS_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.DeleteSyllCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Parses input arguments and creates a new DeleteSyllCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class DeleteSyllCommandParser implements Parser\u003cDeleteSyllCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddSyllCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * and returns an AddSyllCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public DeleteSyllCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index subjectIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index syllabusIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            indexList \u003d ParserUtil.parseIndexes(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSyllCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (indexList.size() !\u003d NUMBER_OF_ARGS) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentIndex \u003d getStudentIndex(indexList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjectIndex \u003d getSubjectIndex(indexList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        syllabusIndex \u003d getSyllabusIndex(indexList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new DeleteSyllCommand(studentIndex, subjectIndex, syllabusIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static Index getStudentIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return indexList.get(STUDENT_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSubjectIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SUBJECT_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSyllabusIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 55,
      "lywjoel": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EarningsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.EarningsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Parses input arguments and creates a new EarningsCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class EarningsCommandParser implements Parser\u003cEarningsCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public EarningsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String trimmedEarnings \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String[] separatedEarnings \u003d trimmedEarnings.split(\"\\\\s\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (separatedEarnings.length !\u003d 2) { //invalid number of fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EarningsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String inputMonth \u003d separatedEarnings[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String inputYear \u003d separatedEarnings[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        //Put the arguments into ParserUtil to check for validity"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.month \u003d ParserUtil.parseMonth(inputMonth);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.year \u003d ParserUtil.parseYear(inputYear);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return new EarningsCommand(month, year);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 30,
      "lywjoel": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_AND_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_SUBJECT, PREFIX_DAY_AND_TIME, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            editStudentDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            editStudentDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            editStudentDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DAY_AND_TIME).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            editStudentDescriptor.setTuitionTiming("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    ParserUtil.parseTuitionTiming(argMultimap.getValue(PREFIX_DAY_AND_TIME).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SUBJECT).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            editStudentDescriptor.setSubjects(ParserUtil.parseSubjects(argMultimap.getValue(PREFIX_SUBJECT).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            editStudentDescriptor.setTags(ParserUtil.parseTags(argMultimap.getValue(PREFIX_TAG).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (!editStudentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return new EditCommand(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 5,
      "ongyz": 14,
      "andlimey": 3,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditSyllCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.EditSyllCommand.EditSyllFormatChecker.NUMBER_OF_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.EditSyllCommand.EditSyllFormatChecker.STUDENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.EditSyllCommand.EditSyllFormatChecker.SUBJECT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.EditSyllCommand.EditSyllFormatChecker.SYLLABUS_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SYLLABUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.EditSyllCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Parses input arguments and creates a new AddSyllCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class EditSyllCommandParser implements Parser\u003cEditSyllCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditSyllCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * and returns an EditSyllCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public EditSyllCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SYLLABUS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index subjectIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index syllabusIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            indexList \u003d ParserUtil.parseIndexes(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditSyllCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (indexList.size() !\u003d NUMBER_OF_ARGS) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentIndex \u003d getStudentIndex(indexList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjectIndex \u003d getSubjectIndex(indexList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        syllabusIndex \u003d getSyllabusIndex(indexList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SYLLABUS).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabus \u003d ParserUtil.parseSyllabus(argMultimap.getValue(PREFIX_SYLLABUS).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new EditSyllCommand(studentIndex, subjectIndex, syllabusIndex, syllabus);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static Index getStudentIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return indexList.get(STUDENT_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSubjectIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SUBJECT_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSyllabusIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 65,
      "lywjoel": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andlimey"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.logic.commands.GroupCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTimingContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andlimey"
        },
        "content": " * Parses input arguments and creates a new GroupCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andlimey"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class GroupCommandParser implements Parser\u003cGroupCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GroupCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * and returns an GroupCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public GroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (trimmedArgs.matches(TuitionTiming.DAY_REGEX)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            return new GroupCommand("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    new TuitionTimingContainsKeywordsPredicate(trimmedArgs), true, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        } else if (trimmedArgs.matches(TuitionTiming.TIME_REGEX)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            return new GroupCommand("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    new TuitionTimingContainsKeywordsPredicate(trimmedArgs), false, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 32,
      "lywjoel": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MarkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.MarkCommand.MarkFormatChecker.MARK_NUMBER_OF_ARGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.MarkCommand.MarkFormatChecker.STUDENT_INDEX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.MarkCommand.MarkFormatChecker.SUBJECT_INDEX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.MarkCommand.MarkFormatChecker.SYLLABUS_INDEX_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.MarkCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Parses input arguments and creates a new MarkCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class MarkCommandParser implements Parser\u003cMarkCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddSyllCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * and returns an AddSyllCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public MarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index subjectIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index syllabusIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            indexList \u003d ParserUtil.parseIndexes(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (indexList.size() !\u003d MARK_NUMBER_OF_ARGS) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentIndex \u003d getStudentIndex(indexList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjectIndex \u003d getSubjectIndex(indexList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        syllabusIndex \u003d getSyllabusIndex(indexList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new MarkCommand(studentIndex, subjectIndex, syllabusIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static Index getStudentIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return indexList.get(STUDENT_INDEX_LOCATION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSubjectIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SUBJECT_INDEX_LOCATION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static Index getSyllabusIndex(List\u003cIndex\u003e indexList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return indexList.get(SYLLABUS_INDEX_LOCATION);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 58,
      "lywjoel": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Payment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.SubjectType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Parses a {@code String subject} into a {@code Subject}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @throws ParseException if the given {@code subject} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static Subject parseSubject(String subject) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String trimmedSubject;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        boolean result;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            trimmedSubject \u003d subject.trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            result \u003d SubjectType.isValidSubjectName(trimmedSubject);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        } catch (IllegalArgumentException err) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new ParseException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (!result) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            throw new ParseException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Subject.makeSubject(trimmedSubject);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e subjects} into a {@code Set\u003cSubject\u003e}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static Set\u003cSubject\u003e parseSubjects(String subjects) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(subjects);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        final Set\u003cSubject\u003e subjectSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String trimmedSubjects \u003d subjects.trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String[] separatedSubjects \u003d trimmedSubjects.split(\",\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        for (String subjectName : separatedSubjects) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            subjectSet.add(parseSubject(subjectName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectSet;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Parses a {@code String tuitionTiming} into a {@code TuitionTiming}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @throws ParseException if the given {@code tuitionTiming} is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static TuitionTiming parseTuitionTiming(String tuitionTiming) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(tuitionTiming);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String trimmedTuitionTiming \u003d tuitionTiming.trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (!TuitionTiming.isValidTiming(trimmedTuitionTiming)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException(TuitionTiming.MESSAGE_TUITION_TIMING_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return new TuitionTiming(trimmedTuitionTiming);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Parses a {@code String amount} into an integer."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @throws ParseException if the given {@code integer} is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static int parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        boolean doesNotContainAllDigits \u003d false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        for (int i \u003d 0; i \u003c trimmedAmount.length(); i++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            if (!Character.isDigit(trimmedAmount.charAt(i))) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                doesNotContainAllDigits \u003d true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (doesNotContainAllDigits \u003d\u003d true) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new ParseException(Payment.MESSAGE_PAYMENT_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if ((!StringUtil.isNonZeroUnsignedInteger(trimmedAmount))"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                || !Payment.isValidAmount(Integer.parseInt(trimmedAmount))) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            throw new ParseException(Payment.MESSAGE_PAYMENT_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return Integer.parseInt(trimmedAmount);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Parses a {@code String month} into an integer."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @throws ParseException if the given {@code integer} is invalid."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static int parseMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String trimmedMonth \u003d month.trim();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        boolean doesNotContainAllDigits \u003d false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (int i \u003d 0; i \u003c trimmedMonth.length(); i++) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (!Character.isDigit(trimmedMonth.charAt(i))) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                doesNotContainAllDigits \u003d true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (doesNotContainAllDigits \u003d\u003d true) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException(Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if ((!StringUtil.isNonZeroUnsignedInteger(trimmedMonth)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                || !Payment.isValidMonth(Integer.parseInt(trimmedMonth)))) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            throw new ParseException(Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return Integer.parseInt(trimmedMonth);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Parses a {@code String year} into an integer."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @throws ParseException if the given {@code integer} is invalid."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static int parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String trimmedYear \u003d year.trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        boolean doesNotContainAllDigits \u003d false;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (int i \u003d 0; i \u003c trimmedYear.length(); i++) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (!Character.isDigit(trimmedYear.charAt(i))) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                doesNotContainAllDigits \u003d true;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (doesNotContainAllDigits \u003d\u003d true) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new ParseException(Payment.MESSAGE_PAYMENT_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if ((!StringUtil.isNonZeroUnsignedInteger(trimmedYear)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                || !Payment.isValidYear(Integer.parseInt(trimmedYear)))) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            throw new ParseException(Payment.MESSAGE_PAYMENT_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return Integer.parseInt(trimmedYear);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(String tags) throws ParseException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (tags.length() \u003d\u003d 0) { // We allow no tag input"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            return tagSet;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String trimmedTags \u003d tags.trim();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String[] separatedTags \u003d trimmedTags.split(\",\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        for (String tag : separatedTags) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            tagSet.add(ParserUtil.parseTag(tag));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses {@code oneBasedIndexes} into a list of {@code Index} and returns it."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static List\u003cIndex\u003e parseIndexes(String oneBasedIndexes) throws ParseException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String trimmedIndexes \u003d oneBasedIndexes.trim();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String[] separatedIndexes \u003d trimmedIndexes.split(\"\\\\s\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cIndex\u003e listIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (String indexCandidate : separatedIndexes) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            listIndexes.add(ParserUtil.parseIndex(indexCandidate));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return listIndexes;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses a {@code String syllabus} into a {@code Syllabus}."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the given {@code syllabus} input is invalid."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static Syllabus parseSyllabus(String syllabus) throws ParseException {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(syllabus);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String trimmedSyllabus \u003d syllabus.trim();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (!Syllabus.isValidSyllabus(trimmedSyllabus)) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new ParseException(Syllabus.MESSAGE_SYLLABUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Syllabus(trimmedSyllabus, false);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e syllabuses} into a {@code List\u003cSyllabus\u003e}."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static List\u003cSyllabus\u003e parseSyllabuses(String syllabuses) throws ParseException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        requireNonNull(syllabuses);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        final List\u003cSyllabus\u003e syllabusList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String trimmedSyllabuses \u003d syllabuses.trim();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String[] separatedSyllabuses \u003d trimmedSyllabuses.split(\",\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        for (String syllabus: separatedSyllabuses) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            syllabusList.add(ParserUtil.parseSyllabus(syllabus));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return syllabusList;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 18,
      "SusterDrifter": 73,
      "ongyz": 48,
      "andlimey": 67,
      "lywjoel": 1,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PayCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Payment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Parses input arguments and creates a new PayCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class PayCommandParser implements Parser\u003cPayCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Index studentIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public PayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String trimmedPayment \u003d args.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String[] separatedPayment \u003d trimmedPayment.split(\"\\\\s\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (separatedPayment.length !\u003d 4) { //invalid number of arguments"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String inputStudentIndex \u003d separatedPayment[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String inputAmount \u003d separatedPayment[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String inputMonth \u003d separatedPayment[2];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String inputYear \u003d separatedPayment[3];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        //Put the arguments into ParserUtil to check for validity"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            this.studentIndex \u003d ParserUtil.parseIndex(inputStudentIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                    String.format(MESSAGE_INVALID_INDEX, PayCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            this.amount \u003d ParserUtil.parseAmount(inputAmount);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                    String.format(Payment.MESSAGE_PAYMENT_AMOUNT_CONSTRAINTS, PayCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            this.month \u003d ParserUtil.parseMonth(inputMonth);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                    String.format(Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS, PayCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            this.year \u003d ParserUtil.parseYear(inputYear);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                    String.format(Payment.MESSAGE_PAYMENT_YEAR_CONSTRAINTS, PayCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        //all input are valid and can be added"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Payment payment \u003d new Payment(studentIndex, amount, month, year);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new PayCommand(payment);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 44,
      "SusterDrifter": 23,
      "lywjoel": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TutorHelperParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.AddSubCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.AddSyllCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.CopySubCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.DeleteSubCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.DeleteSyllCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.EarningsCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.EditSyllCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.logic.commands.GroupCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.MarkCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class TutorHelperParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        case PayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new PayCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        case EarningsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            return new EarningsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        case AddSyllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new AddSyllCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        case DeleteSyllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new DeleteSyllCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        case MarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new MarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        case CopySubCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new CopySubCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        case GroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            return new GroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        case EditSyllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new EditSyllCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        case AddSubCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new AddSubCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        case DeleteSubCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new DeleteSubCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 4,
      "SusterDrifter": 32,
      "andlimey": 4,
      "lywjoel": 2,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    void resetData(ReadOnlyTutorHelper newData);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /** Returns the TutorHelper */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    ReadOnlyTutorHelper getTutorHelper();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the TutorHelper."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Deletes the given student."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * The student must exist in the TutorHelper."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * {@code student} must not already exist in the TutorHelper."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * {@code target} must exist in the TutorHelper."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * another existing student in the TutorHelper."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    void updateStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * {@code target} must exist in the TutorHelper."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * another existing student in the TutorHelper. This is used to update an"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * internal field of student."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    void updateStudentInternalField(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Sorts the list by day."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    void sortByDay();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Sorts the list by time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    void sortByTime();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Returns true if the model has previous TutorHelper states to restore."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    boolean canUndoTutorHelper();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Returns true if the model has undone TutorHelper states to restore."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    boolean canRedoTutorHelper();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Restores the model\u0027s TutorHelper to its previous state."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    void undoTutorHelper();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Restores the model\u0027s TutorHelper to its previously undone state."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    void redoTutorHelper();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Saves the current TutorHelper state for undo/redo."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    void commitTutorHelper();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 10,
      "ongyz": 41,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.events.model.TutorHelperChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.events.ui.StudentPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongyz"
        },
        "content": " * Represents the in-memory model of the TutorHelper data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private final VersionedTutorHelper versionedTutorHelper;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private final FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Initializes a ModelManager with the given TutorHelper and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public ModelManager(ReadOnlyTutorHelper tutorHelper, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        requireAllNonNull(tutorHelper, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        logger.fine(\"Initializing with tutor helper: \" + tutorHelper + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        versionedTutorHelper \u003d new VersionedTutorHelper(tutorHelper);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(versionedTutorHelper.getStudentList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        this(new TutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void resetData(ReadOnlyTutorHelper newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        versionedTutorHelper.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        indicateTutorHelperChanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public ReadOnlyTutorHelper getTutorHelper() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return versionedTutorHelper;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private void indicateTutorHelperChanged() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        raise(new TutorHelperChangedEvent(versionedTutorHelper));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private void raiseSelectionChangeEvent(Student student) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        raise(new StudentPanelSelectionChangedEvent(student));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return versionedTutorHelper.hasStudent(student);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        versionedTutorHelper.removeStudent(target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        indicateTutorHelperChanged();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        versionedTutorHelper.addStudent(student);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        indicateTutorHelperChanged();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void updateStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        versionedTutorHelper.updateStudent(target, editedStudent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        indicateTutorHelperChanged();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void updateStudentInternalField(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        versionedTutorHelper.updateStudent(target, editedStudent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        indicateTutorHelperChanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        raiseSelectionChangeEvent(editedStudent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void sortByDay() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        versionedTutorHelper.sortByDay();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        indicateTutorHelperChanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void sortByTime() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        versionedTutorHelper.sortByTime();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        indicateTutorHelperChanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * {@code versionedTutorHelper}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredStudents);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Updates the filtered students with 2 predicates."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param predicate1 The first predicate."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param predicate2 The second predicate."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate1, Predicate\u003cStudent\u003e predicate2) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        requireNonNull(predicate1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        requireNonNull(predicate2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        filteredStudents.setPredicate(predicate1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        filteredStudents.setPredicate(predicate2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public boolean canUndoTutorHelper() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return versionedTutorHelper.canUndo();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public boolean canRedoTutorHelper() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return versionedTutorHelper.canRedo();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void undoTutorHelper() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        versionedTutorHelper.undo();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        indicateTutorHelperChanged();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void redoTutorHelper() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        versionedTutorHelper.redo();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        indicateTutorHelperChanged();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void commitTutorHelper() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        versionedTutorHelper.commit();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return versionedTutorHelper.equals(other.versionedTutorHelper)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "ongyz": 76,
      "andlimey": 4,
      "lywjoel": 4,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTutorHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " * Unmodifiable view of a tutor helper"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public interface ReadOnlyTutorHelper {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "lywjoel": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TutorHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class TutorHelper implements ReadOnlyTutorHelper {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public TutorHelper() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Creates an TutorHelper using the Students in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public TutorHelper(ReadOnlyTutorHelper toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.students.setStudents(students);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Resets the existing data of this {@code TutorHelper} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void resetData(ReadOnlyTutorHelper newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    //// student-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the TutorHelper."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Adds a student to the TutorHelper."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * The student must not already exist in the TutorHelper."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void addStudent(Student p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        students.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code target} must exist in the TutorHelper."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * another existing student in the TutorHelper."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void updateStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Removes {@code key} from this {@code TutorHelper}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code key} must exist in the TutorHelper."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Sorts the list based on day."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void sortByDay() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ObservableList\u003cStudent\u003e studentList \u003d students.asModifiableObservableList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentList.sort(((p1, p2) -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            int p1Day \u003d p1.getTuitionTiming().day.getValue();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            int p2Day \u003d p2.getTuitionTiming().day.getValue();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            if (p1Day - p2Day \u003c 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            } else if (p2Day - p1Day \u003c 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Sorts the list based on time."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void sortByTime() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ObservableList\u003cStudent\u003e studentList \u003d students.asModifiableObservableList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentList.sort((p1, p2) -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            String time1 \u003d TuitionTiming.convertTwelveHourToTwentyFourHour(p1.getTuitionTiming().time);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            String time2 \u003d TuitionTiming.convertTwelveHourToTwentyFourHour(p2.getTuitionTiming().time);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            assert time1 !\u003d null : \"time1 should not be null\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            assert time2 !\u003d null : \"time2 should not be null\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            if (time1.compareTo(time2) \u003c 1) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            } else if (time2.compareTo(time1) \u003c 1) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        });"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return students.asUnmodifiableObservableList().size() + \" students\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                || (other instanceof TutorHelper // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 students.equals(((TutorHelper) other).students));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return students.hashCode();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 7,
      "andlimey": 37,
      "lywjoel": 39,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private Path tutorHelperFilePath \u003d Paths.get(\"data\" , \"tutorhelper.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public Path getTutorHelperFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return tutorHelperFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void setTutorHelperFilePath(Path tutorHelperFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.tutorHelperFilePath \u003d tutorHelperFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                \u0026\u0026 Objects.equals(tutorHelperFilePath, o.tutorHelperFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return Objects.hash(guiSettings, tutorHelperFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + tutorHelperFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 8,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTutorHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " * {@code TutorHelper} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class VersionedTutorHelper extends TutorHelper {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private final List\u003cReadOnlyTutorHelper\u003e tutorHelperStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public VersionedTutorHelper(ReadOnlyTutorHelper initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        tutorHelperStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        tutorHelperStateList.add(new TutorHelper(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Saves a copy of the current {@code TutorHelper} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        tutorHelperStateList.add(new TutorHelper(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        tutorHelperStateList.subList(currentStatePointer + 1, tutorHelperStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Restores the TutorHelper to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        resetData(tutorHelperStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Restores the TutorHelper to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        resetData(tutorHelperStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns true if {@code undo()} has TutorHelper states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns true if {@code redo()} has TutorHelper states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return currentStatePointer \u003c tutorHelperStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (!(other instanceof VersionedTutorHelper)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper otherVersionedTutorHelper \u003d (VersionedTutorHelper) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return super.equals(otherVersionedTutorHelper)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                \u0026\u0026 tutorHelperStateList.equals(otherVersionedTutorHelper.tutorHelperStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedTutorHelper.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            super(\"Current state pointer at start of TutorHelperState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            super(\"Current state pointer at end of TutorHelperState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 19,
      "lywjoel": 4,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Represents a Student\u0027s address in the TutorHelper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Represents a Student\u0027s email in the TutorHelper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Represents a Student\u0027s name in the TutorHelper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            \"Names should only contain alphabetical characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 2,
      "lywjoel": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Payment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Represents a payment in the TutorHelper."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * amount is valid as declared in {@link #isValidAmount(int)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * month is valid as declared in {@link #isValidMonth(int)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * year is valid as declared in {@link #isValidYear(int)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class Payment {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String MESSAGE_PAYMENT_AMOUNT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            \"Amount should only contain positive integers between 0 to 10 000.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String MESSAGE_PAYMENT_MONTH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            \"Month should only contain integers between 1 to 12, inclusive.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String MESSAGE_PAYMENT_YEAR_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            \"Year should only contain 4 digits integers.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"(.)*(\\\\d)(.)*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final int MAXPAYMENTAMOUNT \u003d 10000;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private int amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private final int month;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Constructs a {@code Payment}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @param index A valid index name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param month A valid month subjectName."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param year A valid year subjectName."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public Payment(Index index, int amount, int month, int year) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.studentIndex \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Returns true if a given int is a valid number."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static boolean isValidAmount(int test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (test \u003e MAXPAYMENTAMOUNT) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return String.valueOf(test).matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Returns true if a given int is a valid month."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static boolean isValidMonth(int test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //Check if month is within the correct range of jan - dec"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (String.valueOf(test).matches(TAG_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            int testMonth \u003d test;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            if (testMonth \u003e\u003d 1 \u0026\u0026 testMonth \u003c\u003d 12) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Returns true if a given int is a valid year, 4 digits."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static boolean isValidYear(int test) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        int digits \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        int copyTest \u003d test;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        while (copyTest \u003e 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            copyTest \u003d copyTest / 10;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            digits +\u003d 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (digits !\u003d 4) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return String.valueOf(test).matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Returns student index"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this.studentIndex;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Return month of payment"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this.month;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Returns year of payment"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this.year;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Return amount of payment"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public int getAmount() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return \" Month: \" + month + \" Year: \" + year + \" Amount: \" + amount;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || (other instanceof Payment"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                \u0026\u0026 this.amount \u003d\u003d (((Payment) other).amount)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                \u0026\u0026 this.month \u003d\u003d (((Payment) other).month)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                \u0026\u0026 this.year \u003d\u003d (((Payment) other).year));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return Objects.hash(studentIndex, amount, month, year);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 8,
      "SusterDrifter": 16,
      "ongyz": 15,
      "andlimey": 99,
      "lywjoel": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Represents a Student\u0027s phone number in the TutorHelper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should only contain 8 digits\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{8}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 2,
      "lywjoel": 2,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Student.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Student in the TutorHelper."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Set\u003cSubject\u003e subjects \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private final TuitionTiming tuitionTiming;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final List\u003cPayment\u003e payments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Alternate constructor for student with payment being optional."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Student(Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                   Set\u003cSubject\u003e subjects, TuitionTiming tuitionTiming, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this(name, phone, email, address, subjects, tuitionTiming, tags, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Student(Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                   Set\u003cSubject\u003e subjects, TuitionTiming tuitionTiming, Set\u003cTag\u003e tags, List\u003cPayment\u003e paymentList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, paymentList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjects.addAll(subjects);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.tuitionTiming \u003d tuitionTiming;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.payments.addAll(paymentList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public TuitionTiming getTuitionTiming() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return tuitionTiming;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public List\u003cPayment\u003e getPayments() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return payments;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Set\u003cSubject\u003e getSubjects() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Collections.unmodifiableSet(subjects);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both students of the same name have similar identity field that is the same."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Two student are the same"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * if they have the same name field, phone number, email as well as address field."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherStudent \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean nameSame \u003d otherStudent.getName().equals(getName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean phoneSame \u003d otherStudent.getPhone().equals(getPhone());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean emailSame \u003d otherStudent.getEmail().equals(getEmail());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean addressSame \u003d otherStudent.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        boolean checkSameFields \u003d nameSame \u0026\u0026 (phoneSame || emailSame || addressSame);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return checkSameFields;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * This function returns true if there is one true boolean"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Otherwise, returns false."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean checkDifferOneFunc(boolean... vars) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (boolean var: vars) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            count +\u003d ((!var) ? 1 : 0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherStudent.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherStudent.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherStudent.getSubjects().equals(getSubjects())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherStudent.getTuitionTiming().equals(getTuitionTiming())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherStudent.getTags().equals(getTags())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherStudent.getPayments().equals(getPayments());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Objects.hash(name, phone, email, address, subjects, tuitionTiming, tags, payments);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .append(getAddress());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 7,
      "SusterDrifter": 49,
      "andlimey": 5,
      "lywjoel": 1,
      "-": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/UniqueStudentList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSameStudent(Student)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * As such, adding and updating of students uses Student#isSameStudent(Student) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * so as to ensure that the student being added or updated is unique in terms of identity in the UniqueStudentList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * However, the removal of a student uses Student#equals(Object) so as to ensure that the student with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns the backing list as a modifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public ObservableList\u003cStudent\u003e asModifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/DuplicateStudentException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Signals that the operation will result in duplicate Students."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * (Students are considered duplicates if they have the same identity)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        super(\"Operation would result in duplicate students\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/StudentNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/subject/Subject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.subject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.model.subject.SubjectType.convertStringToSubjectName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.model.subject.SubjectType.isValidSubjectName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Represents a Subject in the TutorHelper."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Guarantees: immutable; name is valid as declared in SubjectType.isValidSubjectName(String)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class Subject {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String MESSAGE_SUBJECT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \"Subject name should match one of the following: \" + SubjectType.listRepresentation();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final SubjectType subjectType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final List\u003cSyllabus\u003e subjectContent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final float completionRate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Constructor to guarantee immutability."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param subjectType the subject type"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param subjectContent the content of the subject"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param completionRate the completion rate of subject"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject(SubjectType subjectType, List\u003cSyllabus\u003e subjectContent, float completionRate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(subjectType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectType \u003d subjectType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectContent.addAll(subjectContent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.completionRate \u003d completionRate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Constructs a new {@code Subject} from {@code String subjectName}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param subjectName Subjects that the student is taking."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static Subject makeSubject (String subjectName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(subjectName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        checkArgument(isValidSubjectName(subjectName), MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject subject \u003d new Subject(convertStringToSubjectName(subjectName), new ArrayList\u003c\u003e(), 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns subjectType as {@code SubjectType}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public SubjectType getSubjectType() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns subjectType in string in {@code String}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public String getSubjectName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectType.stringRepresentation;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public List\u003cSyllabus\u003e getSubjectContent() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectContent;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public float getCompletionRate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return completionRate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getSubjectName() + \": \\n\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(contentToString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string containing information regarding the syllabus topics of the subject."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The string representation of the syllabus topics."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public String contentToString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index numbering;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (int i \u003d 0; i \u003c getSubjectContent().size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            numbering \u003d Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(numbering.getOneBased() + \". \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                    .append(getSubjectContent().get(i).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns true if both subjects have the same {@code SubjectType} and content"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                || (other instanceof Subject // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 subjectType.equals(((Subject) other).subjectType));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns true if both subjects have the same {@code SubjectType}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Defines a weaker notion of equal for class {@code Subject}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean hasTypeOf(SubjectType type) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return getSubjectType().equals(type);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectType.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Add a {@code Syllabus} to the current subject and returns"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * a new {@code Subject} containing the newly added syllabus."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param syllabus the {@code Syllabus} to be added"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Subject} containing the newly added syllabus"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject add(Syllabus syllabus) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e newSubjectContent \u003d new ArrayList\u003c\u003e(getSubjectContent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        newSubjectContent.add(syllabus);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Subject(getSubjectType(), newSubjectContent, getCompletionRate()).updateCompletionRate();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Removes a {@code Syllabus} from the current subject and returns"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * a new {@code Subject} with the syllabus at given index removed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param index the index of syllabus to be removed"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Subject} with the syllabus at given index removed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws CommandException if {@code index} is out of bound of the subjectContent."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject remove(Index index) throws CommandException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (index.getOneBased() \u003e getSubjectContent().size()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e newSubjectContent \u003d new ArrayList\u003c\u003e(getSubjectContent());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        newSubjectContent.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Subject(getSubjectType(), newSubjectContent, getCompletionRate()).updateCompletionRate();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Append a {@code List\u003cSyllabus\u003e} to the current subject and returns"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * a new {@code Subject} containing the newly added syllabus list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param syllabusList the {@code List\u003cSyllabus\u003e} to be added"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Subject} containing the newly added syllabus list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject append(List\u003cSyllabus\u003e syllabusList) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e newSubjectContent \u003d new ArrayList\u003c\u003e(getSubjectContent());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (Syllabus newSyllabus: syllabusList) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (!newSubjectContent.contains(newSyllabus)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                newSubjectContent.add(newSyllabus);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Subject(getSubjectType(), newSubjectContent, getCompletionRate()).updateCompletionRate();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Finda {@code List\u003cSyllabus\u003e} to the current subject and returns"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * a new {@code Subject} containing the newly added syllabus list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param syllabus the {@code List\u003cSyllabus\u003e} to be added."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param index the index to replace old syllabus."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Subject} containing the newly added syllabus list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject edit(Syllabus syllabus, Index index) throws CommandException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (index.getOneBased() \u003e getSubjectContent().size()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e newSubjectContent \u003d new ArrayList\u003c\u003e(getSubjectContent());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        newSubjectContent.set(index.getZeroBased(), syllabus);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Subject(getSubjectType(), newSubjectContent, getCompletionRate()).updateCompletionRate();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean contains(Syllabus syllabus) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return getSubjectContent().contains(syllabus);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Return a new {@code Subject} with the state of the syllabus"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * identified by the {@code Index index} flipped."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param index the index of syllabus"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return new {@code Subject} with the changed syllabus"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @throws CommandException if index is out of bound of the subjectContent list"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject toggleState(Index index) throws CommandException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (index.getOneBased() \u003e getSubjectContent().size()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e newSubjectContent \u003d new ArrayList\u003c\u003e(getSubjectContent());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus oldSyllabus \u003d newSubjectContent.get(index.getZeroBased());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus newSyllabus \u003d new Syllabus(oldSyllabus.syllabus, !oldSyllabus.state);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        newSubjectContent.set(index.getZeroBased(), newSyllabus);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Subject(getSubjectType(), newSubjectContent, getCompletionRate()).updateCompletionRate();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Recalculate the completion rate of the subject."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Subject} with updated completion rate."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject updateCompletionRate() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        int subjectContentLength \u003d getSubjectContent().size();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        int numOfSyllabusCompleted \u003d 0;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (Syllabus syllabus: getSubjectContent()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (syllabus.state) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                numOfSyllabusCompleted++;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        float completionRate \u003d (float) numOfSyllabusCompleted / subjectContentLength;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Subject(getSubjectType(), getSubjectContent(), completionRate);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 189,
      "andlimey": 24,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/subject/SubjectType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.subject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Represents the subject name of Subjects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public enum SubjectType {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    Mathematics(\"Mathematics\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    Biology(\"Biology\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    Chemistry(\"Chemistry\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    Physics(\"Physics\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    Economics(\"Economics\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    Geography(\"Geography\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    History(\"History\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    English(\"English\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Art(\"Art\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Music(\"Music\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Computing(\"Computing\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Chinese(\"Chinese\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Malay(\"Malay\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Tamil(\"Tamil\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    French(\"French\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    German(\"German\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Japanese(\"Japanese\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    Literature(\"Literature\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public final String stringRepresentation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    SubjectType(String stringRepresentation) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.stringRepresentation \u003d stringRepresentation;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static Stream\u003cSubjectType\u003e stream() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Stream.of(SubjectType.values());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns the string representation of the whole subject types."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static String listRepresentation() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Arrays.stream(values()).forEach(subjectEnum -\u003e builder.append(subjectEnum.stringRepresentation + \" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Converts {@code subjectName} to its equivalent {@code SubjectType}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param subjectName the string representation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return the equivalent {@code SubjectType}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static SubjectType convertStringToSubjectName(String subjectName) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(subjectName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        SubjectType result \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (SubjectType subjectEnum : values()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (StringUtil.isSubstringMatchFromIndexZero(subjectEnum.toString(), subjectName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                result \u003d subjectEnum;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns true if a given string is a valid subject."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static boolean isValidSubjectName(String test) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return SubjectType.stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .anyMatch(subjectEnum -\u003e StringUtil.isSubstringMatchFromIndexZero(subjectEnum.toString(), test));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return stringRepresentation;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 70,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/subject/Syllabus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.subject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongyz"
        },
        "content": " * Represents a Student\u0027s syllabus in the TutorHelper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSyllabus(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class Syllabus {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String MESSAGE_SYLLABUS_CONSTRAINTS \u003d \"Syllabus can take any values, and it should not be \" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \"blank or preceded by white space. Syllabus should not be longer than 30 characters.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * The first character of the syllabus must not be a whitespace, otherwise \" \" (a blank string)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * becomes a valid input. Syllabus should not be longer than 15 characters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String SYLLABUS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final int SYLLABUS_VALIDATION_MAX_LENGTH \u003d 30;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public final String syllabus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public final boolean state;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Constructor to facilitate immutability."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param syllabus A valid syllabus."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Syllabus(String syllabus, boolean state) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        requireNonNull(syllabus);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        checkArgument(isValidSyllabus(syllabus), MESSAGE_SYLLABUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.syllabus \u003d syllabus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.state \u003d state;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Construct a {@code Syllabus} from the {@code String syllabusName}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param syllabusName"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a new {@code Syllabus}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static Syllabus makeSyllabus(String syllabusName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        checkArgument(isValidSyllabus(syllabusName), MESSAGE_SYLLABUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabus \u003d new Syllabus(syllabusName, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return syllabus;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Returns true if a given string is a valid syllabus."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static boolean isValidSyllabus(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        if (test.length() \u003e SYLLABUS_VALIDATION_MAX_LENGTH) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return test.matches(SYLLABUS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String marked \u003d state ? \"X\" : \"  \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return \"[\" + marked + \"] \" + syllabus;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || (other instanceof Syllabus // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 syllabus.equals(((Syllabus) other).syllabus)); //content check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return syllabus.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 66,
      "ongyz": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Represents a Tag in the TutorHelper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 1,
      "lywjoel": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tuitiontiming/TuitionTiming.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.tuitiontiming;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Represents tuition timing in TutorHelper."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTiming(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class TuitionTiming {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String MESSAGE_TUITION_TIMING_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            \"Tuition Day and Time should not be blank and should be in the format:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    + \"Day 12-Hour Timing(hh:mmaa)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    + \"Examples of Valid Input:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    + \"Monday 1:00pm\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    + \"Tuesday 1:15AM\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    + \"Wednesday 12:30pm\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String DAY_REGEX \u003d \"^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String TIME_REGEX \u003d \"((1[012]|[0-9]):([0-5][0-9])(am|pm|AM|PM))$\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * The first character of the tuition time and day must not be a whitespace,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String TUITION_TIMING_VALIDATION_REGEX \u003d DAY_REGEX + \" \" + TIME_REGEX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public final DayOfWeek day;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public final String time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private String dayString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private String timeString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Constructs an {@code TuitionTiming}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @param tuitionTiming A valid tuition time and day."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public TuitionTiming(String tuitionTiming) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(tuitionTiming);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        checkArgument(isValidTiming(tuitionTiming), MESSAGE_TUITION_TIMING_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        splitTuitionTiming(tuitionTiming);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        value \u003d tuitionTiming;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        // this.day and this.time used for comparison purposes for Group Command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.day \u003d DayOfWeek.valueOf(dayString.toUpperCase());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.time \u003d timeString;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Splits the {@code tuitionTiming} string into Day and Time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private void splitTuitionTiming(String tuitionTiming) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String[] tuitionTimingArr \u003d tuitionTiming.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        dayString \u003d tuitionTimingArr[0].trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        timeString \u003d tuitionTimingArr[1].trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Converts the 12hours time into 24hours time."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @param time Time in hh:mm format. E.g. 12:00pm."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return a 24hour version of {@code time}. E.g. 1:00pm converts to 13:00."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static String convertTwelveHourToTwentyFourHour(String time) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String newTime \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        SimpleDateFormat timeIn12Hour \u003d new SimpleDateFormat(\"hh:mmaa\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        SimpleDateFormat timeIn24Hour \u003d new SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            newTime \u003d timeIn24Hour.format(timeIn12Hour.parse(time));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return newTime;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Returns true if a given string is a valid time and day"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static boolean isValidTiming(String test) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return test.matches(TUITION_TIMING_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                || (other instanceof TuitionTiming // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                \u0026\u0026 value.equals(((TuitionTiming) other).value)); // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 12,
      "ongyz": 2,
      "andlimey": 86,
      "lywjoel": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tuitiontiming/TuitionTimingContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.tuitiontiming;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code TuitionTiming} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andlimey"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class TuitionTimingContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private final String keyword; //note that keyword is capitalised for day."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public TuitionTimingContainsKeywordsPredicate(String keyword) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DayOfWeek day \u003d student.getTuitionTiming().day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String time \u003d student.getTuitionTiming().time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (keyword.matches(TuitionTiming.DAY_REGEX)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            return day.equals(DayOfWeek.valueOf(keyword.toUpperCase()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        } else if ((keyword.toLowerCase()).matches((TuitionTiming.TIME_REGEX).toLowerCase())) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            return StringUtil.containsWordIgnoreCase(time, keyword);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                || (other instanceof TuitionTimingContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                \u0026\u0026 keyword.equals(((TuitionTimingContainsKeywordsPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "andlimey": 31,
      "lywjoel": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ReadOnlyTutorHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " * Contains utility methods for populating {@code TutorHelper} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static Student[] getSampleStudents() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new Student[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            new Student(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), getSubjectSet(\"Mathematics\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new TuitionTiming(\"Monday 6:00pm\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            new Student(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), getSubjectSet(\"Economics\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new TuitionTiming(\"Friday 5:30pm\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            new Student(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), getSubjectSet(\"Chemistry\", \"Mathematics\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new TuitionTiming(\"Tuesday 6:00pm\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            new Student(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), getSubjectSet(\"Mathematics\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new TuitionTiming(\"Wednesday 7:00pm\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            new Student(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), getSubjectSet(\"Physics\", \"Biology\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new TuitionTiming(\"Thursday 3:00pm\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            new Student(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), getSubjectSet(\"Chemistry\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new TuitionTiming(\"Saturday 10:00am\"), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static ReadOnlyTutorHelper getSampleTutorHelper() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        TutorHelper sampleAb \u003d new TutorHelper();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        for (Student sampleStudent : getSampleStudents()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            sampleAb.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns a subject set containing the list of strings given."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static Set\u003cSubject\u003e getSubjectSet(String... strings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .map(Subject::makeSubject)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Returns a list of syllabus containing the list of strings given."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static List\u003cSyllabus\u003e getSyllabusList(String... strings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .map(Syllabus::makeSyllabus)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 5,
      "SusterDrifter": 27,
      "andlimey": 6,
      "lywjoel": 16,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SubjectsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.SubjectType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Contains utility methods for managing list of subjects of a {@code Student}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class SubjectsUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns a copy {@code Subject} specified by {@code subjectIndex} from {@code Student}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static Subject copySubjectFrom(Student student, Index subjectIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e sourceSubjects \u003d new ArrayList\u003c\u003e(student.getSubjects());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject selectedSubject \u003d sourceSubjects.get(subjectIndex.getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject copiedSubject \u003d new Subject(selectedSubject.getSubjectType(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                new ArrayList\u003c\u003e(selectedSubject.getSubjectContent()),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                selectedSubject.getCompletionRate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return copiedSubject;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns true if {@code Student} has the same subject type as {@code SubjectType}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static boolean hasSubject(Student student, SubjectType type) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return student.getSubjects().stream().anyMatch(subject -\u003e subject.hasTypeOf(type));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns an {@code Optional\u003cSubject\u003e} of the same given type from student"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static Optional\u003cIndex\u003e findSubjectIndex(Student student, SubjectType type) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Optional\u003cIndex\u003e index \u003d Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e subjectList \u003d new ArrayList\u003c\u003e(student.getSubjects());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (int i \u003d 0; i \u003c subjectList.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            Subject subject \u003d subjectList.get(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (subject.hasTypeOf(type)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                index \u003d Optional.of(Index.fromZeroBased(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code Student source}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * with the updated {@code Set\u003cSubject\u003e subjects}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param source the student to be updated"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param subjects the updated subjects"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @return a new {@code Student} with updated subjects"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static Student createStudentWithNewSubjects(Student source, Set\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new Student(source.getName(), source.getPhone(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                source.getEmail(), source.getAddress(), subjects,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                source.getTuitionTiming(), source.getTags(), source.getPayments());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 49,
      "ongyz": 1,
      "lywjoel": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.commons.events.model.TutorHelperChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ReadOnlyTutorHelper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public interface Storage extends TutorHelperStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    Path getTutorHelperFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    Optional\u003cReadOnlyTutorHelper\u003e readTutorHelper() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    void saveTutorHelper(ReadOnlyTutorHelper tutorHelper) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Saves the current version of the TutorHelper to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    void handleTutorHelperChangedEvent(TutorHelperChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 7,
      "lywjoel": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.commons.events.model.TutorHelperChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ReadOnlyTutorHelper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " * Manages storage of TutorHelper data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private TutorHelperStorage tutorHelperStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public StorageManager(TutorHelperStorage tutorHelperStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.tutorHelperStorage \u003d tutorHelperStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TutorHelper methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public Path getTutorHelperFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return tutorHelperStorage.getTutorHelperFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public Optional\u003cReadOnlyTutorHelper\u003e readTutorHelper() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return readTutorHelper(tutorHelperStorage.getTutorHelperFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public Optional\u003cReadOnlyTutorHelper\u003e readTutorHelper(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return tutorHelperStorage.readTutorHelper(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void saveTutorHelper(ReadOnlyTutorHelper tutorHelper) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        saveTutorHelper(tutorHelper, tutorHelperStorage.getTutorHelperFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void saveTutorHelper(ReadOnlyTutorHelper tutorHelper, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        tutorHelperStorage.saveTutorHelper(tutorHelper, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void handleTutorHelperChangedEvent(TutorHelperChangedEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            saveTutorHelper(event.data);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 19,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TutorHelperStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ReadOnlyTutorHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " * Represents a storage for {@link TutorHelper}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public interface TutorHelperStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    Path getTutorHelperFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Returns TutorHelper data as a {@link seedu.address.model.ReadOnlyTutorHelper}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    Optional\u003cReadOnlyTutorHelper\u003e readTutorHelper() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see #getTutorHelperFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    Optional\u003cReadOnlyTutorHelper\u003e readTutorHelper(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Saves the given {@link ReadOnlyTutorHelper} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @param tutorHelper cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    void saveTutorHelper(ReadOnlyTutorHelper tutorHelper) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    void saveTutorHelper(ReadOnlyTutorHelper tutorHelper, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 13,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Payment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * JAXB-friendly adapted version of Pay"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class XmlAdaptedPay {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private Index studentIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private String amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private String year;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private String month;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Constructs an XmlAdaptedPay."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public XmlAdaptedPay(){}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Constructs a {@code XmlAdaptedPay} with the given {@code index},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * {@code amount}, {@code month}, {@code year}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param index index of the student"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param amount amount the student paid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param month month in which payment is made"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param year year in which payment is made"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public XmlAdaptedPay(Index index, String amount, String month, String year) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.studentIndex \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.amount \u003d String.valueOf(amount);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.month \u003d String.valueOf(month);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.year \u003d String.valueOf(year);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Converts a given Pay into this class for JAXB use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public XmlAdaptedPay(Payment source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.studentIndex \u003d source.getIndex();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.amount \u003d String.valueOf(source.getAmount());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.month \u003d String.valueOf(source.getMonth());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.year \u003d String.valueOf(source.getYear());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Converts this jaxb-friendly adapted payment object into the model\u0027s payment object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Payment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        int integerAmount;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        int integerMonth;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        int integerYear;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        //check if can convert string to integer"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            integerAmount \u003d Integer.valueOf(amount);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            integerMonth \u003d Integer.valueOf(month);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            integerYear \u003d Integer.valueOf(year);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new NumberFormatException(PayCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        //check if the integer value is of a valid form"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (!Payment.isValidAmount(integerAmount)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new IllegalValueException(Payment.MESSAGE_PAYMENT_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        } else if (!Payment.isValidMonth(integerMonth)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new IllegalValueException(Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        } else if (!Payment.isValidYear(integerYear)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new IllegalValueException(Payment.MESSAGE_PAYMENT_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return new Payment(studentIndex, Integer.valueOf(amount),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Integer.valueOf(month), Integer.valueOf(year));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Creates a list of {@code XmlAdaptedPay} for testing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @return list of {@code XmlAdaptedPay}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static List\u003cXmlAdaptedPay\u003e setUpTestPaymentValid() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedPay validPayment \u003d new XmlAdaptedPay(Index.fromZeroBased(1), \"200\", \"2\", \"2018\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return Collections.singletonList(validPayment);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (!(other instanceof XmlAdaptedPay)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return amount.equals(((XmlAdaptedPay) other).amount)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                \u0026\u0026 month.equals(((XmlAdaptedPay) other).month)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                \u0026\u0026 year.equals(((XmlAdaptedPay) other).year);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Objects.hash(studentIndex, amount, month, year);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 32,
      "SusterDrifter": 69,
      "ongyz": 15,
      "lywjoel": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedStudent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Payment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * JAXB-friendly version of the Student."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class XmlAdaptedStudent {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private String tuitionTiming;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private List\u003cXmlAdaptedSubject\u003e subjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private List\u003cXmlAdaptedPay\u003e payments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Constructs an XmlAdaptedStudent."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public XmlAdaptedStudent() {}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Constructs an {@code XmlAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public XmlAdaptedStudent(String name, String phone, String email,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                             String address, List\u003cXmlAdaptedSubject\u003e subjects, String tuitionTiming,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                             List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedPay\u003e payments) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjects \u003d subjects;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.tuitionTiming \u003d tuitionTiming;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (payments !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            this.payments \u003d new ArrayList\u003c\u003e(payments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Converts a given Student into this class for JAXB use."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedStudent"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public XmlAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjects \u003d source.getSubjects().stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .map(XmlAdaptedSubject::new)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .collect(Collectors.toList());;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        tuitionTiming \u003d source.getTuitionTiming().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        payments \u003d source.getPayments().stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .map(XmlAdaptedPay::new)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Converts this jaxb-friendly adapted student object into the model\u0027s Student object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        final List\u003cTag\u003e studentTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            studentTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (subjects \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        final List\u003cSubject\u003e studentSubjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (XmlAdaptedSubject subject : subjects) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            studentSubjects.add(subject.toModelType());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        final List\u003cPayment\u003e studentPayments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (XmlAdaptedPay payment : payments) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            studentPayments.add(payment.toModelType());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (tuitionTiming \u003d\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, TuitionTiming.class.getSimpleName()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (!TuitionTiming.isValidTiming(tuitionTiming)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new IllegalValueException(TuitionTiming.MESSAGE_TUITION_TIMING_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        final TuitionTiming modelTuitionTiming \u003d new TuitionTiming(tuitionTiming);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        final Set\u003cSubject\u003e modelSubjects \u003d new HashSet\u003c\u003e(studentSubjects);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(studentTags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        final List\u003cPayment\u003e modelPayments \u003d new ArrayList\u003c\u003e(studentPayments);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new Student(modelName, modelPhone, modelEmail, modelAddress,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                modelSubjects, modelTuitionTiming, modelTags, modelPayments);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (!(other instanceof XmlAdaptedStudent)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent otherStudent \u003d (XmlAdaptedStudent) other;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return Objects.equals(name, otherStudent.name)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherStudent.phone)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherStudent.email)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherStudent.address)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 subjects.equals(otherStudent.subjects)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 Objects.equals(tuitionTiming, otherStudent.tuitionTiming)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 tagged.equals(otherStudent.tagged)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 payments.equals(otherStudent.payments);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 32,
      "andlimey": 12,
      "lywjoel": 40,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedSubject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.SubjectType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * JAXB-friendly adapted version of the Subject."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class XmlAdaptedSubject {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlAttribute"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private List\u003cXmlAdaptedSyllabus\u003e subjectContent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlAttribute"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private float completionRate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Constructs an XmlAdaptedSubject."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public XmlAdaptedSubject() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Converts a given Subject into this class for JAXB use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedSyllabusBook"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public XmlAdaptedSubject(Subject source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectName \u003d source.getSubjectName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjectContent \u003d source.getSubjectContent().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            .map(XmlAdaptedSyllabus::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.completionRate \u003d source.getCompletionRate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public XmlAdaptedSubject(String subjectName, List\u003cXmlAdaptedSyllabus\u003e subjectContent, float completionRate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.subjectName \u003d subjectName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.subjectContent \u003d subjectContent;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.completionRate \u003d completionRate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Subject toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (!SubjectType.isValidSubjectName(subjectName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e modelSyllabus \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (XmlAdaptedSyllabus syllabus : subjectContent) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            modelSyllabus.add(syllabus.toModelType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Subject(SubjectType.convertStringToSubjectName(subjectName), modelSyllabus, completionRate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (!(other instanceof XmlAdaptedSubject)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return subjectName.equals(((XmlAdaptedSubject) other).subjectName)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 contentAreSame((XmlAdaptedSubject) other);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Checks whether the content of this syllabus book is the same"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * with the other syllabus book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param other the one to be compared to"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @return true if contents are the same"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private boolean contentAreSame(XmlAdaptedSubject other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (subjectContent.size() !\u003d other.subjectContent.size()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (int i \u003d 0, j \u003d 0; i \u003c subjectContent.size(); i++, j++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (!subjectContent.get(i).equals(other.subjectContent.get(j))) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return Objects.hash(subjectName, subjectContent);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 6,
      "SusterDrifter": 101,
      "lywjoel": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedSyllabus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * JAXB-friendly adapted version of the Syllabus."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class XmlAdaptedSyllabus {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private String syllabus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @XmlAttribute"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private boolean state;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Constructs an XmlAdaptedSyllabus."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public XmlAdaptedSyllabus() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Converts a given Syllabus into this class for JAXB use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public XmlAdaptedSyllabus(Syllabus source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.syllabus \u003d source.syllabus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.state \u003d source.state;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Syllabus toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (!Syllabus.isValidSyllabus(syllabus)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throw new IllegalValueException(Syllabus.MESSAGE_SYLLABUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return new Syllabus(syllabus, state);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                || (other instanceof XmlAdaptedSyllabus // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 syllabus.equals(((XmlAdaptedSyllabus) other).syllabus) // content check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u0026\u0026 state \u003d\u003d ((XmlAdaptedSyllabus) other).state); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return syllabus.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 60,
      "lywjoel": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " * Stores TutorHelper data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Saves the given TutorHelper data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableTutorHelper tutorHelper)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            XmlUtil.saveDataToFile(file, tutorHelper);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns TutorHelper in the file or an empty TutorHelper"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static XmlSerializableTutorHelper loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableTutorHelper.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 6,
      "lywjoel": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableTutorHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ReadOnlyTutorHelper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " * An Immutable TutorHelper that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "@XmlRootElement(name \u003d \"TutorHelper\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class XmlSerializableTutorHelper {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Students list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private List\u003cXmlAdaptedStudent\u003e students;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Creates an empty XmlSerializableTutorHelper."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public XmlSerializableTutorHelper() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public XmlSerializableTutorHelper(ReadOnlyTutorHelper src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        students.addAll(src.getStudentList().stream().map(XmlAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Converts this TutorHelper into the model\u0027s {@code TutorHelper} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code XmlAdaptedStudent}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public TutorHelper toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        TutorHelper tutorHelper \u003d new TutorHelper();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        for (XmlAdaptedStudent p : students) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            Student student \u003d p.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            if (tutorHelper.hasStudent(student)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            tutorHelper.addStudent(student);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return tutorHelper;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        if (!(other instanceof XmlSerializableTutorHelper)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return students.equals(((XmlSerializableTutorHelper) other).students);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 13,
      "lywjoel": 12,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlTutorHelperStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ReadOnlyTutorHelper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " * A class to access TutorHelper data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class XmlTutorHelperStorage implements TutorHelperStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlTutorHelperStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public XmlTutorHelperStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public Path getTutorHelperFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public Optional\u003cReadOnlyTutorHelper\u003e readTutorHelper() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return readTutorHelper(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Similar to {@link #readTutorHelper()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public Optional\u003cReadOnlyTutorHelper\u003e readTutorHelper(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            logger.info(\"TutorHelper file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlSerializableTutorHelper xmlTutorHelper \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            return Optional.of(xmlTutorHelper.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void saveTutorHelper(ReadOnlyTutorHelper tutorHelper) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        saveTutorHelper(tutorHelper, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Similar to {@link #saveTutorHelper(ReadOnlyTutorHelper)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void saveTutorHelper(ReadOnlyTutorHelper tutorHelper, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        requireNonNull(tutorHelper);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableTutorHelper(tutorHelper));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 19,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.shape.Line;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.StudentPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label nameLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label addressLabel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label tuitionTimingDayLabel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label tuitionTimingTimeLabel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label emailLabel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phoneLabel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane paymentAmount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane paymentMonth;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane paymentYear;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane subjectList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane subjectsShort;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tagsShort;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private AnchorPane paymentBackground;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Line dividerHori;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Line dividerVert;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label paymentLabel;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label amountLabel;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label monthLabel;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label yearLabel;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        loadStudentPage(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a student\u0027s information into the AnchorPane."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param student The student whose page is to be loaded into the AnchorPane."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadStudentPage(Student student) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (student !\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            setBackgroundState(true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // Clear previous information"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            subjectsShort.getChildren().clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            tagsShort.getChildren().clear();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            paymentAmount.getChildren().clear();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            paymentMonth.getChildren().clear();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            paymentYear.getChildren().clear();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            subjectList.getChildren().clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            // Fill the labels with info from the student object."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            nameLabel.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            addressLabel.setText(student.getAddress().value);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            emailLabel.setText(student.getEmail().value);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            phoneLabel.setText(student.getPhone().value);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            tuitionTimingDayLabel.setText(student.getTuitionTiming().day.toString().substring(0, 3));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            tuitionTimingTimeLabel.setText(student.getTuitionTiming().time);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            student.getSubjects().forEach(subject -\u003e subjectsShort.getChildren().add("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Label(subject.getSubjectName())));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            student.getTags().forEach(tag -\u003e tagsShort.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            student.getPayments().forEach(amount -\u003e paymentAmount.getChildren().add("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Label(String.valueOf(amount.getAmount()))));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            student.getPayments().forEach(amount -\u003e paymentMonth.getChildren().add("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Label(String.valueOf(amount.getMonth()))));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            student.getPayments().forEach(amount -\u003e paymentYear.getChildren().add("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Label(String.valueOf(amount.getYear()))));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c student.getSubjects().size(); i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cSubject\u003e subject \u003d new ArrayList\u003c\u003e(student.getSubjects());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                Index currentIndex \u003d Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                subjectList.getChildren().add("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Label(\"(\" + currentIndex.getOneBased() + \") \" + subject.get(i).toString()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            // Student is null, remove all the text."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            nameLabel.setText(\"\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            addressLabel.setText(\"\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            emailLabel.setText(\"\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            phoneLabel.setText(\"\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            tuitionTimingDayLabel.setText(\"\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            tuitionTimingTimeLabel.setText(\"\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            paymentAmount.getChildren().clear();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            paymentMonth.getChildren().clear();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            paymentYear.getChildren().clear();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            tagsShort.getChildren().clear();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            subjectsShort.getChildren().clear();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            subjectList.getChildren().clear();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setBackgroundState(false);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set visibility of background components based on {@code state}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setBackgroundState(boolean state) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        paymentBackground.setVisible(state);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        dividerHori.setVisible(state);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        dividerVert.setVisible(state);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        paymentLabel.setVisible(state);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        monthLabel.setVisible(state);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        amountLabel.setVisible(state);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        yearLabel.setVisible(state);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleStudentPanelSelectionChangedEvent(StudentPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        loadStudentPage(event.getNewSelection());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 7,
      "lywjoel": 1,
      "-": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private StackPane studentListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @param keyCombination the KeyCombination subjectName of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getTutorHelperFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentListPanel getStudentListPanel() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return studentListPanel;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "SusterDrifter": 1,
      "lywjoel": 6,
      "-": 191
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.commons.events.model.TutorHelperChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void handleTutorHelperChangedEvent(TutorHelperChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/TutorHelper-level4/issues/336\"\u003eThe issue on TutorHelper level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private FlowPane subjects;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private Label tuitionTiming;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        phone.setText(student.getPhone().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        address.setText(student.getAddress().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        email.setText(student.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        tuitionTiming.setText(student.getTuitionTiming().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        student.getSubjects().forEach(subject -\u003e subjects.getChildren().add(new Label(subject.getSubjectName())));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        student.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "SusterDrifter": 1,
      "andlimey": 3,
      "lywjoel": 17,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.events.ui.StudentPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        setConnections(studentList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void setConnections(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        logger.fine(\"Selection in student list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                        raise(new StudentPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Scrolls to the {@code StudentCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            studentListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            studentListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/tutorhelper_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 118
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003c?import java.lang.String?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003cStackPane fx:id\u003d\"browser\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "   \u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" styleClass\u003d\"background\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         \u003cLine fx:id\u003d\"dividerHori\" endX\u003d\"781.0\" endY\u003d\"204.95953369140625\" startX\u003d\"32.29289245605469\" startY\u003d\"204.9595489501953\" stroke\u003d\"#ffffff76\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         \u003cLine fx:id\u003d\"dividerVert\" endX\u003d\"93.66665649414062\" endY\u003d\"69.66667175292969\" layoutX\u003d\"23.0\" layoutY\u003d\"10.0\" startX\u003d\"93.66665649414062\" startY\u003d\"193.0\" stroke\u003d\"#ffffff76\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         \u003cAnchorPane layoutX\u003d\"33.0\" layoutY\u003d\"22.0\" prefHeight\u003d\"155.0\" prefWidth\u003d\"629.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "               \u003cAnchorPane layoutY\u003d\"-1.0\" maxHeight\u003d\"-Infinity\" prefHeight\u003d\"165.0\" prefWidth\u003d\"375.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                     \u003cLabel fx:id\u003d\"nameLabel\" alignment\u003d\"TOP_LEFT\" prefHeight\u003d\"81.0\" prefWidth\u003d\"375.0\" style\u003d\"-fx-font-size: 35px; -fx-font-family: \u0026quot;Segoe UI Semibold\u0026quot;; -fx-text-fill: #ffffffff;\" text\u003d\"nameLabel\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                           \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                     \u003cFlowPane fx:id\u003d\"subjectsShort\" layoutX\u003d\"92.0\" layoutY\u003d\"60.0\" maxWidth\u003d\"250.0\" styleClass\u003d\"subjectsShort\" stylesheets\u003d\"@StudentDetail.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                     \u003cFlowPane fx:id\u003d\"tagsShort\" layoutX\u003d\"92.0\" layoutY\u003d\"87.0\" maxWidth\u003d\"250.0\" styleClass\u003d\"tagsShort\" stylesheets\u003d\"@StudentDetail.css\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                     \u003cLabel fx:id\u003d\"addressLabel\" layoutX\u003d\"92.0\" layoutY\u003d\"110.0\" style\u003d\"-fx-text-fill: #ffffffb0; -fx-font-family: \u0026quot;Segoe UI Semibold\u0026quot;; -fx-font-weight: 500;\" text\u003d\"addressLabel\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                     \u003cLabel fx:id\u003d\"emailLabel\" layoutX\u003d\"92.0\" layoutY\u003d\"134.0\" style\u003d\"-fx-text-fill: #ffffffb0; -fx-font-family: \u0026quot;Segoe UI\u0026quot;;\" text\u003d\"emailLabel\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                     \u003cLabel fx:id\u003d\"phoneLabel\" layoutX\u003d\"92.0\" layoutY\u003d\"157.0\" style\u003d\"-fx-text-fill: #ffffffb0; -fx-font-style: italic; -fx-font-family: \u0026quot;Segoe UI\u0026quot;;\" text\u003d\"phoneLabel\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                     \u003cLabel fx:id\u003d\"tuitionTimingDayLabel\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"15.0\" layoutY\u003d\"89.0\" style\u003d\"-fx-text-fill: #ffffff90; -fx-font-family: \u0026quot;Times New Roman\u0026quot;; -fx-font-weight: bold; -fx-font-size: 25;\" text\u003d\"MON\" textAlignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                     \u003cLabel fx:id\u003d\"tuitionTimingTimeLabel\" layoutX\u003d\"21.0\" layoutY\u003d\"124.0\" prefHeight\u003d\"16.0\" prefWidth\u003d\"60.0\" style\u003d\"-fx-text-fill: #ffffff90; -fx-font-family: \u0026quot;Times New Roman\u0026quot;;\" text\u003d\"10:00pm\" textAlignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "               \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "               \u003cAnchorPane fx:id\u003d\"paymentBackground\" layoutX\u003d\"409.0\" maxHeight\u003d\"-Infinity\" prefHeight\u003d\"184.0\" prefWidth\u003d\"331.0\" style\u003d\"-fx-background-color: #ffffff15; -fx-border-radius: 3; -fx-background-radius: 5;\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                     \u003cLabel fx:id\u003d\"paymentLabel\" layoutX\u003d\"126.0\" layoutY\u003d\"14.0\" style\u003d\"-fx-text-fill: white; -fx-padding: 4 10 5 10; -fx-border-radius: 10; -fx-background-radius: 15; -fx-font-size: 15; -fx-background-color: red;\" text\u003d\"Payments\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                     \u003cLabel fx:id\u003d\"amountLabel\" layoutX\u003d\"46.0\" layoutY\u003d\"50.0\" style\u003d\"-fx-text-fill: #ffffffe0;\" text\u003d\"Amount\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                     \u003cLabel fx:id\u003d\"monthLabel\" layoutX\u003d\"144.0\" layoutY\u003d\"50.0\" style\u003d\"-fx-text-fill: #ffffffe0;\" text\u003d\"Month\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                     \u003cLabel fx:id\u003d\"yearLabel\" layoutX\u003d\"243.0\" layoutY\u003d\"50.0\" style\u003d\"-fx-text-fill: #ffffffe0;\" text\u003d\"Year\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                     \u003cFlowPane fx:id\u003d\"paymentAmount\" alignment\u003d\"TOP_CENTER\" columnHalignment\u003d\"CENTER\" layoutX\u003d\"31.0\" layoutY\u003d\"75.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"101.0\" prefWidth\u003d\"80.0\" prefWrapLength\u003d\"4000000.0\" styleClass\u003d\"payment-text\" stylesheets\u003d\"@StudentDetail.css\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                           \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                     \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                     \u003cFlowPane fx:id\u003d\"paymentMonth\" alignment\u003d\"TOP_CENTER\" columnHalignment\u003d\"CENTER\" layoutX\u003d\"126.0\" layoutY\u003d\"75.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"101.0\" prefWidth\u003d\"80.0\" prefWrapLength\u003d\"4000000.0\" styleClass\u003d\"payment-text\" stylesheets\u003d\"@StudentDetail.css\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                           \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                     \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                     \u003cFlowPane fx:id\u003d\"paymentYear\" alignment\u003d\"TOP_CENTER\" columnHalignment\u003d\"CENTER\" layoutX\u003d\"217.0\" layoutY\u003d\"75.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"101.0\" prefWidth\u003d\"80.0\" prefWrapLength\u003d\"4000000.0\" styleClass\u003d\"payment-text\" stylesheets\u003d\"@StudentDetail.css\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                           \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                     \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "               \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         \u003cAnchorPane layoutX\u003d\"30.0\" layoutY\u003d\"222.0\" prefHeight\u003d\"215.0\" prefWidth\u003d\"740.0\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "               \u003cFlowPane fx:id\u003d\"subjectList\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"346.0\" prefWidth\u003d\"740.0\" rowValignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                  \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                     \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                     \u003cURL value\u003d\"@StudentDetail.css\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                  \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                  \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                     \u003cString fx:value\u003d\"background\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                     \u003cString fx:value\u003d\"subjectList\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                  \u003c/styleClass\u003e\u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 44,
      "andlimey": 5,
      "lywjoel": 10,
      "-": 17
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "#filterField, #studentListPanel, #studentWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "andlimey"
        },
        "content": "#subjects {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "andlimey"
        },
        "content": "#subjects .label {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-background-color: #3e96;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 14,
      "lywjoel": 1,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cImage url\u003d\"@/images/tutorhelper_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "          \u003cVBox fx:id\u003d\"studentList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cStackPane fx:id\u003d\"studentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 3,
      "-": 65
    }
  },
  {
    "path": "src/main/resources/view/PersonPage.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cmeta charset\u003d\"utf-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003ctitle\u003eStudent Page\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003clink href\u003d\"StudentPage.css\" type\u003d\"text/css\" rel\u003d\"stylesheet\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003clink href\u003d\"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\" rel\u003d\"stylesheet\" type\u003d\u0027text/css\u0027\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003clink href\u003d\u0027https://fonts.googleapis.com/css?family\u003dDroid+Serif:400,700,400italic,700italic\u0027 rel\u003d\u0027stylesheet\u0027 type\u003d\u0027text/css\u0027\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cscript type\u003d\"text/javascript\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        function getJsonFromUrl() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            var query \u003d location.search.substr(1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            var result \u003d {};"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            query.split(\"\u0026\").forEach(function (part) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                var item \u003d part.split(\"\u003d\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                result[item[0]] \u003d decodeURIComponent(item[1]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            });"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            document.getElementById(\"name\").innerHTML \u003d getJsonFromUrl().name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            document.getElementById(\"phone\").innerHTML \u003d getJsonFromUrl().phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            document.getElementById(\"email\").innerHTML \u003d getJsonFromUrl().email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            document.getElementById(\"address\").innerHTML \u003d getJsonFromUrl().address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            document.getElementById(\"tuitionTimingDay\").innerHTML \u003d getJsonFromUrl().tuitionTimingDay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            document.getElementById(\"tuitionTimingTime\").innerHTML \u003d getJsonFromUrl().tuitionTimingTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            document.getElementById(\"subjectNames\").innerHTML \u003d (getJsonFromUrl().subjectNames);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            document.getElementById(\"subjects\").innerHTML \u003d getJsonFromUrl().subjects;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            document.getElementById(\"payments\").innerHTML \u003d getJsonFromUrl().payments;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        document.addEventListener(\"DOMContentLoaded\", function (event) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            document.getElementById(\"tags\").innerHTML \u003d getJsonFromUrl().tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/script\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstyle\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/style\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c!--Main Detail--\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003cheader class\u003d\"main-detail\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003cdiv class\u003d\"container\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003cdiv class\u003d\"personal-name\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u003cdiv class\u003d\"text-lead\"\u003e\u003cspan id\u003d\"name\"\u003e\u003c/span\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003cdiv class\u003d\"personal-detail\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u003cdiv class\u003d\"timing-detail\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003cdiv class\u003d\"timing-text\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003cspan id\u003d\"tuitionTimingDay\" class\u003d\"timing-day text-uppercase\"\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003cspan id\u003d\"tuitionTimingTime\"\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u003cdiv class\u003d\"contact-detail\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003cdiv class\u003d\"label\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        \u003cdiv class\u003d\"label-text\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                            \u003cspan id\u003d\"subjectNames\"\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        \u003c/div\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003c/div\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003cdiv class\u003d\"text-detail\"\u003e\u003cspan id\u003d\"address\"\u003e\u003c/span\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003cdiv class\u003d\"text-detail\"\u003e\u003cspan id\u003d\"email\"\u003e\u003c/span\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \u003cdiv class\u003d\"text-italic\"\u003e\u003cspan id\u003d\"phone\"\u003e\u003c/span\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u003c/div\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c/header\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c!--Payment Panel--\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003cheader class\u003d\"payment-detail\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003cdiv class\u003d\"payment-label\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003ch3 class\u003d\"payment-title\" align\u003d\"center\"\u003epayment history\u003c/h3\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003cdiv class\u003d\"payment-numbers-panel\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003cspan class\u003d\"payment-numbers\" id\u003d\"payments\"\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c/header\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003cdiv class\u003d\"detail-subject-division\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003chr class\u003d\"horizontal-divider\"/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c!--Tags--\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003cheader class\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003cdiv class\u003d\"label\" style\u003d\"display: inline-block\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003ca\u003eTags: \u003c/a\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003cdiv class\u003d\"label-text\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                \u003cspan id\u003d\"tags\"\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003c/div\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c/header\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003c!--Subjects--\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    \u003ctable class\u003d\"subject-table\" style\u003d\"width:100%\"\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            \u003cth\u003eSubjects\u003c/th\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            \u003ctd\u003e\u003cspan id\u003d\"subjects\"\u003e\u003c/span\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/table\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/body\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 3,
      "SusterDrifter": 66,
      "lywjoel": 48
    }
  },
  {
    "path": "src/main/resources/view/StudentDetail.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ".subjectsShort, .tagsShort {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ".subjectsShort .label, .tagsShort .label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ".tagsShort .label {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ".subjectsShort .label {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-background-color: #3e96;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ".payment-text .label {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-text-fill: #ffffffa0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-font-family: \u0027Abel\u0027;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ".subjectList {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-hgap: 10;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-vgap: 10;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ".subjectList .label{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-font-size: 14;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-background-color: rgba(131, 81, 255, 0.8);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-padding: 5 10 5 10;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-min-width: 250;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-max-width: 250;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    -fx-font-family: \u0027Abel\u0027;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 44
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" prefWidth\u003d\"130.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"subjects\" prefWidth\u003d\"130.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andlimey"
        },
        "content": "      \u003cLabel fx:id\u003d\"tuitionTiming\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$tuitionTiming\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 10,
      "andlimey": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "  \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "  \"tutorHelperFilePath\" : \"tutorhelper.xml\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "  \"tutorHelperFilePath\" : \"tutorhelper.xml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableTutorHelperTest/duplicateStudentTutorHelper.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003cTutorHelper\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming\u003eMonday 6:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003csubjects subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c!-- Student with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming\u003eMonday 6:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003csubjects subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003c/TutorHelper\u003e"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "ongyz": 5,
      "andlimey": 2,
      "lywjoel": 5,
      "-": 11
    }
  },
  {
    "path": "src/test/data/XmlSerializableTutorHelperTest/invalidStudentTutorHelper.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003cTutorHelper\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c!-- Student with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e94824240\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eMonday 6:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003c/TutorHelper\u003e"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "ongyz": 1,
      "andlimey": 2,
      "lywjoel": 3,
      "-": 4
    }
  },
  {
    "path": "src/test/data/XmlSerializableTutorHelperTest/typicalStudentsTutorHelper.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c!-- TutorHelper save file which contains the same Student values as in TypicalStudents#getTypicalTutorHelper() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongyz"
        },
        "content": "\u003cTutorHelper\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003ctuitionTiming\u003eTuesday 8:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003csubjects subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003csubjectContent state\u003d\"false\"\u003eIntegration\u003c/subjectContent\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003c/subjects\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003ctuitionTiming\u003eMonday 5:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003csubjects subjectName\u003d\"Chemistry\" completionRate\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003csubjectContent state\u003d\"false\"\u003eKinetics\u003c/subjectContent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003csubjectContent state\u003d\"false\"\u003eOrganic Chemistry\u003c/subjectContent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003c/subjects\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003cpayments\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003camount\u003e200\u003c/amount\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003cyear\u003e2018\u003c/year\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003cmonth\u003e11\u003c/month\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003c/payments\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003cpayments\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003camount\u003e300\u003c/amount\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003cyear\u003e2018\u003c/year\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003cmonth\u003e12\u003c/month\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003c/payments\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003caddress\u003eWall street\u003c/address\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003ctuitionTiming\u003eSaturday 1:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003csubjects subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003csubjectContent state\u003d\"false\"\u003eCalculus II\u003c/subjectContent\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003csubjectContent state\u003d\"false\"\u003eStatistics I\u003c/subjectContent\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003c/subjects\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003csubjects subjectName\u003d\"Physics\" completionRate\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003c/subjects\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003ctuitionTiming\u003eSaturday 3:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003csubjects subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003csubjectContent state\u003d\"false\"\u003eCalculus II\u003c/subjectContent\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003csubjectContent state\u003d\"false\"\u003eStatistics I\u003c/subjectContent\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003c/subjects\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003csubjects subjectName\u003d\"Physics\" completionRate\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        \u003c/subjects\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003cphone\u003e94822240\u003c/phone\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003caddress\u003eMichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003ctuitionTiming\u003eSunday 11:00am\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003csubjects subjectName\u003d\"Economics\" completionRate\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003csubjectContent state\u003d\"false\"\u003eDemand and Supply\u003c/subjectContent\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003c/subjects\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003cphone\u003e94824270\u003c/phone\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003ctuitionTiming\u003eThursday 3:30pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003csubjects subjectName\u003d\"Chemistry\" completionRate\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003csubjectContent state\u003d\"false\"\u003eOrganic Chemistry\u003c/subjectContent\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003csubjectContent state\u003d\"false\"\u003eAcids and Bases\u003c/subjectContent\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003c/subjects\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003cphone\u003e94824420\u003c/phone\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003ctuitionTiming\u003eFriday 5:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003csubjects subjectName\u003d\"Economics\" completionRate\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            \u003csubjectContent state\u003d\"false\"\u003eMacroeconomics\u003c/subjectContent\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003c/subjects\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongyz"
        },
        "content": "\u003c/TutorHelper\u003e"
      }
    ],
    "authorContributionMap": {
      "ongyz": 46,
      "andlimey": 3,
      "lywjoel": 19,
      "-": 28
    }
  },
  {
    "path": "src/test/data/XmlTutorHelperStorageTest/invalidAndValidStudentTutorHelper.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003cTutorHelper\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c!-- Valid Student --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e94824240\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c!-- Student with invalid phone field --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003c/TutorHelper\u003e"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "andlimey": 1,
      "lywjoel": 6,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlTutorHelperStorageTest/invalidStudentTutorHelper.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003cTutorHelper\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c!-- Student with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e94824240\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003c/TutorHelper\u003e"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "andlimey": 1,
      "lywjoel": 3,
      "-": 4
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidStudentField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c!-- Student with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003cstudent\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003ctuitionTiming\u003eMonday 6:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003csubjects subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    \u003cpayments\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003camount\u003e200\u003c/amount\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003cyear\u003e2018\u003c/year\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003cmonth\u003e2\u003c/month\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    \u003c/payments\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c/student\u003e"
      }
    ],
    "authorContributionMap": {
      "ongyz": 5,
      "andlimey": 2,
      "lywjoel": 3,
      "-": 6
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingStudentField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c!-- Student with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003cstudent\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003cphone\u003e94824240\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003ctuitionTiming\u003eMonday 6:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003csubjects subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    \u003cpayments\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003camount\u003e200\u003c/amount\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003cyear\u003e2018\u003c/year\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003cmonth\u003e2\u003c/month\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    \u003c/payments\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c/student\u003e"
      }
    ],
    "authorContributionMap": {
      "ongyz": 5,
      "andlimey": 3,
      "lywjoel": 3,
      "-": 4
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempTutorHelper.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003cTutorHelper\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003c/TutorHelper\u003e"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "lywjoel": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validStudent.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003cstudent\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003cphone\u003e94824240\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003ctuitionTiming\u003eMonday 6:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    \u003csubjects subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    \u003cpayments\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003camount\u003e200\u003c/amount\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003cyear\u003e2018\u003c/year\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        \u003cmonth\u003e2\u003c/month\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    \u003c/payments\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "\u003c/student\u003e"
      }
    ],
    "authorContributionMap": {
      "ongyz": 5,
      "andlimey": 3,
      "lywjoel": 2,
      "-": 5
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validTutorHelper.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003cTutorHelper\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e94824240\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eMonday 6:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eTuesday 7:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Economics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eTuesday 8:30pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"History\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eWednesday 5:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e94822240\u003c/phone\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eThursday 5:30pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Chemistry\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e94824270\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eFriday 4:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e94824420\u003c/phone\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eSaturday 1:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Physics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e84824240\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eSaturday 3:00pm\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Mathematics\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003cstudents\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e84821310\u003c/phone\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003ctuitionTiming isPrivate\u003d\"false\"\u003eSunday 11:00am\u003c/tuitionTiming\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        \u003csubjects isPrivate\u003d\"false\" subjectName\u003d\"Chemistry\" completionRate\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    \u003c/students\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "\u003c/TutorHelper\u003e"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "andlimey": 24,
      "lywjoel": 18,
      "-": 31
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 15000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 1,
      "-": 118
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BrowserPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A handler for the {@code BrowserPanel} of the UI."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String BROWSER_ID \u003d \"#browser\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final Student DEFAULT_STUDENT \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private Student lastStudent \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private boolean isLoaded \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle(Node browserPanelNode) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(browserPanelNode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        StackPane stackPaneParent \u003d getChildNode(BROWSER_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        new GuiRobot().interact(() -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (stackPaneParent.isNeedsLayout()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                isLoaded \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                stackPaneParent.requestLayout();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                isLoaded \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public Scene getLoadedScene() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return getChildNode(BROWSER_ID).getScene();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void rememberStudent() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        lastStudent \u003d getLoadedStudent();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public boolean isStudentChanged() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return !lastStudent.equals(getLoadedStudent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Translates the given URL into the equivalent {@code Student}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Student getLoadedStudent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Scene scene \u003d getLoadedScene();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StudentBuilder createdStudent \u003d new StudentBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String name \u003d ((Label)scene.lookup(\"#nameLabel\")).getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String address \u003d ((Label)scene.lookup(\"#addressLabel\")).getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String phone \u003d ((Label)scene.lookup(\"#phoneLabel\")).getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String email \u003d ((Label)scene.lookup(\"#emailLabel\")).getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (name.isEmpty() || address.isEmpty() || phone.isEmpty() || email.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            logger.log(Level.WARNING,  \"No student has been loaded. \" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    \"Using default student information instead.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            lastStudent \u003d DEFAULT_STUDENT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return DEFAULT_STUDENT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        createdStudent.withName(name);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        createdStudent.withAddress(address);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        createdStudent.withPhone(phone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        createdStudent.withEmail(email);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return createdStudent.build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isLoaded() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return isLoaded;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 44,
      "-": 41
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final StudentListPanelHandle studentListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentListPanel \u003d new StudentListPanelHandle(getChildNode(StudentListPanelHandle.STUDENT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentListPanelHandle getStudentListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return studentListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar syncStatusNode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar saveLocationNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Returns true if the current content of the sync status is different from"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * the subjectName remembered by the most recent"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * subjectName remembered by the most"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 4,
      "-": 70
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StudentCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Provides a handle to a student card in the student list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class StudentCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns true if this handle contains {@code student}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public boolean equals(Student student) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return getName().equals(student.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 getAddress().equals(student.getAddress().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 getPhone().equals(student.getPhone().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 getEmail().equals(student.getEmail().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(student.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 11,
      "-": 76
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StudentListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Provides a handle for {@code StudentListPanel} containing the list of {@code StudentCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class StudentListPanelHandle extends NodeHandle\u003cListView\u003cStudent\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String STUDENT_LIST_VIEW_ID \u003d \"#studentListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Optional\u003cStudent\u003e lastRememberedSelectedStudentCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentListPanelHandle(ListView\u003cStudent\u003e studentListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        super(studentListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns a handle to the selected {@code StudentCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cStudent\u003e selectedStudentList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (selectedStudentList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new AssertionError(\"Student list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .map(StudentCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedStudentList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cStudent\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Navigates the listview to display {@code student}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void navigateToCard(Student student) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (!getRootNode().getItems().contains(student)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            throw new IllegalArgumentException(\"Student does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            getRootNode().scrollTo(student);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Selects the {@code StudentCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns the student card handle of a student associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentCardHandle getStudentCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .map(StudentCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .filter(handle -\u003e handle.equals(getStudent(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Student getStudent(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Remembers the selected {@code StudentCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void rememberSelectedStudentCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cStudent\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            lastRememberedSelectedStudentCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            lastRememberedSelectedStudentCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns true if the selected {@code StudentCard} is different from the subjectName remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code rememberSelectedStudentCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public boolean isSelectedStudentCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cStudent\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            return lastRememberedSelectedStudentCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            return !lastRememberedSelectedStudentCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    || !lastRememberedSelectedStudentCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 38,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ReadOnlyTutorHelper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.storage.XmlSerializableTutorHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    protected Supplier\u003cReadOnlyTutorHelper\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyTutorHelper\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            createDataFileWithData(new XmlSerializableTutorHelper(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        userPrefs.setTutorHelperFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns a defensive copy of the TutorHelper data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public TutorHelper readStorageTutorHelper() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            return new TutorHelper(storage.readTutorHelper().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            throw new AssertionError(\"Data is not in the TutorHelper format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return storage.getTutorHelperFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Model copy \u003d new ModelManager((model.getTutorHelper()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredStudentList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 12,
      "lywjoel": 2,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : TutorHelper\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        final Index fifthStudentIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(fifthStudentIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 7,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/tutorhelper_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary subjectName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary subjectName"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 2,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPay.setUpTestPaymentValid;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.storage.XmlAdaptedPay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.storage.XmlAdaptedStudent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.storage.XmlAdaptedSubject;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.storage.XmlSerializableTutorHelper;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.testutil.TutorHelperBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validTutorHelper.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final Path MISSING_STUDENT_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingStudentField.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final Path INVALID_STUDENT_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentField.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final Path VALID_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"validStudent.xml\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempTutorHelper.xml\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private static final String VALID_PHONE \u003d \"94824240\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private static final String VALID_TUITION_TIMING \u003d \"Monday 6:00pm\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private static final List\u003cXmlAdaptedSubject\u003e VALID_SUBJECTS \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            Collections.singletonList(new XmlAdaptedSubject(Subject.makeSubject(\"Mathematics\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static final List\u003cXmlAdaptedPay\u003e VALID_PAYMENT \u003d setUpTestPaymentValid();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlUtil.getDataFromFile(null, TutorHelper.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, TutorHelper.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, TutorHelper.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        TutorHelper dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableTutorHelper.class).toModelType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(9, dataFromFile.getStudentList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void xmlAdaptedStudentFromFile_fileWithMissingStudentField_validResult() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent actualStudent \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                MISSING_STUDENT_FIELD_FILE, XmlAdaptedStudentWithRootElement.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent expectedStudent \u003d new XmlAdaptedStudent(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_ADDRESS, VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedStudent, actualStudent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void xmlAdaptedStudentFromFile_fileWithInvalidStudentField_validResult() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent actualStudent \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                INVALID_STUDENT_FIELD_FILE, XmlAdaptedStudentWithRootElement.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent expectedStudent \u003d new XmlAdaptedStudent(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedStudent, actualStudent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void xmlAdaptedStudentFromFile_fileWithValidStudent_validResult() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent actualStudent \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                VALID_STUDENT_FILE, XmlAdaptedStudentWithRootElement.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent expectedStudent \u003d new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedStudent, actualStudent);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlUtil.saveDataToFile(null, new TutorHelper());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new TutorHelper());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlSerializableTutorHelper dataToWrite \u003d new XmlSerializableTutorHelper(new TutorHelper());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlSerializableTutorHelper dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableTutorHelper.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        TutorHelperBuilder builder \u003d new TutorHelperBuilder(new TutorHelper());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        dataToWrite \u003d new XmlSerializableTutorHelper("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                builder.withStudent(new StudentBuilder().build()).build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableTutorHelper.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedStudent}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @XmlRootElement(name \u003d \"student\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static class XmlAdaptedStudentWithRootElement extends XmlAdaptedStudent {}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 17,
      "SusterDrifter": 3,
      "ongyz": 1,
      "andlimey": 5,
      "lywjoel": 27,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return subjectName"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return subjectName"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return subjectName"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 3,
      "-": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        logic.getFilteredStudentList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     *      - {@code expectedModel}\u0027s TutorHelper was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "lywjoel": 5,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_newStudent_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.addStudent(validStudent);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(new AddCommand(validStudent), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validStudent), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentInList \u003d model.getTutorHelper().getStudentList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(new AddCommand(studentInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 3,
      "lywjoel": 12,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.ReadOnlyTutorHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        //build a non empty model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validStudent).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validStudent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validStudent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStudent(validStudent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public void resetData(ReadOnlyTutorHelper newData) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public ReadOnlyTutorHelper getTutorHelper() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public void updateStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public void updateStudentInternalField(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public boolean canUndoTutorHelper() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public boolean canRedoTutorHelper() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public void undoTutorHelper() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public void redoTutorHelper() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public void commitTutorHelper() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public void sortByTime() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public void sortByDay() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * A Model stu"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * b that contains a single student."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private class ModelStubWithStudent extends ModelStub {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        ModelStubWithStudent(Student student) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            return this.student.isSameStudent(student);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * A Model stub that always accept the student being added."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public void commitTutorHelper() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        public ReadOnlyTutorHelper getTutorHelper() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return new TutorHelper();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 16,
      "ongyz": 42,
      "-": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddSubCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * AddSubCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class AddSubCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void constructor_nullArguments_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        new AddSubCommand(null, null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        new AddSubCommand(null, Subject.makeSubject(\"Physics\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        new AddSubCommand(INDEX_FIRST_STUDENT, null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_allValidArgumentsUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Subject subjectTest \u003d Subject.makeSubject(\"Physics\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        AddSubCommand addSubCommand \u003d new AddSubCommand(INDEX_FIRST_STUDENT, subjectTest);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(AddSubCommand.MESSAGE_ADDSUB_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student updatedStudent \u003d simulateAddSubCommand(studentTarget, subjectTest);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(studentTarget, updatedStudent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(addSubCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        AddSubCommand addSubCommand \u003d new AddSubCommand(outOfBoundIndex, Subject.makeSubject(\"Physics\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(addSubCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_validIndexesFilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Subject subjectTest \u003d Subject.makeSubject(\"Physics\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        AddSubCommand addSubCommand \u003d new AddSubCommand(INDEX_FIRST_STUDENT, subjectTest);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(AddSubCommand.MESSAGE_ADDSUB_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student updatedStudent \u003d simulateAddSubCommand(studentTarget, subjectTest);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(studentTarget, updatedStudent);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(addSubCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        AddSubCommand addSubCommand \u003d new AddSubCommand(outOfBoundIndex, Subject.makeSubject(\"Physics\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(addSubCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_invalidSubject_throwsCommandException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        new AddSubCommand(INDEX_FIRST_STUDENT, Subject.makeSubject(\" \"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_duplicateSubject_throwsCommandException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Subject subjectCopy \u003d Subject.makeSubject(new ArrayList\u003c\u003e(studentTarget.getSubjects())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .get(INDEX_FIRST_SUBJECT.getZeroBased())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .getSubjectName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        AddSubCommand addSubCommand \u003d new AddSubCommand(INDEX_FIRST_STUDENT, subjectCopy);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(addSubCommand, model, commandHistory,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                String.format(AddSubCommand.MESSAGE_DUPLICATE_SUBJECT, studentTarget));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Subject subjectTest \u003d Subject.makeSubject(\"Physics\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        AddSubCommand addSubCommand \u003d new AddSubCommand(INDEX_FIRST_STUDENT, subjectTest);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student newStudent \u003d simulateAddSubCommand(studentTarget, subjectTest);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(studentTarget, newStudent);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // AddSub -\u003e first student has an added subject"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        addSubCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // undo -\u003e reverts TutorHelper back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // redo -\u003e same first student deleted again"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.redoTutorHelper();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        AddSubCommand addSubCommand \u003d new AddSubCommand(outOfBoundIndex, Subject.makeSubject(\"Physics\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // execution failed -\u003e TutorHelper state not added into model"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(addSubCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // single TutorHelper state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        AddSubCommand addSubCommand1 \u003d new AddSubCommand(INDEX_FIRST_STUDENT, Subject.makeSubject(\"Physics\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        AddSubCommand addSubCommand2 \u003d new AddSubCommand(INDEX_SECOND_STUDENT, Subject.makeSubject(\"Physics\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(addSubCommand1, addSubCommand1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        AddSubCommand addSubCommand1Copy \u003d new AddSubCommand(INDEX_FIRST_STUDENT, Subject.makeSubject(\"Physics\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(addSubCommand1, addSubCommand1Copy);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertNotEquals(addSubCommand1, 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertNotEquals(addSubCommand1, null);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertNotEquals(addSubCommand1, addSubCommand2);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Simulates and returns a new {@code Student} created by AddSubCommand."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Student simulateAddSubCommand(Student studentTarget, Subject subject) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        subjects.add(subject);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return SubjectsUtil.createStudentWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 191
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddSyllCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SYLLABUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * AddSyllCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class AddSyllCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void constructor_nullArguments_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabusList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusList.add(Syllabus.makeSyllabus(\"Mathematics\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        new AddSyllCommand(null, null, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        new AddSyllCommand(null, INDEX_FIRST_SUBJECT, syllabusList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        new AddSyllCommand(INDEX_FIRST_STUDENT, null, syllabusList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_allValidArgumentsUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabusTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusTest.add(Syllabus.makeSyllabus(\"AddSyllTestSyllabus\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        AddSyllCommand addSyllCommand \u003d new AddSyllCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(AddSyllCommand.MESSAGE_ADDSYLL_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Student newStudent \u003d simulateAddSyllCommand(studentTarget, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateStudentInternalField(studentTarget, newStudent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(addSyllCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabusTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusTest.add(Syllabus.makeSyllabus(\"AddSyllTestSyllabus\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        AddSyllCommand addSyllCommand \u003d new AddSyllCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addSyllCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_invalidIndexSubjectUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabusTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusTest.add(Syllabus.makeSyllabus(\"AddSyllTestSyllabus\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(studentTarget.getSubjects().size() + 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        AddSyllCommand addSyllCommand \u003d new AddSyllCommand("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_STUDENT, outOfBoundIndex, syllabusTest);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(addSyllCommand, model, commandHistory, Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_validIndexesFilteredList_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabusTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusTest.add(Syllabus.makeSyllabus(\"AddSyllTestSyllabus\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        AddSyllCommand addSyllCommand \u003d new AddSyllCommand("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(AddSyllCommand.MESSAGE_ADDSYLL_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Student updatedStudent \u003d simulateAddSyllCommand(studentTarget, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateStudentInternalField(studentTarget, updatedStudent);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(addSyllCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of TutorHelper list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorHelper().getStudentList().size());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabusTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusTest.add(Syllabus.makeSyllabus(\"AddSyllTestSyllabus\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        AddSyllCommand addSyllCommand \u003d new AddSyllCommand("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                outOfBoundIndex, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addSyllCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_invalidSubjectIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(studentTarget.getSubjects().size() + 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabusTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusTest.add(Syllabus.makeSyllabus(\"AddSyllTestSyllabus\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        AddSyllCommand addSyllCommand \u003d new AddSyllCommand("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_STUDENT, outOfBoundIndex, syllabusTest);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(addSyllCommand, model, commandHistory, Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_invalidSyllabus_throwsCommandException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabusTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusTest.add(Syllabus.makeSyllabus(\" \"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        new AddSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidSyllabusExceedLength_throwsCommandException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabusTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusTest.add(Syllabus.makeSyllabus(\"Thisisasyllabusthatexceedsfifteencharactersanditshouldfail\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        new AddSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_duplicateSyllabus_throwsCommandException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabusTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Syllabus syllabusCopy \u003d Syllabus.makeSyllabus(new ArrayList\u003c\u003e(studentTarget.getSubjects())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .get(INDEX_FIRST_SUBJECT.getZeroBased())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .getSubjectContent()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .get(INDEX_FIRST_SYLLABUS.getZeroBased()).syllabus); //makes a copy of existing syllabus"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusTest.add(syllabusCopy);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        AddSyllCommand addSyllCommand \u003d new AddSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(addSyllCommand, model, commandHistory,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                String.format(AddSyllCommand.MESSAGE_DUPLICATE_SYLLABUS_IN_STUDENT, studentTarget));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabusTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusTest.add(Syllabus.makeSyllabus(\"AddSyllTestSyllabus\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        AddSyllCommand addSyllCommand \u003d new AddSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Student newStudent \u003d simulateAddSyllCommand(studentTarget, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateStudentInternalField(studentTarget, newStudent);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // AddSyll -\u003e first student has an added syllabus"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        addSyllCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts TutorHelper back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first student deleted again"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoTutorHelper();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabusTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusTest.add(Syllabus.makeSyllabus(\"AddSyllTestSyllabus\"));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        AddSyllCommand addSyllCommand \u003d new AddSyllCommand(outOfBoundIndex, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e TutorHelper state not added into model"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addSyllCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // single TutorHelper state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabusTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusTest.add(Syllabus.makeSyllabus(\"AddSyllTestSyllabus\"));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        AddSyllCommand addSyllFirstCommand \u003d new AddSyllCommand("
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        AddSyllCommand addSyllSecondCommand \u003d new AddSyllCommand("
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_SECOND_STUDENT, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertEquals(addSyllFirstCommand, addSyllFirstCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        AddSyllCommand addSyllFirstCommandCopy \u003d new AddSyllCommand("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertEquals(addSyllFirstCommand, addSyllFirstCommandCopy);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertNotEquals(addSyllFirstCommand, 1);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertNotEquals(addSyllFirstCommand, null);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertNotEquals(addSyllFirstCommand, addSyllSecondCommand);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Simulates and returns a new {@code Student} created by AddSyllCommand."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private Student simulateAddSyllCommand(Student studentTarget, Index subjectIndex, List\u003cSyllabus\u003e syllabuses) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Subject updatedSubject \u003d subjects.get(subjectIndex.getZeroBased());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        for (Syllabus syllabus: syllabuses) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            updatedSubject.add(syllabus);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjects.set(subjectIndex.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        return SubjectsUtil.createStudentWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 156,
      "ongyz": 50,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void execute_emptyTutorHelper_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void execute_nonEmptyTutorHelper_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.resetData(new TutorHelper());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 8,
      "lywjoel": 1,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_AND_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SYLLABUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String VALID_NAME_CATHY \u003d \"Cathy Ho\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_NAME_ALCYONE \u003d \"Alcyone Star\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_NAME_BILLY \u003d \"Billy Goat\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_NAME_CABBAGE \u003d \"Cabbage Green\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_NAME_DAISY \u003d \"Daisy Lane\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String VALID_PHONE_CATHY \u003d \"33333333\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_PHONE_ALCYONE \u003d \"11112222\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_PHONE_BILLY \u003d \"33334444\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_PHONE_CABBAGE \u003d \"44445555\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_PHONE_DAISY \u003d \"44444444\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String VALID_EMAIL_CATHY \u003d \"cathy@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_EMAIL_ALCYONE \u003d \"alcyone@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_EMAIL_BILLY \u003d \"billy@example.com\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_EMAIL_CABBAGE \u003d \"cabbage@example.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_EMAIL_DAISY \u003d \"daisy@example.com\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String VALID_ADDRESS_CATHY \u003d \"Block 213, Cathy Street 2\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_ADDRESS_ALCYONE \u003d \"Block 111, Alcyone Constellation 3\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_ADDRESS_BILLY \u003d \"Block 210, Billy Mountain 88\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_ADDRESS_CABBAGE \u003d \"Block 274, Cabbage Patch 95\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_ADDRESS_DAISY \u003d \"Block 232, Daisy Lane 55\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String VALID_SUBJECT_AMY \u003d \"Mathematics\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String VALID_SUBJECT_BOB \u003d \"Economics\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String VALID_SUBJECT_CATHY \u003d \"Physics\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_SUBJECT_ALCYONE \u003d \"Economics\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_SUBJECT_BILLY \u003d \"Physics\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_SUBJECT_CABBAGE \u003d \"Chemistry\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_SUBJECT_DAISY \u003d \"Chemistry\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String VALID_TUITION_TIMING_AMY \u003d \"Monday 4:00pm\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String VALID_TUITION_TIMING_BOB \u003d \"Tuesday 8:00pm\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String VALID_TUITION_TIMING_CATHY \u003d \"Wednesday 7:30pm\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_TUITION_TIMING_ALCYONE \u003d \"Friday 6:30pm\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_TUITION_TIMING_BILLY \u003d \"Saturday 7:30pm\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_TUITION_TIMING_CABBAGE \u003d \"Sunday 7:30pm\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String VALID_TUITION_TIMING_DAISY \u003d \"Thursday 7:30pm\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String VALID_TUITION_TIMING_MEIER \u003d \"Monday 5:00pm\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String DUPLICATE_SYLLABUS \u003d \"Integration\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String VALID_SYLLABUS_DIFFERENTIATION \u003d \"Differentiation\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String VALID_SYLLABUS_KINETICS \u003d \"Kinetics\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String VALID_SYLLABUS_ORGANIC \u003d \"Organic Chemistry\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String SUBJECT_DESC_AMY \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String SUBJECT_DESC_BOB \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_BOB;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String TUITION_TIMING_DESC_AMY \u003d \" \" + PREFIX_DAY_AND_TIME + VALID_TUITION_TIMING_AMY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String TUITION_TIMING_DESC_BOB \u003d \" \" + PREFIX_DAY_AND_TIME + VALID_TUITION_TIMING_BOB;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String TAG_DESC_HUSBAND_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND + \", \" + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String SYLLABUS_DESC_DIFFERENTIATION \u003d PREFIX_SYLLABUS + VALID_SYLLABUS_DIFFERENTIATION;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String SYLLABUS_DESC_INTEGRATION \u003d PREFIX_SYLLABUS + DUPLICATE_SYLLABUS;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String INVALID_SUBJECT_DESC \u003d \" \" + PREFIX_SUBJECT; //empty string not allowed for subjects"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final String INVALID_TUITION_TIMING_DESC \u003d \" \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            + PREFIX_DAY_AND_TIME + \"Monday 12pm\"; // time needs to be in standard 12hr timing"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DESC_AMY \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withEmptyPayments().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DESC_BOB \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * - the TutorHelper and the filtered student list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        TutorHelper expectedTutorHelper \u003d new TutorHelper(actualModel.getTutorHelper());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            assertEquals(expectedTutorHelper, actualModel.getTutorHelper());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the student at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * {@code model}\u0027s TutorHelper."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static void showStudentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student student \u003d (Student) model.getFilteredStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertEquals(1, model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Deletes the first student in {@code model}\u0027s filtered list from {@code model}\u0027s TutorHelper."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static void deleteFirstStudent(Model model) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(0);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.deleteStudent(firstStudent);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.commitTutorHelper();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 25,
      "SusterDrifter": 5,
      "ongyz": 45,
      "andlimey": 4,
      "lywjoel": 1,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CopySubCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getDifferentSubjectStudentIndexes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getSameSubjectStudentsIndexes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * {@code CopySubCommand}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class CopySubCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_validIndexesUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentSource \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_SECOND_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        CopySubCommand copySubCommand \u003d new CopySubCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(CopySubCommand.MESSAGE_COPYSUB_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student newStudent \u003d simulateCopySubCommand(studentSource, INDEX_FIRST_SUBJECT, studentTarget);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(studentTarget, newStudent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(copySubCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        CopySubCommand copySubCommand \u003d new CopySubCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                outOfBoundIndex, INDEX_FIRST_SUBJECT, INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(copySubCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        copySubCommand \u003d new CopySubCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, outOfBoundIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(copySubCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_sameStudentUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        CopySubCommand copySubCommand \u003d new CopySubCommand("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(copySubCommand, model, commandHistory,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                String.format(CopySubCommand.MESSAGE_COPYSUB_FAILED_SAME_STUDENT, studentTarget));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_invalidIndexSubjectUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(studentTarget.getSubjects().size() + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        CopySubCommand copySubCommand \u003d new CopySubCommand("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                INDEX_FIRST_STUDENT, outOfBoundIndex, INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(copySubCommand, model, commandHistory, Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of TutorHelper list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorHelper().getStudentList().size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        CopySubCommand copySubCommand \u003d new CopySubCommand("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                outOfBoundIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(copySubCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_hasExistingSubject_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cIndex\u003e sameSubjectIndex \u003d getSameSubjectStudentsIndexes();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index firstIndex \u003d sameSubjectIndex.get(0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index secondIndex \u003d sameSubjectIndex.get(1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentSource \u003d model.getFilteredStudentList().get(firstIndex.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(secondIndex.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        CopySubCommand copySubCommand \u003d new CopySubCommand("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                firstIndex, INDEX_FIRST_SUBJECT, secondIndex);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(CopySubCommand.MESSAGE_COPYSUB_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student newStudent \u003d simulateCopySubCommand(studentSource, INDEX_FIRST_SUBJECT, studentTarget);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(studentTarget, newStudent);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // No new subject should be created"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(studentTarget.getSubjects().size(), newStudent.getSubjects().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(copySubCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_addNewSubject_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cIndex\u003e sameSubjectIndex \u003d getDifferentSubjectStudentIndexes();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index firstIndex \u003d sameSubjectIndex.get(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index secondIndex \u003d sameSubjectIndex.get(1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentSource \u003d model.getFilteredStudentList().get(firstIndex.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(secondIndex.getZeroBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        CopySubCommand copySubCommand \u003d new CopySubCommand("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                firstIndex, INDEX_FIRST_SUBJECT, secondIndex);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(CopySubCommand.MESSAGE_COPYSUB_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student newStudent \u003d simulateCopySubCommand(studentSource, INDEX_FIRST_SUBJECT, studentTarget);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(studentTarget, newStudent);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // New subject should be created"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertNotEquals(studentTarget.getSubjects().size(), newStudent.getSubjects().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(copySubCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentSource \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_SECOND_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        CopySubCommand copySubCommand \u003d new CopySubCommand("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student newStudent \u003d simulateCopySubCommand(studentSource, INDEX_FIRST_SUBJECT, studentTarget);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(studentTarget, newStudent);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // CopySub -\u003e first student syllabus is erased"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        copySubCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // undo -\u003e reverts TutorHelper back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // redo -\u003e same first student deleted again"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.redoTutorHelper();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        CopySubCommand copySubCommand \u003d new CopySubCommand("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                outOfBoundIndex, INDEX_FIRST_SUBJECT, INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // execution failed -\u003e TutorHelper state not added into model"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(copySubCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // single TutorHelper state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        CopySubCommand copySubFirstCommand \u003d new CopySubCommand("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        CopySubCommand copySubSecondCommand \u003d new CopySubCommand("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                INDEX_SECOND_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertEquals(copySubFirstCommand, copySubFirstCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        CopySubCommand copySubFirstCommandCopy \u003d new CopySubCommand("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertEquals(copySubFirstCommand, copySubFirstCommandCopy);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertNotEquals(copySubFirstCommand, 1);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertNotEquals(copySubFirstCommand, null);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertNotEquals(copySubFirstCommand, copySubSecondCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Simulates and returns a new {@code Student} created by CopySubCommand."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Student simulateCopySubCommand(Student studentSource, Index subjectIndex, Student studentTarget) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e sourceSubjects \u003d new ArrayList\u003c\u003e(studentSource.getSubjects());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e targetSubjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject selectedSubject \u003d sourceSubjects.get(subjectIndex.getZeroBased());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Set\u003cSubject\u003e updatedSubjects;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (SubjectsUtil.hasSubject(studentTarget, selectedSubject.getSubjectType())) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            Index index \u003d SubjectsUtil.findSubjectIndex(studentTarget, selectedSubject.getSubjectType()).get();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            Subject updatedSubject \u003d targetSubjects.get(index.getZeroBased())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    .append(selectedSubject.getSubjectContent());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            targetSubjects.set(index.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            updatedSubjects \u003d new HashSet\u003c\u003e(targetSubjects);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            targetSubjects.add(selectedSubject);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            updatedSubjects \u003d new HashSet\u003c\u003e(targetSubjects);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return SubjectsUtil.createStudentWithNewSubjects(studentTarget, updatedSubjects);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 11,
      "SusterDrifter": 169,
      "lywjoel": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showNoStudent(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of TutorHelper list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorHelper().getStudentList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // delete -\u003e first student deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // undo -\u003e reverts TutorHelper back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // redo -\u003e same first student deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.redoTutorHelper();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // execution failed -\u003e TutorHelper state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // single TutorHelper state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 1. Deletes a {@code Student} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted student in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the student object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameStudentDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentAtIndex(model, INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // delete -\u003e deletes second student in unfiltered student list / first student in filtered student list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // undo -\u003e reverts TutorHelper back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertNotEquals(studentToDelete, model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // redo -\u003e deletes same second student in unfiltered student list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.redoTutorHelper();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void showNoStudent(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 13,
      "lywjoel": 51,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteSubCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUBJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * DeleteSubCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class DeleteSubCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_validIndexesUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_THIRD_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteSubCommand deleteSubCommand \u003d new DeleteSubCommand(INDEX_THIRD_STUDENT, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteSubCommand.MESSAGE_DELETESUB_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student newStudent \u003d simulateDeleteSubCommand(studentTarget, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(studentTarget, newStudent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(deleteSubCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteSubCommand deleteSubCommand \u003d new DeleteSubCommand(outOfBoundIndex, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(deleteSubCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_invalidIndexSubjectUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_THIRD_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(studentTarget.getSubjects().size() + 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteSubCommand deleteSubCommand \u003d new DeleteSubCommand(INDEX_THIRD_STUDENT, outOfBoundIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(deleteSubCommand, model, commandHistory, Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_validIndexesFilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_THIRD_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteSubCommand deleteSubCommand \u003d new DeleteSubCommand(INDEX_THIRD_STUDENT, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteSubCommand.MESSAGE_DELETESUB_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student updatedStudent \u003d simulateDeleteSubCommand(studentTarget, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(studentTarget, updatedStudent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(deleteSubCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteSubCommand deleteSubCommand \u003d new DeleteSubCommand(outOfBoundIndex, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(deleteSubCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_invalidSubjectIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_THIRD_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(studentTarget.getSubjects().size() + 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteSubCommand deleteSubCommand \u003d new DeleteSubCommand(INDEX_THIRD_STUDENT, outOfBoundIndex);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(deleteSubCommand, model, commandHistory, Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_THIRD_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteSubCommand deleteSubCommand \u003d new DeleteSubCommand(INDEX_THIRD_STUDENT, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student newStudent \u003d simulateDeleteSubCommand(studentTarget, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(studentTarget, newStudent);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // DeleteSub -\u003e first student subject is erased"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deleteSubCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // undo -\u003e reverts TutorHelper back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // redo -\u003e same first student deleted again"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.redoTutorHelper();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteSubCommand deleteSubCommand \u003d new DeleteSubCommand(outOfBoundIndex, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // execution failed -\u003e TutorHelper state not added into model"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(deleteSubCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // single TutorHelper state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteSubCommand deleteSubCommand1 \u003d new DeleteSubCommand(INDEX_THIRD_STUDENT, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteSubCommand deleteSubCommand2 \u003d new DeleteSubCommand(INDEX_THIRD_STUDENT, INDEX_SECOND_SUBJECT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(deleteSubCommand1, deleteSubCommand1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        DeleteSubCommand deleteSubCommand1Copy \u003d new DeleteSubCommand(INDEX_THIRD_STUDENT, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(deleteSubCommand1, deleteSubCommand1Copy);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertNotEquals(deleteSubCommand1, 1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertNotEquals(deleteSubCommand1, null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertNotEquals(deleteSubCommand1, deleteSubCommand2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Simulates and returns a new {@code Student} created by DeleteSubCommand."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Student simulateDeleteSubCommand(Student studentTarget, Index subjectIndex) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        subjects.remove(subjectIndex.getZeroBased());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return SubjectsUtil.createStudentWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteSyllCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongyz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SYLLABUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongyz"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": " * DeleteSyllCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": "public class DeleteSyllCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_validIndexesUnfilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DeleteSyllCommand deleteSyllCommand \u003d new DeleteSyllCommand("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteSyllCommand.MESSAGE_DELETESYLL_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student newStudent \u003d simulateDeleteSyllCommand(studentTarget, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.updateStudentInternalField(studentTarget, newStudent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(deleteSyllCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DeleteSyllCommand deleteSyllCommand \u003d new DeleteSyllCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(deleteSyllCommand, model, commandHistory,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexSubjectUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(studentTarget.getSubjects().size() + 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DeleteSyllCommand deleteSyllCommand \u003d new DeleteSyllCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_STUDENT, outOfBoundIndex, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(deleteSyllCommand, model, commandHistory, Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexSyllabusUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(new ArrayList\u003c\u003e(studentTarget.getSubjects())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .get(INDEX_FIRST_SUBJECT.getZeroBased()).getSubjectContent().size() + 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DeleteSyllCommand deleteSyllCommand \u003d new DeleteSyllCommand("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, outOfBoundIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(deleteSyllCommand, model, commandHistory, Messages.MESSAGE_INVALID_SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_validIndexesFilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DeleteSyllCommand deleteSyllCommand \u003d new DeleteSyllCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteSyllCommand.MESSAGE_DELETESYLL_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student updatedStudent \u003d simulateDeleteSyllCommand(studentTarget, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.updateStudentInternalField(studentTarget, updatedStudent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(deleteSyllCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of TutorHelper list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorHelper().getStudentList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DeleteSyllCommand deleteSyllCommand \u003d new DeleteSyllCommand("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                outOfBoundIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(deleteSyllCommand, model, commandHistory,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexSubjectFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(studentTarget.getSubjects().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DeleteSyllCommand deleteSyllCommand \u003d new DeleteSyllCommand("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_STUDENT, outOfBoundIndex, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(deleteSyllCommand, model, commandHistory, Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexSyllabusFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(new ArrayList\u003c\u003e(studentTarget.getSubjects())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .get(INDEX_FIRST_SUBJECT.getZeroBased()).getSubjectContent().size() + 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DeleteSyllCommand deleteSyllCommand \u003d new DeleteSyllCommand("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, outOfBoundIndex);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(deleteSyllCommand, model, commandHistory, Messages.MESSAGE_INVALID_SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DeleteSyllCommand deleteSyllCommand \u003d new DeleteSyllCommand("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student newStudent \u003d simulateDeleteSyllCommand(studentTarget, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.updateStudentInternalField(studentTarget, newStudent);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // DeleteSyll -\u003e first student syllabus is erased"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        deleteSyllCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // undo -\u003e reverts TutorHelper back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // redo -\u003e same first student deleted again"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.redoTutorHelper();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DeleteSyllCommand deleteSyllCommand \u003d new DeleteSyllCommand("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                outOfBoundIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // execution failed -\u003e TutorHelper state not added into model"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(deleteSyllCommand, model, commandHistory,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // single TutorHelper state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DeleteSyllCommand deleteSyllFirstCommand \u003d new DeleteSyllCommand("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DeleteSyllCommand deleteSyllSecondCommand \u003d new DeleteSyllCommand("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_SECOND_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertEquals(deleteSyllFirstCommand, deleteSyllFirstCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        DeleteSyllCommand deleteSyllFirstCommandCopy \u003d new DeleteSyllCommand("
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertEquals(deleteSyllFirstCommand, deleteSyllFirstCommandCopy);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertNotEquals(deleteSyllFirstCommand, 1);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertNotEquals(deleteSyllFirstCommand, null);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertNotEquals(deleteSyllFirstCommand, deleteSyllSecondCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Simulates and returns a new {@code Student} created by DeleteSyllCommand."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private Student simulateDeleteSyllCommand(Student studentTarget, Index subjectIndex, Index syllabusIndex)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Subject updatedSubject \u003d subjects.get(subjectIndex.getZeroBased()).remove(syllabusIndex);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        subjects.set(subjectIndex.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return SubjectsUtil.createStudentWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ongyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongyz": 220
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EarningsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongyz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelperWithPayments;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": "public class EarningsCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorHelperWithPayments(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void execute_validMonthYear_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        //Assuming no entry for November 1998 was entered"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        EarningsCommand earnings \u003d new EarningsCommand(11, 1998);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage \u003d \"Earnings: $0\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertCommandSuccess(earnings, model, commandHistory, expectedMessage, model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        EarningsCommand earnings2 \u003d new EarningsCommand(3, 2018);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage2 \u003d \"Earnings: $700\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertCommandSuccess(earnings2, model, commandHistory, expectedMessage2, model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 26,
      "ongyz": 4,
      "lywjoel": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorHelper(model.getTutorHelper()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedStudent \u003d studentInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastStudent, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorHelper(model.getTutorHelper()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(lastStudent, editedStudent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, new EditStudentDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorHelper(model.getTutorHelper()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorHelper(model.getTutorHelper()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_duplicateStudentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_STUDENT, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_duplicateStudentFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // edit student in filtered list into a duplicate in TutorHelper"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentInList \u003d model.getTutorHelper().getStudentList().get(INDEX_SECOND_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new EditStudentDescriptorBuilder(studentInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * but smaller than size of TutorHelper"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of TutorHelper list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorHelper().getStudentList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentToEdit \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorHelper(model.getTutorHelper()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // edit -\u003e first student edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // undo -\u003e reverts TutorHelper back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // redo -\u003e same first student edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.redoTutorHelper();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // execution failed -\u003e TutorHelper state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // single TutorHelper state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 1. Edits a {@code Student} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited student in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the student object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameStudentEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().withPayments(\"2 200 11 2018\", \"2 300 12 2018\").build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorHelper(model.getTutorHelper()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentAtIndex(model, INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentToEdit \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // edit -\u003e edits second student in unfiltered student list / first student in filtered student list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // undo -\u003e reverts TutorHelper back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertNotEquals(model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased()), studentToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // redo -\u003e edits same second student in unfiltered student list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.redoTutorHelper();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, DESC_AMY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditStudentDescriptor copyDescriptor \u003d new EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_STUDENT, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_STUDENT, DESC_AMY)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_STUDENT, DESC_BOB)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongyz": 18,
      "lywjoel": 87,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditStudentDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class EditStudentDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditStudentDescriptor descriptorWithSameValues \u003d new EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditStudentDescriptor editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 9,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditSyllCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongyz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DUPLICATE_SYLLABUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SYLLABUS_DIFFERENTIATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SYLLABUS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUBJECT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SYLLABUS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": " * EditSyllCommand."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongyz"
        },
        "content": "public class EditSyllCommandTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_validIndexesUnfilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllCommand \u003d new EditSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SYLLABUS, new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String expectedMessage \u003d String.format(EditSyllCommand.MESSAGE_EDITSYLL_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student newStudent \u003d simulateEditSyllCommand(studentTarget, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.updateStudentInternalField(studentTarget, newStudent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(editSyllCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllCommand \u003d new EditSyllCommand(outOfBoundIndex, INDEX_FIRST_SUBJECT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SYLLABUS, new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(editSyllCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexSubjectUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(studentTarget.getSubjects().size() + 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllCommand \u003d new EditSyllCommand(INDEX_FIRST_STUDENT, outOfBoundIndex,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SYLLABUS, new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(editSyllCommand, model, commandHistory, EditSyllCommand.MESSAGE_SUBJECT_NOT_FOUND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexSyllabusUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(new ArrayList\u003c\u003e(studentTarget.getSubjects())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .get(INDEX_FIRST_SUBJECT.getZeroBased()).getSubjectContent().size() + 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllCommand \u003d new EditSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                outOfBoundIndex, new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(editSyllCommand, model, commandHistory, Messages.MESSAGE_INVALID_SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_validIndexesFilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllCommand \u003d new EditSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SYLLABUS, new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String expectedMessage \u003d String.format(EditSyllCommand.MESSAGE_EDITSYLL_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student updatedStudent \u003d simulateEditSyllCommand(studentTarget, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.updateStudentInternalField(studentTarget, updatedStudent);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(editSyllCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of TutorHelper list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorHelper().getStudentList().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllCommand \u003d new EditSyllCommand(outOfBoundIndex, INDEX_FIRST_SUBJECT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SYLLABUS, new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(editSyllCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexSubjectFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(studentTarget.getSubjects().size() + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllCommand \u003d new EditSyllCommand(INDEX_FIRST_STUDENT, outOfBoundIndex,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SYLLABUS, new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(editSyllCommand, model, commandHistory, EditSyllCommand.MESSAGE_SUBJECT_NOT_FOUND);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexSyllabusFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(new ArrayList\u003c\u003e(studentTarget.getSubjects())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .get(INDEX_FIRST_SUBJECT.getZeroBased()).getSubjectContent().size() + 1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllCommand \u003d new EditSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                outOfBoundIndex, new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(editSyllCommand, model, commandHistory, Messages.MESSAGE_INVALID_SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_duplicateSyllabus_throwsCommandException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllCommand \u003d new EditSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SYLLABUS, new Syllabus(DUPLICATE_SYLLABUS, true));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(editSyllCommand, model, commandHistory, EditSyllCommand.MESSAGE_DUPLICATE_SYLLABUS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidSyllabus_throwsCommandException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        new EditSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS, Syllabus.makeSyllabus(\" \"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidSyllabusExceedLength_throwsCommandException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        new EditSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                Syllabus.makeSyllabus(\"Thisisasyllabusthatexceedsfifteencharactersanditshouldfail\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllCommand \u003d new EditSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SYLLABUS, new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student newStudent \u003d simulateEditSyllCommand(studentTarget, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.updateStudentInternalField(studentTarget, newStudent);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // DeleteSyll -\u003e first student syllabus is erased"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        editSyllCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // undo -\u003e reverts TutorHelper back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // redo -\u003e same first student deleted again"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.redoTutorHelper();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllCommand \u003d new EditSyllCommand(outOfBoundIndex, INDEX_FIRST_SUBJECT,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SYLLABUS, new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // execution failed -\u003e TutorHelper state not added into model"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(editSyllCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // single TutorHelper state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void executeUndoRedo_duplicate_failure() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllCommand \u003d new EditSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SYLLABUS, new Syllabus(DUPLICATE_SYLLABUS, true));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // execution failed -\u003e TutorHelper state not added into model"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(editSyllCommand, model, commandHistory, EditSyllCommand.MESSAGE_DUPLICATE_SYLLABUS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // single TutorHelper state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllFirstCommand \u003d new EditSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SYLLABUS, new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllSecondCommand \u003d new EditSyllCommand(INDEX_SECOND_STUDENT, INDEX_SECOND_SUBJECT,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_SECOND_SYLLABUS, new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllThirdCommand \u003d new EditSyllCommand(INDEX_SECOND_STUDENT, INDEX_SECOND_SUBJECT,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_SECOND_SYLLABUS, new Syllabus(DUPLICATE_SYLLABUS, true));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertEquals(editSyllFirstCommand, editSyllFirstCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditSyllCommand editSyllFirstCommandCopy \u003d new EditSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SYLLABUS, new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertEquals(editSyllFirstCommand, editSyllFirstCommandCopy);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertNotEquals(editSyllFirstCommand, 1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertNotEquals(editSyllFirstCommand, null);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // different index command -\u003e returns false"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertNotEquals(editSyllFirstCommand, editSyllSecondCommand);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // different syllabus command -\u003e returns false"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertNotEquals(editSyllSecondCommand, editSyllThirdCommand);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // different index and syllabus command -\u003e returns false"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertNotEquals(editSyllFirstCommand, editSyllThirdCommand);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Simulates and returns a new {@code Student} created by EditSyllCommand."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private Student simulateEditSyllCommand(Student studentTarget, Index subjectIndex, Index syllabusIndex,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                                            Syllabus syllabus) throws CommandException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Subject updatedSubject \u003d subjects.get(subjectIndex.getZeroBased()).edit(syllabus, syllabusIndex);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        subjects.set(subjectIndex.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return SubjectsUtil.createStudentWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ongyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongyz": 271
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_zeroKeywords_noStudentFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_multipleKeywords_multipleStudentsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "lywjoel": 15,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andlimey"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.DANIEL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.GEORGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTimingContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class GroupCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        TuitionTimingContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new TuitionTimingContainsKeywordsPredicate(\"Monday\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        TuitionTimingContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                new TuitionTimingContainsKeywordsPredicate(\"5:00pm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        GroupCommand groupDayCommand \u003d new GroupCommand(firstPredicate, true, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        GroupCommand groupTimeCommand \u003d new GroupCommand(secondPredicate, false, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertTrue(groupDayCommand.equals(groupDayCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertTrue(groupTimeCommand.equals(groupTimeCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        GroupCommand groupDayCommandCopy \u003d new GroupCommand(firstPredicate, true, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertTrue(groupDayCommand.equals(groupDayCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        GroupCommand groupTimeCommandCopy \u003d new GroupCommand(secondPredicate, false, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertTrue(groupTimeCommand.equals(groupTimeCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(groupDayCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(groupTimeCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(groupDayCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(groupTimeCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(groupDayCommand.equals(groupTimeCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_zeroKeywords_noStudentFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        TuitionTimingContainsKeywordsPredicate predicate \u003d new TuitionTimingContainsKeywordsPredicate(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        GroupCommand command \u003d new GroupCommand(predicate, false, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_keywords_multipleStudentsFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //day predicate"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        TuitionTimingContainsKeywordsPredicate dayPredicate \u003d new TuitionTimingContainsKeywordsPredicate(\"Saturday\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        GroupCommand command \u003d new GroupCommand(dayPredicate, true, false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(dayPredicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        expectedModel.sortByTime();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(Arrays.asList(CARL, DANIEL), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //time predicate"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        TuitionTimingContainsKeywordsPredicate timePredicate \u003d new TuitionTimingContainsKeywordsPredicate(\"5:00pm\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        command \u003d new GroupCommand(timePredicate, false, true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(timePredicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        expectedModel.sortByDay();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, GEORGE), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongyz": 1,
      "andlimey": 77,
      "lywjoel": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "lywjoel": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MarkCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongyz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SYLLABUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongyz"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": " * {@code MarkCommand}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": "public class MarkCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_validIndexesUnfilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String expectedMessage \u003d String.format(MarkCommand.MESSAGE_MARK_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student newStudent \u003d simulateMarkCommand(studentTarget, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.updateStudentInternalField(studentTarget, newStudent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(markCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(outOfBoundIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(markCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexSubjectUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(studentTarget.getSubjects().size() + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(INDEX_FIRST_STUDENT, outOfBoundIndex, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(markCommand, model, commandHistory, Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexSyllabusUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(new ArrayList\u003c\u003e(studentTarget.getSubjects())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .get(INDEX_FIRST_SUBJECT.getZeroBased()).getSubjectContent().size() + 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(markCommand, model, commandHistory, Messages.MESSAGE_INVALID_SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_validIndexesFilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String expectedMessage \u003d String.format(MarkCommand.MESSAGE_MARK_SUCCESS, studentTarget);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student updatedStudent \u003d simulateMarkCommand(studentTarget, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.updateStudentInternalField(studentTarget, updatedStudent);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(markCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of TutorHelper list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorHelper().getStudentList().size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(outOfBoundIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(markCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexSubjectFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(studentTarget.getSubjects().size() + 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(INDEX_FIRST_STUDENT, outOfBoundIndex, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(markCommand, model, commandHistory, Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_invalidIndexSyllabusFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(new ArrayList\u003c\u003e(studentTarget.getSubjects())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .get(INDEX_FIRST_SUBJECT.getZeroBased()).getSubjectContent().size() + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, outOfBoundIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(markCommand, model, commandHistory, Messages.MESSAGE_INVALID_SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentTarget \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student newStudent \u003d simulateMarkCommand(studentTarget, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.updateStudentInternalField(studentTarget, newStudent);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // mark -\u003e first student marked"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        markCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // undo -\u003e reverts TutorHelper back to previous state and filtered student list to show all students"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // redo -\u003e same first student deleted again"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.redoTutorHelper();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        MarkCommand markCommand \u003d new MarkCommand(outOfBoundIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // execution failed -\u003e TutorHelper state not added into model"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(markCommand, model, commandHistory, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // single TutorHelper state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        MarkCommand markFirstCommand \u003d new MarkCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        MarkCommand markSecondCommand \u003d new MarkCommand(INDEX_SECOND_STUDENT, INDEX_FIRST_SUBJECT,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertEquals(markFirstCommand, markFirstCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        MarkCommand markFirstCommandCopy \u003d new MarkCommand("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertEquals(markFirstCommand, markFirstCommandCopy);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertNotEquals(markFirstCommand, 1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertNotEquals(markFirstCommand, null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertNotEquals(markFirstCommand, markSecondCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private void showNoStudent(Model model) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Simulates and returns a new {@code Student} created by MarkCommand."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private Student simulateMarkCommand(Student studentTarget, Index subjectIndex, Index syllabusIndex)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Subject updatedSubject \u003d subjects.get(subjectIndex.getZeroBased()).toggleState(syllabusIndex);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        subjects.set(subjectIndex.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return SubjectsUtil.createStudentWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ongyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongyz": 216
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PayCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Payment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class PayCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(model.getTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index lastStudentIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertExecutionSuccess(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_STUDENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertExecutionSuccess(lastStudentIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index integerOverflowIndex \u003d Index.fromOneBased(Integer.MAX_VALUE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertExecutionFailure(integerOverflowIndex, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void execute_updatePaymentMethod_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Payment originalPayment \u003d new Payment(INDEX_FIRST_STUDENT, 100, 11, 1998);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommand originalPayCommand \u003d new PayCommand(originalPayment);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        List\u003cPayment\u003e oldPaymentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        oldPaymentList.add(originalPayment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Payment newPayment \u003d new Payment(INDEX_FIRST_STUDENT, 100, 11, 2018);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        List\u003cPayment\u003e actualReturnedPayment \u003d originalPayCommand.updatePayment(oldPaymentList, newPayment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        List\u003cPayment\u003e expectedReturnedPaymentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedReturnedPaymentList.add(originalPayment);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedReturnedPaymentList.add(newPayment);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertEquals(actualReturnedPayment, expectedReturnedPaymentList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void execute_editPaymentMethod_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Payment existingPayment \u003d new Payment(INDEX_FIRST_STUDENT, 100, 11, 1998);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Payment editedPayment \u003d new Payment(INDEX_FIRST_STUDENT, 300, 11, 1998);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student existingStudent \u003d new StudentBuilder(ALICE).withPayments(existingPayment).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(ALICE).withPayments(editedPayment).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        PayCommand editPayCommand \u003d new PayCommand(editedPayment);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String expectedMessage \u003d String.format(PayCommand.MESSAGE_EDITPAYMENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorHelper(model.getTutorHelper()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongyz"
        },
        "content": "      "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.updateStudentInternalField(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        model.updateStudentInternalField(model.getFilteredStudentList().get(0), existingStudent);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(editPayCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Executes a {@code PayCommand} with the given {@code index}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Payment payment \u003d new Payment(index, 200, 9, 2020);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommand payCommand \u003d new PayCommand(payment);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentOriginal \u003d model.getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student studentOriginalClone \u003d new StudentBuilder(studentOriginal).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(studentOriginalClone).withPayments(payment).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String expectedMessage \u003d String.format(PayCommand.MESSAGE_PAYMENT_SUCCESS, expectedStudent);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.updateStudent(studentOriginal, expectedStudent);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertCommandSuccess(payCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Executes a {@code PayCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Payment payment \u003d new Payment(index, 200, 9, 2020);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommand payCommand \u003d new PayCommand(payment);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertCommandFailure(payCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Payment alicePayment \u003d new Payment(INDEX_FIRST_STUDENT, 200, 10, 2018);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Payment bobPayment \u003d new Payment(INDEX_SECOND_STUDENT, 200, 10, 2018);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommand payAliceCommand \u003d new PayCommand(alicePayment);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommand payBobCommand \u003d new PayCommand(bobPayment);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTrue(payAliceCommand.equals(payAliceCommand));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommand payAliceCommandCopy \u003d new PayCommand(alicePayment);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTrue(payAliceCommand.equals(payAliceCommandCopy));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(payAliceCommand.equals(1));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(payAliceCommand.equals(null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // different payment -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(payAliceCommand.equals(payBobCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 96,
      "ongyz": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstStudent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deleteFirstStudent(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deleteFirstStudent(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        model.undoTutorHelper();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        model.undoTutorHelper();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deleteFirstStudent(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deleteFirstStudent(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.redoTutorHelper();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.redoTutorHelper();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 8,
      "lywjoel": 6,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index lastStudentIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_STUDENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertExecutionSuccess(lastStudentIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentAtIndex(expectedModel, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentAtIndex(expectedModel, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of TutorHelper list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getTutorHelper().getStudentList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_STUDENT_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "lywjoel": 25,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstStudent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTutorHelper(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deleteFirstStudent(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deleteFirstStudent(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deleteFirstStudent(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deleteFirstStudent(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedModel.undoTutorHelper();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 4,
      "lywjoel": 6,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TUITION_TIMING_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.model.student.Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.model.student.Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.model.student.Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student expectedStudentMultipleTags \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + TAG_DESC_HUSBAND_FRIEND,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                new AddCommand(expectedStudentMultipleTags));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + SUBJECT_DESC_AMY + TUITION_TIMING_DESC_AMY, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                        + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // two invalid values, only first invalid subjectName reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB, MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // multiple names - invalid name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                        + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // multiple phones - invalid phone"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                        + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                        + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + TUITION_TIMING_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 13,
      "SusterDrifter": 1,
      "ongyz": 38,
      "andlimey": 11,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddSubCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.AddSubCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class AddSubCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSubCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private AddSubCommandParser parser \u003d new AddSubCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void parse_validArgs_returnsAddSubCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseSuccess(parser, \"1 s/Physics\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new AddSubCommand(INDEX_FIRST_STUDENT, Subject.makeSubject(\"Physics\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseSuccess(parser, \"2 s/Mathematics\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new AddSubCommand(INDEX_SECOND_STUDENT, Subject.makeSubject(\"Mathematics\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseSuccess(parser, \"3 s/Chemistry\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new AddSubCommand(INDEX_THIRD_STUDENT, Subject.makeSubject(\"Chemistry\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Negative index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(parser, \"-1 s/Physics\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Zero index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(parser, \"0 s/Mathematics\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Invalid index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(parser, \"a\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Missing subject"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Invalid subject"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(parser, \"1 1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Error on the syllabus parsing should show syllabus constraints instead"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(parser, \"1 s/ \", Subject.MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddSyllCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SUBJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.AddSyllCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongyz"
        },
        "content": "public class AddSyllCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private AddSyllCommandParser parser \u003d new AddSyllCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void parse_validArgs_returnsAddSyllCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSyllabus\u003e syllabusList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusList.add(Syllabus.makeSyllabus(\"Integration\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"1 1 sy/Integration\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                new AddSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, syllabusList));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusList.set(0, Syllabus.makeSyllabus(\"Kinetics\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"2 3 sy/Kinetics\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                new AddSyllCommand(INDEX_SECOND_STUDENT, INDEX_THIRD_SUBJECT, syllabusList));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        syllabusList.set(0, Syllabus.makeSyllabus(\"Molecular Biology\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"1 2 sy/Molecular Biology\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                new AddSyllCommand(INDEX_FIRST_STUDENT, INDEX_SECOND_SUBJECT, syllabusList));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"1\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"1 1\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"a 1\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"1 1 test\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // Error on the syllabus parsing should show syllabus constraints instead"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"1 1 sy/ \", Syllabus.MESSAGE_SYLLABUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 34,
      "ongyz": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * and only the last subjectName is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // Verify the last subjectName is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument subjectName \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument subjectName\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        argsString \u003d \" p/   Argument subjectName \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument subjectName\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash subjectName\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash subjectName\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash subjectName\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash subjectName\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        argsString \u003d unknownPrefix + \"some subjectName\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT subjectName p/\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                + \" pSlash subjectName -t\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash subjectName -t\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"^Q -t another dashT subjectName\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "SusterDrifter": 11,
      "ongyz": 3,
      "-": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CopySubCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SUBJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.CopySubCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class CopySubCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private CopySubCommandParser parser \u003d new CopySubCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void parse_validArgs_returnsCopySubCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"1 1 2\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new CopySubCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_SECOND_STUDENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"2 3 1\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new CopySubCommand(INDEX_SECOND_STUDENT, INDEX_THIRD_SUBJECT, INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"1 2 3\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new CopySubCommand(INDEX_FIRST_STUDENT, INDEX_SECOND_SUBJECT, INDEX_THIRD_STUDENT));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopySubCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"1\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopySubCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"1 1\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopySubCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"a 1\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopySubCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 35,
      "lywjoel": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteSubCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SUBJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.DeleteSubCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class DeleteSubCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSubCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private DeleteSubCommandParser parser \u003d new DeleteSubCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void parse_validArgs_returnsDeleteSubCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseSuccess(parser, \"1 2\", new DeleteSubCommand(INDEX_FIRST_STUDENT, INDEX_SECOND_SUBJECT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseSuccess(parser, \"2 3\", new DeleteSubCommand(INDEX_SECOND_STUDENT, INDEX_THIRD_SUBJECT));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseSuccess(parser, \"3 1\", new DeleteSubCommand(INDEX_THIRD_STUDENT, INDEX_FIRST_SUBJECT));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Negative student index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(parser, \"-1 1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Zero student index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(parser, \"0 1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Invalid student index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(parser, \"a\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Missing subject index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Negative subject index"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(parser, \"1 -1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Zero subject index"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(parser, \"1 0\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Invalid subject index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(parser, \"1 a\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteSyllCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SYLLABUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUBJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SYLLABUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SUBJECT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SYLLABUS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.DeleteSyllCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class DeleteSyllCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private DeleteSyllCommandParser parser \u003d new DeleteSyllCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void parse_validArgs_returnsDeleteSyllCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"1 1 2\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new DeleteSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_SECOND_SYLLABUS));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"2 3 1\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new DeleteSyllCommand(INDEX_SECOND_STUDENT, INDEX_THIRD_SUBJECT, INDEX_FIRST_SYLLABUS));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"1 2 3\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new DeleteSyllCommand(INDEX_FIRST_STUDENT, INDEX_SECOND_SUBJECT, INDEX_THIRD_SYLLABUS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"1\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"1 1\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"a 1\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 39,
      "lywjoel": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EarningsCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.commands.EarningsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Payment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class EarningsCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void parse_allFieldPresent_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String input \u003d \"8 2018\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        EarningsCommandParser earnings \u003d new EarningsCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseSuccess(earnings, input, new EarningsCommand(8, 2018));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void parse_compulsoryFieldAbsent_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        EarningsCommandParser earning \u003d new EarningsCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        //month missing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String monthInput \u003d \" 2018\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(earning, monthInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                EarningsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        //year missing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String yearInput \u003d \"9\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(earning, yearInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                EarningsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        //all fields missing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String monthYearInput \u003d \" \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(earning, monthYearInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                EarningsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void parse_wrongFieldInput_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        EarningsCommandParser earnings \u003d new EarningsCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongMonthNegativeInput \u003d \" -8 2018\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(earnings, wrongMonthNegativeInput, String.format(Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongMonthOutOfRangeInput \u003d \" 16 2018\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(earnings, wrongMonthOutOfRangeInput,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                String.format(Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongMonthOutOfIntegerRangeInput \u003d \" 2147483648 2018\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(earnings, wrongMonthOutOfIntegerRangeInput,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                String.format(Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongMonthSymbolInput \u003d \" * 2018\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(earnings, wrongMonthSymbolInput, String.format(Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongYearNegativeInput \u003d \" 8 -2018\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(earnings, wrongYearNegativeInput, String.format(Payment.MESSAGE_PAYMENT_YEAR_CONSTRAINTS));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongYearSymbolInput \u003d \" 8 \u0026018\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(earnings, wrongYearSymbolInput, String.format(Payment.MESSAGE_PAYMENT_YEAR_CONSTRAINTS));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongYearOutOfRangeInput \u003d \" 8 20090\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(earnings, wrongYearOutOfRangeInput, String.format(Payment.MESSAGE_PAYMENT_YEAR_CONSTRAINTS));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongYearOutOfIntegerRangeInput \u003d \" 8 2147483648\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseFailure(earnings, wrongYearOutOfIntegerRangeInput,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                String.format(Payment.MESSAGE_PAYMENT_YEAR_CONSTRAINTS));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 73,
      "lywjoel": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Student} being edited,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // multiple invalid values, but only the first invalid subjectName is captured"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void parse_multipleRepeatedFields() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + TAG_DESC_HUSBAND_FRIEND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 1,
      "ongyz": 30,
      "-": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditSyllCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SYLLABUS_DIFFERENTIATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SYLLABUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUBJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SYLLABUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SUBJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SYLLABUS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.EditSyllCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class EditSyllCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditSyllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private EditSyllCommandParser parser \u003d new EditSyllCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // missing all index syllabus present"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"sy/Integration\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // missing two index syllabus present"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"1 sy/Integration\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // missing one index syllabus present"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"1 1 sy/Integration\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"-1 1 1 sy/Integration\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"0 1 1 sy/Integration\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"1 1 1 Integration\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"1 1 1 s/Integration\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabus \u003d new Syllabus(VALID_SYLLABUS_DIFFERENTIATION, true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"1 1 2 sy/Differentiation\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new EditSyllCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_SECOND_SYLLABUS, syllabus));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"2 3 1 sy/Differentiation\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new EditSyllCommand(INDEX_SECOND_STUDENT, INDEX_THIRD_SUBJECT, INDEX_FIRST_SYLLABUS, syllabus));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"1 2 3 sy/Differentiation\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new EditSyllCommand(INDEX_FIRST_STUDENT, INDEX_SECOND_SUBJECT, INDEX_THIRD_SYLLABUS, syllabus));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 66,
      "lywjoel": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GroupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongyz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.GroupCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTimingContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": "public class GroupCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private GroupCommandParser parser \u003d new GroupCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertParseFailure(parser, \" \","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, GroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // does not match day regex"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertParseFailure(parser, \"MONDAY\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, GroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // does not match time regex"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertParseFailure(parser, \"1200\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, GroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void parse_validArgs_returnsGroupCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // valid day regex"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        GroupCommand expectedGroupCommand \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                new GroupCommand("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                        new TuitionTimingContainsKeywordsPredicate(\"Monday\"), true, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertParseSuccess(parser, \"Monday\", expectedGroupCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // valid time regex"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedGroupCommand \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                new GroupCommand("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                        new TuitionTimingContainsKeywordsPredicate(\"12:00pm\"), false, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertParseSuccess(parser, \"12:00pm\", expectedGroupCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongyz": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MarkCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SYLLABUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SUBJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SYLLABUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SUBJECT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SYLLABUS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.MarkCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class MarkCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private MarkCommandParser parser \u003d new MarkCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void parse_validArgs_returnsMarkCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"1 1 2\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new MarkCommand(INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_SECOND_SYLLABUS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"2 3 1\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new MarkCommand(INDEX_SECOND_STUDENT, INDEX_THIRD_SUBJECT, INDEX_FIRST_SYLLABUS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseSuccess(parser, \"1 2 3\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new MarkCommand(INDEX_FIRST_STUDENT, INDEX_SECOND_SUBJECT, INDEX_THIRD_SYLLABUS));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"1\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"1 1\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertParseFailure(parser, \"a 1\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 38,
      "lywjoel": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private static final String VALID_PHONE \u003d \"12345678\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        ParserUtil.parseTags(VALID_TAG_1 + \",\" + INVALID_TAG);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(VALID_TAG_1 + \",\" + VALID_TAG_2);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongyz": 10,
      "-": 193
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PayCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Payment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class PayCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void parse_allFieldPresent_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String input \u003d \"1 200 8 2008\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommandParser pay \u003d new PayCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Payment expectedPayment \u003d new Payment(INDEX_FIRST_STUDENT, 200, 8, 2008);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseSuccess(pay, input, new PayCommand(expectedPayment));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void parse_compulsoryFieldAbsent_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommandParser pay \u003d new PayCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String indexInput \u003d \"200 8 2018\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, indexInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String amountInput \u003d \"1 8 2018\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, amountInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String monthInput \u003d \"1 200 2018\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, monthInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String yearInput \u003d \"1 200 8\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, yearInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT, PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void parse_wrongFieldInput_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        PayCommandParser pay \u003d new PayCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongIndexInput \u003d \"-1 200 8 2018\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, wrongIndexInput, String.format(MESSAGE_INVALID_INDEX,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongAmountInput \u003d \"1 $200 8 2018\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, wrongAmountInput, String.format(Payment.MESSAGE_PAYMENT_AMOUNT_CONSTRAINTS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String outOfBoundAmountInput \u003d \"1 100001 8 2018\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, outOfBoundAmountInput, String.format(Payment.MESSAGE_PAYMENT_AMOUNT_CONSTRAINTS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongMonthInput \u003d \"1 200 16 2018\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, wrongMonthInput, String.format(Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String outOfBoundMonthInput \u003d \"1 200 2147483648 2018\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, outOfBoundMonthInput, String.format(Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongYearInput \u003d \"1 200 8 #2018\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, wrongYearInput, String.format(Payment.MESSAGE_PAYMENT_YEAR_CONSTRAINTS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String wrongYearInputDigits \u003d \"1 200 8 018\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, wrongYearInputDigits, String.format(Payment.MESSAGE_PAYMENT_YEAR_CONSTRAINTS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String outOfBoundYearInputDigits \u003d \"1 200 8 20018\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertParseFailure(pay, outOfBoundYearInputDigits, String.format(Payment.MESSAGE_PAYMENT_YEAR_CONSTRAINTS,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 81,
      "lywjoel": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TutorHelperParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class TutorHelperParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private final TutorHelperParser parser \u003d new TutorHelperParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(StudentUtil.getAddCommand(student));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(new AddCommand(student), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_STUDENT), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + INDEX_FIRST_STUDENT.getOneBased() + \" \" + StudentUtil.getEditStudentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_STUDENT, descriptor), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_STUDENT), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 2,
      "lywjoel": 18,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.testutil.TutorHelperBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        modelManager.hasStudent(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void hasStudent_studentNotInTutorHelper_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void hasStudent_studentInTutorHelper_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        modelManager.addStudent(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        modelManager.getFilteredStudentList().remove(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        TutorHelper tutorHelper \u003d new TutorHelperBuilder().withStudent(ALICE).withStudent(BENSON).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        TutorHelper differentTutorHelper \u003d new TutorHelper();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        modelManager \u003d new ModelManager(tutorHelper, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(tutorHelper, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // different tutorHelper -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTutorHelper, userPrefs)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(tutorHelper, userPrefs)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        differentUserPrefs.setTutorHelperFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(tutorHelper, differentUserPrefs)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 9,
      "lywjoel": 16,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TutorHelperTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUITION_TIMING_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class TutorHelperTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private final TutorHelper tutorHelper \u003d new TutorHelper();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(Collections.emptyList(), tutorHelper.getStudentList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        tutorHelper.resetData(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void resetData_withValidReadOnlyTutorHelper_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        TutorHelper newData \u003d getTypicalTutorHelper();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        tutorHelper.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertEquals(newData, tutorHelper);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void resetData_withDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Two students with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTuitionTiming(VALID_TUITION_TIMING_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cStudent\u003e newStudents \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(DuplicateStudentException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        TutorHelperStub newData \u003d new TutorHelperStub(newStudents);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        tutorHelper.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        tutorHelper.hasStudent(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void hasStudent_studentNotInTutorHelper_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(tutorHelper.hasStudent(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void hasStudent_studentInTutorHelper_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        tutorHelper.addStudent(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(tutorHelper.hasStudent(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void hasStudent_studentWithSameIdentityFieldsInTutorHelper_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        tutorHelper.addStudent(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTuitionTiming(VALID_TUITION_TIMING_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(tutorHelper.hasStudent(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void getStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        tutorHelper.getStudentList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * A stub ReadOnlyTutorHelper whose students list can violate interface constraints."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static class TutorHelperStub implements ReadOnlyTutorHelper {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        TutorHelperStub(Collection\u003cStudent\u003e students) throws DuplicateStudentException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            if (hasDuplicateStudents(students)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            this.students.setAll(students);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            return students;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "         * Returns true if there is multiple student in the given collection."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        private boolean hasDuplicateStudents (Collection\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            List\u003cStudent\u003e studentsList \u003d students.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            if (studentsList.size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            for (int i \u003d 0; i \u003c studentsList.size(); i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                for (int j \u003d i + 1; j \u003c studentsList.size(); j++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                    if (studentsList.get(i).isSameStudent(studentsList.get(j))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 9,
      "SusterDrifter": 14,
      "ongyz": 3,
      "lywjoel": 40,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedTutorHelperTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.testutil.TutorHelperBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class VersionedTutorHelperTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final ReadOnlyTutorHelper tutorHelperWithAmy \u003d new TutorHelperBuilder().withStudent(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final ReadOnlyTutorHelper tutorHelperWithBob \u003d new TutorHelperBuilder().withStudent(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final ReadOnlyTutorHelper tutorHelperWithCarl \u003d new TutorHelperBuilder().withStudent(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private final ReadOnlyTutorHelper emptyTutorHelper \u003d new TutorHelperBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void commit_singleTutorHelper_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList(emptyTutorHelper);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        versionedTutorHelper.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTutorHelperListStatus(versionedTutorHelper,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Collections.singletonList(emptyTutorHelper),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void commit_multipleTutorHelperPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        versionedTutorHelper.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTutorHelperListStatus(versionedTutorHelper,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Arrays.asList(emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                tutorHelperWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void commit_multipleTutorHelperPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTutorHelper, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        versionedTutorHelper.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTutorHelperListStatus(versionedTutorHelper,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Collections.singletonList(emptyTutorHelper),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void canUndo_multipleTutorHelperPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTrue(versionedTutorHelper.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void canUndo_multipleTutorHelperPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTutorHelper, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTrue(versionedTutorHelper.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void canUndo_singleTutorHelper_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList(emptyTutorHelper);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(versionedTutorHelper.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void canUndo_multipleTutorHelperPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTutorHelper, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(versionedTutorHelper.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void canRedo_multipleTutorHelperPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTutorHelper, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTrue(versionedTutorHelper.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void canRedo_multipleTutorHelperPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTutorHelper, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTrue(versionedTutorHelper.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void canRedo_singleTutorHelper_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList(emptyTutorHelper);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(versionedTutorHelper.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void canRedo_multipleTutorHelperPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(versionedTutorHelper.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void undo_multipleTutorHelperPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        versionedTutorHelper.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTutorHelperListStatus(versionedTutorHelper,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Collections.singletonList(emptyTutorHelper),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                tutorHelperWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Collections.singletonList(tutorHelperWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void undo_multipleTutorHelperPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTutorHelper, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        versionedTutorHelper.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTutorHelperListStatus(versionedTutorHelper,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Arrays.asList(tutorHelperWithAmy, tutorHelperWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void undo_singleTutorHelper_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList(emptyTutorHelper);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertThrows(VersionedTutorHelper.NoUndoableStateException.class, versionedTutorHelper::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void undo_multipleTutorHelperPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTutorHelper, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertThrows(VersionedTutorHelper.NoUndoableStateException.class, versionedTutorHelper::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void redo_multipleTutorHelperPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTutorHelper, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        versionedTutorHelper.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTutorHelperListStatus(versionedTutorHelper,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Arrays.asList(emptyTutorHelper, tutorHelperWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                tutorHelperWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void redo_multipleTutorHelperPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTutorHelper, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        versionedTutorHelper.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTutorHelperListStatus(versionedTutorHelper,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Collections.singletonList(emptyTutorHelper),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                tutorHelperWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                Collections.singletonList(tutorHelperWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void redo_singleTutorHelper_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList(emptyTutorHelper);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertThrows(VersionedTutorHelper.NoRedoableStateException.class, versionedTutorHelper::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void redo_multipleTutorHelperPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                emptyTutorHelper, tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertThrows(VersionedTutorHelper.NoRedoableStateException.class, versionedTutorHelper::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d prepareTutorHelperList(tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper copy \u003d prepareTutorHelperList(tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTrue(versionedTutorHelper.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertTrue(versionedTutorHelper.equals(versionedTutorHelper));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(versionedTutorHelper.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(versionedTutorHelper.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper differentTutorHelperList \u003d prepareTutorHelperList(tutorHelperWithBob, tutorHelperWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(versionedTutorHelper.equals(differentTutorHelperList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper differentCurrentStatePointer \u003d prepareTutorHelperList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                tutorHelperWithAmy, tutorHelperWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTutorHelper, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(versionedTutorHelper.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Asserts that {@code versionedTutorHelper} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * states before {@code versionedTutorHelper#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * and states after {@code versionedTutorHelper#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private void assertTutorHelperListStatus(VersionedTutorHelper versionedTutorHelper,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                                             List\u003cReadOnlyTutorHelper\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                                             ReadOnlyTutorHelper expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                                             List\u003cReadOnlyTutorHelper\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertEquals(new TutorHelper(versionedTutorHelper), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        while (versionedTutorHelper.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            versionedTutorHelper.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        for (ReadOnlyTutorHelper expectedTutorHelper : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            assertEquals(expectedTutorHelper, new TutorHelper(versionedTutorHelper));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            versionedTutorHelper.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        for (ReadOnlyTutorHelper expectedTutorHelper : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            versionedTutorHelper.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            assertEquals(expectedTutorHelper, new TutorHelper(versionedTutorHelper));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(versionedTutorHelper.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedTutorHelper.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Creates and returns a {@code VersionedTutorHelper} with the {@code TutorHelperStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * {@code VersionedTutorHelper#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private VersionedTutorHelper prepareTutorHelperList(ReadOnlyTutorHelper... tutorHelperStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(tutorHelperStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        VersionedTutorHelper versionedTutorHelper \u003d new VersionedTutorHelper(tutorHelperStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        for (int i \u003d 1; i \u003c tutorHelperStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            versionedTutorHelper.resetData(tutorHelperStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            versionedTutorHelper.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return versionedTutorHelper;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Shifts the {@code versionedTutorHelper#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedTutorHelper versionedTutorHelper, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            versionedTutorHelper.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 292,
      "lywjoel": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 1,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345678\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withPhone(\"12345678\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 1,
      "lywjoel": 10,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 2,
      "lywjoel": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 8 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 1,
      "lywjoel": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/StudentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student student \u003d new StudentBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        student.getTags().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void isSameStudent() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(ALICE.isSameStudent(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(ALICE.isSameStudent(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // different phone and email and address -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // same name, same email, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student aliceCopy \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 5,
      "ongyz": 3,
      "lywjoel": 27,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/UniqueStudentListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUITION_TIMING_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class UniqueStudentListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private final UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void contains_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.contains(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void contains_studentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void contains_studentInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void contains_studentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTuitionTiming(VALID_TUITION_TIMING_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(uniqueStudentList.contains(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void add_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.add(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void add_duplicateStudent_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(DuplicateStudentException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudent_nullTargetStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.setStudent(null, ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudent_nullEditedStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudent_targetStudentNotInList_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(StudentNotFoundException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudent_editedStudentIsSameStudent_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedUniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudent_editedStudentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedUniqueStudentList.add(editedAlice);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudent_editedStudentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudent_editedStudentHasNonUniqueIdentity_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(DuplicateStudentException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void remove_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.remove(null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void remove_studentDoesNotExist_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(StudentNotFoundException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.remove(ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void remove_existingStudent_removesStudent() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.remove(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudents_nullUniqueStudentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.setStudents((UniqueStudentList) null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudents_uniqueStudentList_replacesOwnListWithProvidedUniqueStudentList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.setStudents(expectedUniqueStudentList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.setStudents((List\u003cStudent\u003e) null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.setStudents(studentList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void setStudents_listWithDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(DuplicateStudentException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.setStudents(listWithDuplicateStudents);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uniqueStudentList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/model/subject/SubjectTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.subject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class SubjectTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Subject.makeSubject(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void constructor_invalidSubjectName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String invalidSubjectName \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Subject.makeSubject(invalidSubjectName));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void removeMethod_outOfBounds_throwsCommandException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject subject \u003d Subject.makeSubject(\"Economics\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e subject.remove(Index.fromOneBased(2)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void toggleStateMethod_outOfBounds_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject subject \u003d Subject.makeSubject(\"Economics\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(CommandException.class, () -\u003e subject.toggleState(Index.fromOneBased(2)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void test_containSyllabus_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject subject \u003d Subject.makeSubject(\"Physics\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusOne \u003d Syllabus.makeSyllabus(\"Quantum Physics\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusTwo \u003d Syllabus.makeSyllabus(\"Kinetics\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusThree \u003d Syllabus.makeSyllabus(\"Nuclear Physics\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e syllabuses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        syllabuses.add(syllabusTwo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        syllabuses.add(syllabusThree);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject updatedSubject \u003d subject.add(syllabusOne).append(syllabuses);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(updatedSubject.contains(syllabusOne));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(updatedSubject.contains(syllabusTwo));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(updatedSubject.contains(syllabusThree));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void test_containSyllabus_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject subject \u003d Subject.makeSubject(\"Biology\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusOne \u003d Syllabus.makeSyllabus(\"Molecular Biology\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusTwo \u003d Syllabus.makeSyllabus(\"Evolution\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusThree \u003d Syllabus.makeSyllabus(\"Plant Transportation\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSyllabus\u003e syllabuses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        syllabuses.add(syllabusThree);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(subject.contains(syllabusOne));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subject.append(syllabuses);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(subject.contains(syllabusTwo));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void isValidSubjectName() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // null subject name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e SubjectType.isValidSubjectName(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // empty subject name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e SubjectType.isValidSubjectName(\"\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e SubjectType.isValidSubjectName(\" \"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // invalid subject"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(SubjectType.isValidSubjectName(\"-\")); // one character"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(SubjectType.isValidSubjectName(\"Book\")); // non valid Subject name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // valid subject"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"Mathematics\")); // full name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"Math\")); // partial name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"Mathe\")); // partial name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"mATh\")); // partial name"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"MATH\")); // partial name in uppercase"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"math\")); // partial name in lowercase"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void isEqualSubject() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject biology \u003d Subject.makeSubject(\"Biology\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject biologyPartial \u003d Subject.makeSubject(\"bio\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject mathematics \u003d Subject.makeSubject(\"Mathematics\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject mathematicsUppercase \u003d Subject.makeSubject(\"MATHEMATICS\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject physics \u003d new Subject(SubjectType.Physics, new ArrayList\u003c\u003e(), 0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject physicsFilled \u003d physics.add(Syllabus.makeSyllabus(\"Quantum Physics\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // Identity check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(biology.equals(biology));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(biology.equals(biologyPartial));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(mathematics.equals(mathematicsUppercase));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // True by type"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(physics.hasTypeOf(physicsFilled.getSubjectType()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // True even though different content"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(physics.equals(physicsFilled));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // False due to different subjectType"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(mathematics.equals(biology));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(mathematicsUppercase.equals(biologyPartial));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void isCompletionRateUpdating() throws CommandException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject subject \u003d Subject.makeSubject(\"Chemistry\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject updatedSubject \u003d subject.add(Syllabus.makeSyllabus(\"Kinetics\"))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                                        .add(Syllabus.makeSyllabus(\"Organic Chemistry\"))"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                                        .toggleState(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertEquals(0.5f, updatedSubject.getCompletionRate(), 0.001);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject markedSubject \u003d updatedSubject.toggleState(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertEquals(1.0f, markedSubject.getCompletionRate(), 0.001);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject unmarkedSubject \u003d markedSubject.toggleState(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertEquals(0.5f, unmarkedSubject.getCompletionRate(), 0.001);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 139,
      "lywjoel": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/subject/SubjectTypeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.subject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class SubjectTypeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void isSameType() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        SubjectType subjectTypeOne \u003d SubjectType.convertStringToSubjectName(\"Math\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        SubjectType subjectTypeTwo \u003d SubjectType.convertStringToSubjectName(\"Mathematics\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        SubjectType subjectTypeThree \u003d SubjectType.convertStringToSubjectName(\"maTHemAtics\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        SubjectType subjectTypeFour \u003d SubjectType.convertStringToSubjectName(\"Math\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        SubjectType subjectTypeFive \u003d SubjectType.convertStringToSubjectName(\"maTh\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        SubjectType subjectTypeSix \u003d SubjectType.convertStringToSubjectName(\"Bio\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // True due to same type"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(subjectTypeOne.equals(subjectTypeTwo));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(subjectTypeOne.equals(subjectTypeThree));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(subjectTypeOne.equals(subjectTypeFour));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(subjectTypeOne.equals(subjectTypeFive));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // True due to different type"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(subjectTypeOne.equals(subjectTypeSix));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // unregistered subject names"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(SubjectType.isValidSubjectName(\"Animal\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(SubjectType.isValidSubjectName(\"-\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"Math\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"Mathematics\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"maTHematics\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"math\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectType.isValidSubjectName(\"mATH\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Syllabus.isValidSyllabus(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/subject/SyllabusTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.subject;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class SyllabusTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Syllabus.makeSyllabus(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void constructor_invalidSyllabus_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String invalidSyllabus \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Syllabus.makeSyllabus(invalidSyllabus));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void isValidSyllabus() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // null syllabus"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Syllabus.isValidSyllabus(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // invalid syllabus"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(Syllabus.isValidSyllabus(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(Syllabus.isValidSyllabus(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // valid syllabus"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(Syllabus.isValidSyllabus(\"Kinetics\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(Syllabus.isValidSyllabus(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(Syllabus.isValidSyllabus(\"Evolution in Mammals\")); // multiple words"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void isEqualSyllabus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabus \u003d Syllabus.makeSyllabus(\"Art in Modern Times\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusTwo \u003d Syllabus.makeSyllabus(\"Art in Modern Times\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusThree \u003d Syllabus.makeSyllabus(\"Art in the 90s\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // Identity check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(syllabus.equals(syllabus));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // True due to same content"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(syllabus.equals(syllabusTwo));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // False due to different content"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(syllabus.equals(syllabusThree));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tuitiontiming/TuitionTimingContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.tuitiontiming;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class TuitionTimingContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String firstPredicateKeywordList \u003d \"first\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String secondPredicateKeywordList \u003d \"second\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        TuitionTimingContainsKeywordsPredicate firstPredicate \u003d new TuitionTimingContainsKeywordsPredicate("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        TuitionTimingContainsKeywordsPredicate secondPredicate \u003d new TuitionTimingContainsKeywordsPredicate("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        TuitionTimingContainsKeywordsPredicate firstPredicateCopy \u003d new TuitionTimingContainsKeywordsPredicate("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void test_tuitionTimingContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student student \u003d new StudentBuilder().withTuitionTiming(\"Monday 12:00pm\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //keyword follows day regex"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        TuitionTimingContainsKeywordsPredicate predicate \u003d new TuitionTimingContainsKeywordsPredicate(\"Monday\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(predicate.test(student));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //keyword follows time regex"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        predicate \u003d new TuitionTimingContainsKeywordsPredicate(\"12:00pm\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(predicate.test(student));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void test_tuitionTimingDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student student \u003d new StudentBuilder().withTuitionTiming(\"Monday 12:00pm\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //Zero keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        TuitionTimingContainsKeywordsPredicate predicate \u003d new TuitionTimingContainsKeywordsPredicate(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(predicate.test(student));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //Non-matching keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        predicate \u003d new TuitionTimingContainsKeywordsPredicate(\"Tuesday\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(predicate.test(student));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        predicate \u003d new TuitionTimingContainsKeywordsPredicate(\"1:00pm\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(predicate.test(student));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 57,
      "lywjoel": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tuitiontiming/TuitionTimingTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.model.tuitiontiming;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class TuitionTimingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TuitionTiming(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void constructor_invalidTuitionTiming_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String invalidTiming \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TuitionTiming(invalidTiming));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void isValidTiming() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        // null tuition timing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e TuitionTiming.isValidTiming(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        // invalid tuition timing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(TuitionTiming.isValidTiming(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(TuitionTiming.isValidTiming(\"Monday\")); // day only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(TuitionTiming.isValidTiming(\"MONDAY 12:00PM\")); //day in caps"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(TuitionTiming.isValidTiming(\"12:00pm\")); // time only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(TuitionTiming.isValidTiming(\"12:00pm Monday\")); // wrong format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertFalse(TuitionTiming.isValidTiming(\"Monday 13:00pm\")); //invalid timing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        // valid tuition timing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertTrue(TuitionTiming.isValidTiming(\"Monday 12:00pm\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertTrue(TuitionTiming.isValidTiming(\"Saturday 11:00am\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertTrue(TuitionTiming.isValidTiming(\"Tuesday 5:00PM\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertTrue(TuitionTiming.isValidTiming(\"Sunday 10:30AM\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 40,
      "lywjoel": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/SubjectsUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SYLLABUS_DIFFERENTIATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUITION_TIMING_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.SubjectType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class SubjectsUtilTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * All the the test under SubjectsUtilTest will be done based on the following student."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public final Student sourceAmy \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                                        .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                                        .withSubjects(VALID_SUBJECT_AMY).withTuitionTiming(VALID_TUITION_TIMING_AMY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                                        .withSyllabus(INDEX_FIRST_SUBJECT, VALID_SYLLABUS_DIFFERENTIATION)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                                        .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_copySubject() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject copiedSubject \u003d SubjectsUtil.copySubjectFrom(sourceAmy, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject trueSubject \u003d new ArrayList\u003c\u003e(sourceAmy.getSubjects()).get(INDEX_FIRST_SUBJECT.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // Equivalent under equals() method"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(copiedSubject.equals(trueSubject));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // Not equivalent under identity check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(copiedSubject \u003d\u003d trueSubject);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_hasSubject_returnsBoolean() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(SubjectsUtil.hasSubject(sourceAmy, SubjectType.Mathematics));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(SubjectsUtil.hasSubject(sourceAmy, SubjectType.Biology));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(SubjectsUtil.hasSubject(sourceAmy, SubjectType.History));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(SubjectsUtil.hasSubject(sourceAmy, SubjectType.Chemistry));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_findSubjectIndex_returnOptionalWithValuePresent() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Optional\u003cIndex\u003e index \u003d SubjectsUtil.findSubjectIndex(sourceAmy, SubjectType.Mathematics);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertEquals(index.get(), INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void execute_findSubjectIndex_returnEmptyOptional() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Optional\u003cIndex\u003e index \u003d SubjectsUtil.findSubjectIndex(sourceAmy, SubjectType.Chemistry);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        thrown.expect(NoSuchElementException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        index.get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void execute_createStudentWithNewSubjects() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(sourceAmy.getSubjects());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjects.add(Subject.makeSubject(\"Chemistry\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student newStudent \u003d SubjectsUtil.createStudentWithNewSubjects(sourceAmy, new HashSet\u003c\u003e(subjects));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // Equivalent under isSameStudent()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(newStudent.isSameStudent(sourceAmy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // Non-equivalent under equals"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertNotEquals(newStudent, sourceAmy);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // Number of subject should increase"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(newStudent.getSubjects().size() \u003e sourceAmy.getSubjects().size());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 86,
      "lywjoel": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        userPrefs.setTutorHelperFilePath(Paths.get(\"tutorhelper.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.commons.events.model.TutorHelperChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ReadOnlyTutorHelper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlTutorHelperStorage tutorHelperStorage \u003d new XmlTutorHelperStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        storageManager \u003d new StorageManager(tutorHelperStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void tutorHelperReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "         * {@link XmlTutorHelperStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlTutorHelperStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        TutorHelper original \u003d getTypicalTutorHelper();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        storageManager.saveTutorHelper(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        ReadOnlyTutorHelper retrieved \u003d storageManager.readTutorHelper().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertEquals(original, new TutorHelper(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void getTutorHelperFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertNotNull(storageManager.getTutorHelperFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void handleTutorHelperChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlTutorHelperStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        storage.handleTutorHelperChangedEvent(new TutorHelperChangedEvent(new TutorHelper()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    class XmlTutorHelperStorageExceptionThrowingStub extends XmlTutorHelperStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        public XmlTutorHelperStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        public void saveTutorHelper(ReadOnlyTutorHelper tutorHelper, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 20,
      "lywjoel": 1,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Payment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class XmlAdaptedPayTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"$233\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String INVALID_MONTH_NOT_INTEGER \u003d \"NOVEMBER\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String INVALID_MONTH_WRONG_RANGE \u003d \"16\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String INVALID_YEAR \u003d \"TwoThousand\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final Index VALID_INDEX \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"200\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String VALID_MONTH \u003d \"11\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String VALID_YEAR \u003d \"2018\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Payment pay \u003d new Payment(Index.fromOneBased(1), 200, 11, 2018);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay payment \u003d new XmlAdaptedPay(VALID_INDEX, VALID_AMOUNT, VALID_MONTH, VALID_YEAR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertEquals(pay, payment.toModelType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay pay \u003d new XmlAdaptedPay(VALID_INDEX, INVALID_AMOUNT, VALID_MONTH, VALID_YEAR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage \u003d PayCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, expectedMessage, pay::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay pay \u003d new XmlAdaptedPay(VALID_INDEX, null, VALID_MONTH, VALID_YEAR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage \u003d PayCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, expectedMessage, pay::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void toModelType_invalidMonth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay pay \u003d new XmlAdaptedPay(VALID_INDEX, VALID_AMOUNT, INVALID_MONTH_NOT_INTEGER, VALID_YEAR);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage \u003d PayCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, expectedMessage, pay::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay pay2 \u003d new XmlAdaptedPay(VALID_INDEX, VALID_AMOUNT, INVALID_MONTH_WRONG_RANGE, VALID_YEAR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage2 \u003d Payment.MESSAGE_PAYMENT_MONTH_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage2, pay2::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void toModelType_nullMonth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay pay \u003d new XmlAdaptedPay(VALID_INDEX, VALID_AMOUNT, null, VALID_YEAR);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage \u003d PayCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, expectedMessage, pay::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void toModelType_invalidYear_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay pay \u003d new XmlAdaptedPay(VALID_INDEX, VALID_AMOUNT, VALID_MONTH, INVALID_YEAR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage \u003d PayCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, expectedMessage, pay::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void toModelType_nullYear_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedPay pay \u003d new XmlAdaptedPay(VALID_INDEX, VALID_AMOUNT, VALID_MONTH, INVALID_YEAR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        String expectedMessage \u003d PayCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, expectedMessage, pay::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 90,
      "lywjoel": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedStudentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.storage.XmlAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class XmlAdaptedStudentTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final String INVALID_SUBJECT \u003d \"javanese\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private static final String INVALID_TUITION_TIMING \u003d \"Friday 10.00pm\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static final String INVALID_MONTH \u003d \"16\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"$200\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static final String INVALID_YEAR \u003d \"$$22\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final String VALID_TUITION_TIMING \u003d BENSON.getTuitionTiming().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final List\u003cXmlAdaptedSubject\u003e VALID_SUBJECTS \u003d BENSON.getSubjects().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .map(XmlAdaptedSubject::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final List\u003cXmlAdaptedPay\u003e VALID_PAYMENT \u003d BENSON.getPayments().stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .map(XmlAdaptedPay::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(BENSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(BENSON, student.toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                        VALID_SUBJECTS, VALID_TUITION_TIMING, invalidTags, VALID_PAYMENT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, student::toModelType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void toModelType_invalidSubject_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        List\u003cXmlAdaptedSubject\u003e invalidSubject \u003d new ArrayList\u003c\u003e(VALID_SUBJECTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlAdaptedSyllabus syllabus \u003d new XmlAdaptedSyllabus(new Syllabus(\"Integration\", true));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        List\u003cXmlAdaptedSyllabus\u003e s \u003d new ArrayList\u003cXmlAdaptedSyllabus\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        s.add(syllabus);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        invalidSubject.add(new XmlAdaptedSubject(INVALID_SUBJECT, s, (float) 0.7));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                        invalidSubject, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String expectedMessage \u003d Subject.MESSAGE_SUBJECT_CONSTRAINTS;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void toModelType_nullSubject_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                null, VALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void toModelType_invalidTuitionTiming_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                        VALID_SUBJECTS, INVALID_TUITION_TIMING, VALID_TAGS, VALID_PAYMENT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String expectedMessage \u003d TuitionTiming.MESSAGE_TUITION_TIMING_CONSTRAINTS;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void toModelType_invalidPayment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        List\u003cXmlAdaptedPay\u003e invalidPayment \u003d new ArrayList\u003c\u003e(VALID_PAYMENT);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        invalidPayment.add(new XmlAdaptedPay(Index.fromOneBased(2), INVALID_AMOUNT, INVALID_MONTH, INVALID_YEAR));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                        VALID_SUBJECTS, VALID_TUITION_TIMING, VALID_TAGS, invalidPayment);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, student::toModelType);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 23,
      "SusterDrifter": 15,
      "andlimey": 20,
      "lywjoel": 41,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableTutorHelperTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class XmlSerializableTutorHelperTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableTutorHelperTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final Path TYPICAL_STUDENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalStudentsTutorHelper.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final Path INVALID_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentTutorHelper.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateStudentTutorHelper.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void toModelType_typicalStudentsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlSerializableTutorHelper dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_STUDENTS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                XmlSerializableTutorHelper.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        TutorHelper tutorHelperFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        TutorHelper typicalStudentsTutorHelper \u003d TypicalStudents.getTypicalTutorHelper();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(tutorHelperFromFile, typicalStudentsTutorHelper);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlSerializableTutorHelper dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_STUDENT_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                XmlSerializableTutorHelper.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void toModelType_duplicateStudents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlSerializableTutorHelper dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_STUDENT_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                XmlSerializableTutorHelper.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        thrown.expectMessage(XmlSerializableTutorHelper.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 7,
      "lywjoel": 13,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlTutorHelperStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalTutorHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ReadOnlyTutorHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class XmlTutorHelperStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlTutorHelperStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void readTutorHelper_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        readTutorHelper(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTutorHelper\u003e readTutorHelper(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return new XmlTutorHelperStorage(Paths.get(filePath)).readTutorHelper(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertFalse(readTutorHelper(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        readTutorHelper(\"NotXmlFormatTutorHelper.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void readTutorHelper_invalidStudentTutorHelper_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        readTutorHelper(\"invalidStudentTutorHelper.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void readTutorHelper_invalidAndValidStudentTutorHelper_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        readTutorHelper(\"invalidAndValidStudentTutorHelper.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void readAndSaveTutorHelper_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempTutorHelper.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        TutorHelper original \u003d getTypicalTutorHelper();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        XmlTutorHelperStorage xmlTutorHelperStorage \u003d new XmlTutorHelperStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        xmlTutorHelperStorage.saveTutorHelper(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        ReadOnlyTutorHelper readBack \u003d xmlTutorHelperStorage.readTutorHelper(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertEquals(original, new TutorHelper(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        original.addStudent(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        original.removeStudent(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        xmlTutorHelperStorage.saveTutorHelper(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        readBack \u003d xmlTutorHelperStorage.readTutorHelper(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertEquals(original, new TutorHelper(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        original.addStudent(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        xmlTutorHelperStorage.saveTutorHelper(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        readBack \u003d xmlTutorHelperStorage.readTutorHelper().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertEquals(original, new TutorHelper(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void saveTutorHelper_nullTutorHelper_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        saveTutorHelper(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * Saves {@code TutorHelper} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private void saveTutorHelper(ReadOnlyTutorHelper tutorHelper, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            new XmlTutorHelperStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "                    .saveTutorHelper(tutorHelper, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void saveTutorHelper_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        saveTutorHelper(new TutorHelper(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 31,
      "lywjoel": 11,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditStudentDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Payment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * A utility class to help with building EditStudentDescriptor objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private EditStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public EditStudentDescriptorBuilder(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        this.descriptor \u003d new EditStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setPhone(student.getPhone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setEmail(student.getEmail());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setAddress(student.getAddress());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setSubjects(student.getSubjects());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setTuitionTiming(student.getTuitionTiming());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setTags(student.getTags());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public EditStudentDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public EditStudentDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code Address} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public EditStudentDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code Subject} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public EditStudentDescriptorBuilder withSubject(Set\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setSubjects((subjects !\u003d null) ? new HashSet\u003c\u003e(subjects) : null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code TuitionTiming} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public EditStudentDescriptorBuilder withTuitionTiming(String tuitionTiming) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setTuitionTiming(new TuitionTiming(tuitionTiming));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code psayment} into a {@code List\u003cPayment\u003e} and set it to the {@code EditStudentDescriptor} that we"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public EditStudentDescriptorBuilder withPayments(List\u003cPayment\u003e payments) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setPayments((payments !\u003d null) ? new ArrayList\u003c\u003e(payments) : null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets an empty {@code List\u003cPayment\u003e} and set it to the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public EditStudentDescriptorBuilder withEmptyPayments() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setPayments(null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditStudentDescriptor}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public EditStudentDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public EditStudentDescriptor build() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getSyllabusList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Payment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alex Tan\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"94351253\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String DEFAULT_SUBJECT \u003d \"Chemistry\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public static final String DEFAULT_TUITION_TIMING \u003d \"Monday 6:00pm\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private Set\u003cSubject\u003e subjects \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private TuitionTiming tuitionTiming;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private List\u003cPayment\u003e payments;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjects.add(Subject.makeSubject(DEFAULT_SUBJECT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        tuitionTiming \u003d new TuitionTiming(DEFAULT_TUITION_TIMING);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        payments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        phone \u003d studentToCopy.getPhone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        email \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        address \u003d studentToCopy.getAddress();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        subjects \u003d studentToCopy.getSubjects();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        tuitionTiming \u003d studentToCopy.getTuitionTiming();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        payments \u003d new ArrayList\u003c\u003e(studentToCopy.getPayments());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code Address} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code Phone} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code Subject} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentBuilder withSubjects(String ... subjectArray) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        this.subjects \u003d SampleDataUtil.getSubjectSet(subjectArray);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code Syllabus} of the {@code Subject} for the {@code Student} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentBuilder withSyllabus(Index subjectIndex, String ... syllabusArray) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Subject selectedSubject \u003d new ArrayList\u003c\u003e(subjects)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .get(subjectIndex.getZeroBased())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .append(getSyllabusList(syllabusArray));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        List\u003cSubject\u003e newSubjectsList \u003d new ArrayList\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        newSubjectsList.set(subjectIndex.getZeroBased(), selectedSubject);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        this.subjects \u003d new HashSet\u003c\u003e(newSubjectsList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code TuitionTiming} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentBuilder withTuitionTiming(String tuitionTiming) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        this.tuitionTiming \u003d new TuitionTiming(tuitionTiming);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code Payment} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentBuilder withPayments(String ... paymentArray) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        for (String payment: paymentArray) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            String[] separatedPayment \u003d payment.split(\"\\\\s\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            this.payments.add(new Payment("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    Index.fromOneBased(Integer.valueOf(separatedPayment[0])),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    Integer.valueOf(separatedPayment[1]),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    Integer.valueOf(separatedPayment[2]),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    Integer.valueOf(separatedPayment[3])"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Sets the {@code Payment} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentBuilder withPayments(Payment ... paymentArray) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        for (Payment payment: paymentArray) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            this.payments.add(payment);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Replaces the {@code Syllabus} of the {@code Subject} of the {@code Student} we are building."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public StudentBuilder replaceSyllabus(Index subjectIndex, Index syllabusIndex, String syllabus) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Syllabus selectedSubject \u003d new ArrayList\u003c\u003e(subjects)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .get(subjectIndex.getZeroBased())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .getSubjectContent()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .set(syllabusIndex.getZeroBased(), new Syllabus(syllabus, false));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return new Student(name, phone, email, address, subjects, tuitionTiming, tags, payments);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Builds a default subject set."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @return the set of subject."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private static Set\u003cSubject\u003e subjectBuilder() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Set\u003cSubject\u003e subjectSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjectSet.add(Subject.makeSubject(\"Mathematics\"));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return subjectSet;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 9,
      "SusterDrifter": 18,
      "ongyz": 35,
      "andlimey": 23,
      "lywjoel": 44,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_AND_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns an add command string for adding the {@code student}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static String getAddCommand(Student student) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        sb.append(PREFIX_PHONE + student.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        sb.append(PREFIX_ADDRESS + student.getAddress().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        student.getSubjects().stream().forEach("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            s -\u003e sb.append(PREFIX_SUBJECT + s.getSubjectName() + \" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        sb.append(PREFIX_DAY_AND_TIME + student.getTuitionTiming().toString() + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        student.getTags().stream().forEach("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static String getEditStudentDescriptorDetails(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        if (descriptor.getSubjects().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            Set\u003cSubject\u003e subjects \u003d descriptor.getSubjects().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            if (subjects.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                sb.append(PREFIX_SUBJECT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                subjects.forEach(s -\u003e sb.append(PREFIX_SUBJECT).append(s.getSubjectName()).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        descriptor.getTuitionTiming().ifPresent(tuitionTiming -\u003e sb.append(PREFIX_DAY_AND_TIME)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .append(tuitionTiming.toString()).append(\" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 8,
      "SusterDrifter": 15,
      "lywjoel": 18,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns the middle index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns the last index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns the student in the {@code model}\u0027s student list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static Student getStudent(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return model.getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TutorHelperBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " * A utility class to help with building TutorHelper objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " *     {@code TutorHelper ab \u003d new TutorHelperBuilder().withStudent(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class TutorHelperBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private TutorHelper tutorHelper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public TutorHelperBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        tutorHelper \u003d new TutorHelper();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public TutorHelperBuilder(TutorHelper tutorHelper) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        this.tutorHelper \u003d tutorHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Adds a new {@code Student} to the {@code TutorHelper} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public TutorHelperBuilder withStudent(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        tutorHelper.addStudent(student);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public TutorHelper build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return tutorHelper;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 29,
      "lywjoel": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Index INDEX_FIRST_STUDENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Index INDEX_SECOND_STUDENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Index INDEX_THIRD_STUDENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final Index INDEX_FIRST_SUBJECT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final Index INDEX_SECOND_SUBJECT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final Index INDEX_THIRD_SUBJECT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final Index INDEX_FIRST_SYLLABUS \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final Index INDEX_SECOND_SYLLABUS \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public static final Index INDEX_THIRD_SYLLABUS \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 10,
      "lywjoel": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalStudents.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_ALCYONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BILLY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_CABBAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_CATHY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_DAISY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_ALCYONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BILLY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_CABBAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_CATHY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_DAISY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ALCYONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BILLY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CABBAGE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CATHY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DAISY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_ALCYONE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BILLY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_CABBAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_CATHY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_DAISY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_ALCYONE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BILLY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_CABBAGE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_CATHY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_DAISY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUITION_TIMING_ALCYONE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUITION_TIMING_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUITION_TIMING_BILLY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUITION_TIMING_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUITION_TIMING_CABBAGE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUITION_TIMING_CATHY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUITION_TIMING_DAISY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            ALICE \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withPhone(\"94351253\").withSubjects(\"Mathematics\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withSyllabus(Index.fromOneBased(1), \"Integration\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withTuitionTiming(\"Tuesday 8:00pm\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student BENSON \u003d new StudentBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withPhone(\"98765432\").withSubjects(\"Chemistry\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withSyllabus(Index.fromOneBased(1), \"Kinetics\", \"Organic Chemistry\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withTuitionTiming(\"Monday 5:00pm\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withPayments(\"2 200 11 2018\", \"2 300 12 2018\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student CARL \u003d new StudentBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withPhone(\"95352563\").withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withAddress(\"Wall street\").withSubjects(\"Mathematics\", \"Physics\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withSyllabus(Index.fromOneBased(1), \"Calculus II\", \"Statistics I\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withTuitionTiming(\"Saturday 1:00pm\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student DANIEL \u003d new StudentBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withPhone(\"87652533\").withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withAddress(\"10th street\").withSubjects(\"Mathematics\", \"Physics\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withSyllabus(Index.fromOneBased(1), \"Calculus II\", \"Statistics I\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withTuitionTiming(\"Saturday 3:00pm\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withPhone(\"94822240\").withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withAddress(\"Michegan ave\").withSubjects(\"Economics\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withSyllabus(Index.fromOneBased(1), \"Demand and Supply\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withTuitionTiming(\"Sunday 11:00am\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withPhone(\"94824270\").withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withAddress(\"little tokyo\").withSubjects(\"Chemistry\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withSyllabus(Index.fromOneBased(1), \"Organic Chemistry\", \"Acids and Bases\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withTuitionTiming(\"Thursday 3:30pm\").build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withPhone(\"94824420\").withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withAddress(\"4th street\").withSubjects(\"Economics\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withSyllabus(Index.fromOneBased(1), \"Macroeconomics\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withTuitionTiming(\"Friday 5:00pm\").build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withPhone(\"84824240\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withSubjects(\"Mathematics\").withTuitionTiming(\"Monday 8:00pm\").build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withPhone(\"84821310\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withSubjects(\"Physics\").withTuitionTiming(\"Wednesday 6:00pm\").build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withSubjects(VALID_SUBJECT_AMY).withTuitionTiming(VALID_TUITION_TIMING_AMY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            .withSubjects(VALID_SUBJECT_BOB).withTuitionTiming(VALID_TUITION_TIMING_BOB)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student CATHY \u003d new StudentBuilder().withName(VALID_NAME_CATHY).withPhone(VALID_PHONE_CATHY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withEmail(VALID_EMAIL_CATHY).withAddress(VALID_ADDRESS_CATHY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            .withSubjects(VALID_SUBJECT_CATHY).withTuitionTiming(VALID_TUITION_TIMING_CATHY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    //For Payments"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student ALCYONE \u003d new StudentBuilder().withName(VALID_NAME_ALCYONE)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withPhone(VALID_PHONE_ALCYONE).withEmail(VALID_EMAIL_ALCYONE).withAddress(VALID_ADDRESS_ALCYONE)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withSubjects(VALID_SUBJECT_ALCYONE).withTuitionTiming(VALID_TUITION_TIMING_ALCYONE)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).withPayments(\"1 200 2 2018\").build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student BILLY \u003d new StudentBuilder().withName(VALID_NAME_BILLY).withPhone(VALID_PHONE_BILLY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withEmail(VALID_EMAIL_BILLY).withAddress(VALID_ADDRESS_BILLY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withSubjects(VALID_SUBJECT_BILLY).withTuitionTiming(VALID_TUITION_TIMING_BILLY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withPayments(\"2 200 2 2018\").build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student CABBAGE \u003d new StudentBuilder().withName(VALID_NAME_CABBAGE)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            .withPhone(VALID_PHONE_CABBAGE).withEmail(VALID_EMAIL_CABBAGE).withAddress(VALID_ADDRESS_CABBAGE)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withSubjects(VALID_SUBJECT_CABBAGE).withTuitionTiming(VALID_TUITION_TIMING_CABBAGE)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withPayments(\"3 300 3 2018\").build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final Student DAISY \u003d new StudentBuilder().withName(VALID_NAME_DAISY).withPhone(VALID_PHONE_DAISY)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withEmail(VALID_EMAIL_DAISY).withAddress(VALID_ADDRESS_DAISY)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withSubjects(VALID_SUBJECT_DAISY).withTuitionTiming(VALID_TUITION_TIMING_DAISY)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            .withPayments(\"4 400 3 2018\").build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static final String KEYWORD_MATCHING_ALICE \u003d \"Alice\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns an {@code TutorHelper} with all the typical students."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static TutorHelper getTypicalTutorHelper() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        TutorHelper ab \u003d new TutorHelper();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            ab.addStudent(student);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns an {@code TutorHelper} with all the typical students with payments inclusive."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public static TutorHelper getTypicalTutorHelperWithPayments() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        TutorHelper ab \u003d new TutorHelper();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        for (Student student : getTypicalStudentsWithPayments()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            ab.addStudent(student);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudentsWithPayments() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALCYONE, BILLY, CABBAGE, DAISY));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static List\u003cIndex\u003e getSameSubjectStudentsIndexes() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(Index.fromOneBased(1), Index.fromOneBased(3), Index.fromOneBased(4)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static List\u003cIndex\u003e getDifferentSubjectStudentIndexes() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(Index.fromOneBased(1), Index.fromOneBased(2), Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 50,
      "SusterDrifter": 1,
      "ongyz": 43,
      "andlimey": 15,
      "lywjoel": 38,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.StudentPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private StudentPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new StudentPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // default view"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Student expectedDefaultStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertEquals(expectedDefaultStudent, browserPanelHandle.getLoadedStudent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        // associated page of a student"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertTrue(ALICE.isSameStudent(browserPanelHandle.getLoadedStudent()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 11,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": " * A GUI unit test class for TutorHelper."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.commons.events.model.TutorHelperChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    private static final TutorHelperChangedEvent EVENT_STUB \u003d new TutorHelperChangedEvent(new TutorHelper());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // after TutorHelper is updated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 3,
      "lywjoel": 1,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StudentCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysStudent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import guitests.guihandles.StudentCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class StudentCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentWithNoTags \u003d new StudentBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        StudentCard studentCard \u003d new StudentCard(studentWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uiPartRule.setUiPart(studentCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCardDisplay(studentCard, studentWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentWithTags \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentCard \u003d new StudentCard(studentWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uiPartRule.setUiPart(studentCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCardDisplay(studentCard, studentWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        StudentCard studentCard \u003d new StudentCard(student, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // same student, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        StudentCard copy \u003d new StudentCard(student, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(studentCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(studentCard.equals(studentCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(studentCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(studentCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // different student, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student differentStudent \u003d new StudentBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(studentCard.equals(new StudentCard(differentStudent, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // same student, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(studentCard.equals(new StudentCard(student, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Asserts that {@code studentCard} displays the details of {@code expectedStudent} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCardDisplay(StudentCard studentCard, Student expectedStudent, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        StudentCardHandle studentCardHandle \u003d new StudentCardHandle(studentCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", studentCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // verify student details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCardDisplaysStudent(expectedStudent, studentCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StudentListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalStudents;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysStudent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import guitests.guihandles.StudentCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import guitests.guihandles.StudentListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.storage.XmlSerializableTutorHelper;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class StudentListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final ObservableList\u003cStudent\u003e TYPICAL_STUDENTS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            FXCollections.observableList(getTypicalStudents());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private StudentListPanelHandle studentListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        initUi(TYPICAL_STUDENTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_STUDENTS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            studentListPanelHandle.navigateToCard(TYPICAL_STUDENTS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            Student expectedStudent \u003d TYPICAL_STUDENTS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            StudentCardHandle actualCard \u003d studentListPanelHandle.getStudentCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            assertCardDisplaysStudent(expectedStudent, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        initUi(TYPICAL_STUDENTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        StudentCardHandle expectedStudent \u003d studentListPanelHandle"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .getStudentCardHandle(INDEX_SECOND_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        StudentCardHandle selectedStudent \u003d studentListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCardEquals(expectedStudent, selectedStudent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Verifies that creating and deleting large number of students in {@code StudentListPanel} requires lesser than"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        ObservableList\u003cStudent\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }, \"Creation and deletion of student cards exceeded time limit\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns a list of students containing {@code studentCount} students that is used to populate the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code StudentListPanel}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private ObservableList\u003cStudent\u003e createBackingList(int studentCount) throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithStudents(studentCount);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        XmlSerializableTutorHelper xmlTutorHelper \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableTutorHelper.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return FXCollections.observableArrayList(xmlTutorHelper.toModelType().getStudentList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns a .xml file containing {@code studentCount} students. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Path createXmlFileWithStudents(int studentCount) throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        builder.append(\"\u003cTutorHelper\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        for (int i \u003d 0; i \u003c studentCount; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            builder.append(\"\u003cstudents\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            builder.append(\"\u003cname\u003ea\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            builder.append(\"\u003cphone\u003e\" + (10000000 + i) + \"\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            builder.append(\"\u003cemail\u003e\" + i + \"@example.com\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            builder.append(\"\u003caddress\u003e\" + i + \"\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            builder.append(\"\u003ctuitionTiming\u003eMonday 6:00pm\u003c/tuitionTiming\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            builder.append(\"\u003csubjects subjectName\u003d\\\"Biology\\\" completionRate\u003d\\\"0.0\\\"/\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            builder.append(\"\u003cpayments\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            builder.append(\"\u003camount\u003e400\u003c/amount\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            builder.append(\"\u003cyear\u003e2018\u003c/year\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            builder.append(\"\u003cmonth\u003e8\u003c/month\u003e\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            builder.append(\"\u003c/payments\u003e\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            builder.append(\"\u003c/students\u003e\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        builder.append(\"\u003c/TutorHelper\u003e\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Path manyStudentsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyStudents.xml\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        FileUtil.createFile(manyStudentsFile);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        FileUtil.writeToFile(manyStudentsFile, builder.toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        manyStudentsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return manyStudentsFile;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Initializes {@code studentListPanelHandle} with a {@code StudentListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code StudentListPanel}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void initUi(ObservableList\u003cStudent\u003e backingList) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        StudentListPanel studentListPanel \u003d new StudentListPanel(backingList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        uiPartRule.setUiPart(studentListPanel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentListPanelHandle \u003d new StudentListPanelHandle(getChildNode(studentListPanel.getRoot(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                StudentListPanelHandle.STUDENT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import guitests.guihandles.StudentCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import guitests.guihandles.StudentListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static void assertCardEquals(StudentCardHandle expectedCard, StudentCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedStudent}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static void assertCardDisplaysStudent(Student expectedStudent, StudentCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedStudent.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedStudent.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedStudent.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedStudent.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEquals(expectedStudent.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Asserts that the list in {@code studentListPanelHandle} displays the details of {@code students} correctly and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static void assertListMatching(StudentListPanelHandle studentListPanelHandle, Student... students) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        for (int i \u003d 0; i \u003c students.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            studentListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            assertCardDisplaysStudent(students[i], studentListPanelHandle.getStudentCardHandle(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Asserts that the list in {@code studentListPanelHandle} displays the details of {@code students} correctly and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static void assertListMatching(StudentListPanelHandle studentListPanelHandle, List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertListMatching(studentListPanelHandle, students.toArray(new Student[0]));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Asserts the size of the list in {@code studentListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static void assertListSize(StudentListPanelHandle studentListPanelHandle, int size) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        int numberOfPeople \u003d studentListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 22,
      "-": 52
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_DUPLICATE_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TUITION_TIMING_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TUITION_TIMING_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CATHY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.IDA;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTiming;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentUtil;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class AddCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: add a student without tags to a non-empty TutorHelper, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student toAdd \u003d AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + SUBJECT_DESC_AMY + \"    \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + TUITION_TIMING_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: add a student with all fields same as another student in the TutorHelper except name -\u003e added */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        toAdd \u003d new StudentBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + SUBJECT_DESC_AMY + TUITION_TIMING_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: add a student with all fields same as another student in the TutorHelper except phone and email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        toAdd \u003d new StudentBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d StudentUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: add to empty TutorHelper -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deleteAllStudents();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertCommandSuccess(AMY);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: add a student with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + TUITION_TIMING_DESC_BOB + SUBJECT_DESC_BOB + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: add a student, missing tags -\u003e added */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filters the student list before adding -\u003e added */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* ----------------------- Perform add operation while a student card is selected --------------------------- */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: selects first card in the student list, add a student -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        selectStudent(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertCommandSuccess(CATHY);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: add a duplicate student -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d StudentUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: add a duplicate student except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        toAdd \u003d new StudentBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d StudentUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: add a duplicate student except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        toAdd \u003d new StudentBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d StudentUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: add a duplicate student except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        toAdd \u003d new StudentBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d StudentUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: add a duplicate student except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d StudentUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + SUBJECT_DESC_AMY"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + SUBJECT_DESC_AMY"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + SUBJECT_DESC_AMY"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + SUBJECT_DESC_AMY"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        /* Case: missing subject -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        /* Case: missing tuitiontiming -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + SUBJECT_DESC_AMY;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d \"adds \" + StudentUtil.getStudentDetails(toAdd);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + SUBJECT_DESC_AMY + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + SUBJECT_DESC_AMY + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + SUBJECT_DESC_AMY + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + SUBJECT_DESC_AMY + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        /* Case: invalid subject -\u003e rejected */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + INVALID_SUBJECT_DESC + TUITION_TIMING_DESC_AMY;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertCommandFailure(command, Subject.MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        /* Case: invalid tuitiontiming -\u003e rejected */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + SUBJECT_DESC_AMY + INVALID_TUITION_TIMING_DESC;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "        assertCommandFailure(command, TuitionTiming.MESSAGE_TUITION_TIMING_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + SUBJECT_DESC_AMY + TUITION_TIMING_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 4. {@code Storage} and {@code StudentListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(Student toAdd) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(StudentUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Student)}. Executes {@code command}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Student)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(String command, Student toAdd) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.addStudent(toAdd);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Student)} except asserts that"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 2. {@code Storage} and {@code StudentListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Student)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 4. {@code Storage} and {@code StudentListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 12,
      "SusterDrifter": 18,
      "andlimey": 11,
      "lywjoel": 78,
      "-": 166
    }
  },
  {
    "path": "src/test/java/systemtests/AddSubCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.AddSubCommand.MESSAGE_ADDSUB_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TestUtil.getStudent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.AddSubCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class AddSubCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String ADDSUB_TEST_SUBJECT \u003d \"Physics\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final String MESSAGE_INVALID_ADDSUB_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddSubCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void addsub() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* -------------- Performing addsub operation while an unfiltered list is being shown ------------------*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: add a subject to the first student in the list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e success"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String command \u003d \"     \" + AddSubCommand.COMMAND_WORD + \"      \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + INDEX_FIRST_STUDENT.getOneBased() + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + PREFIX_SUBJECT + \"Physics       \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Subject subjectTest \u003d Subject.makeSubject(\"Physics\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student newStudent \u003d addSubStudent("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                expectedModel, INDEX_FIRST_STUDENT, subjectTest);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_ADDSUB_SUCCESS, newStudent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: add subject to the last student in the list -\u003e success */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Model modelBeforeAppendLast \u003d getModel();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index lastStudentIndex \u003d getLastIndex(modelBeforeAppendLast);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(lastStudentIndex, subjectTest);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: undo command the last student in the list -\u003e first student subject reverted */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, modelBeforeAppendLast, expectedResultMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: redo command the last student in the list -\u003e first student subject restored again */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        addSubStudent(modelBeforeAppendLast, lastStudentIndex, subjectTest);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, modelBeforeAppendLast, expectedResultMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* ----------------- Performing addsub operation while a filtered list is being shown ------------------  */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds of TutorHelper and student list -\u003e success */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(studentIndex.getZeroBased() \u003c expectedModel.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(studentIndex, subjectTest);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds of TutorHelper but out of bounds of student list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        int invalidIndex \u003d getModel().getTutorHelper().getStudentList().size();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddSubCommand.COMMAND_WORD + \" \" + invalidIndex"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + PREFIX_SUBJECT + ADDSUB_TEST_SUBJECT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* ------------------------------- Performing invalid addsub operation ---------------------------------- */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddSubCommand.COMMAND_WORD + \" 0 \" + PREFIX_SUBJECT + ADDSUB_TEST_SUBJECT;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_ADDSUB_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddSubCommand.COMMAND_WORD + \" -1 \" + PREFIX_SUBJECT + ADDSUB_TEST_SUBJECT;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_ADDSUB_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                getModel().getTutorHelper().getStudentList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddSubCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + PREFIX_SUBJECT + ADDSUB_TEST_SUBJECT;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(AddSubCommand.COMMAND_WORD + \" a \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + PREFIX_SUBJECT + ADDSUB_TEST_SUBJECT, MESSAGE_INVALID_ADDSUB_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(AddSubCommand.COMMAND_WORD + \" 1 1 \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + PREFIX_SUBJECT + ADDSUB_TEST_SUBJECT, MESSAGE_INVALID_ADDSUB_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(\"aDdSuB 1 \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + PREFIX_SUBJECT + ADDSUB_TEST_SUBJECT, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Adds a subject {@code subject} to the {@code Student}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * at the specified {@code index} in {@code model}\u0027s TutorHelper."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @return the removed student"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Student addSubStudent(Model model, Index targetStudentIndex, Subject subject) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d getStudent(model, targetStudentIndex);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e targetSubjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        targetSubjects.add(subject);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d new HashSet\u003c\u003e(targetSubjects);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentUpdated \u003d SubjectsUtil.createStudentWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateStudent(studentTarget, studentUpdated);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return studentUpdated;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Executes {@code command} and in addition,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 1. Asserts that the command box displays an empty string."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 5. Asserts that the command box has the default style class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(Index sourceStudentIndex, Subject subject) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String command \u003d AddSubCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + sourceStudentIndex.getOneBased()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + PREFIX_SUBJECT + subject.getSubjectName();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student newStudent \u003d addSubStudent("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                expectedModel, sourceStudentIndex, subject);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_ADDSUB_SUCCESS, newStudent);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Executes {@code command} and in addition,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 1. Asserts that the command box displays an empty string."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 5. Asserts that the command box has the default style class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 196
    }
  },
  {
    "path": "src/test/java/systemtests/AddSyllCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.AddSyllCommand.MESSAGE_ADDSYLL_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SYLLABUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TestUtil.getStudent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.AddSyllCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.subject.Syllabus;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class AddSyllCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static final String ADD_SYLLABUS_STRING \u003d \"AddSyllCommandTest\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static final String MESSAGE_INVALID_ADDSYLL_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddSyllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void addsyll() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* -------------- Performing addsyll operation while an unfiltered list is being shown ------------------*/"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: append the first subject of the first student in the list with a new syllabus"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e success"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String command \u003d \"     \" + AddSyllCommand.COMMAND_WORD + \"      \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + INDEX_FIRST_STUDENT.getOneBased() + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_SUBJECT.getOneBased() + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + PREFIX_SYLLABUS + \"AddSyllCommandSystemTest       \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Syllabus syllabusTest \u003d Syllabus.makeSyllabus(\"AddSyllCommandSystemTest\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student newStudent \u003d addSyllStudent("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                expectedModel, INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_ADDSYLL_SUCCESS, newStudent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: append first subject the last student in the list -\u003e success */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeAppendLast \u003d getModel();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index lastStudentIndex \u003d getLastIndex(modelBeforeAppendLast);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(lastStudentIndex, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: undo command the last student in the list -\u003e first student subject reverted */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeAppendLast, expectedResultMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: redo command the last student in the list -\u003e first student subject restored again */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        addSyllStudent(modelBeforeAppendLast, lastStudentIndex, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeAppendLast, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: append to the first subject of the middle student in the list -\u003e success */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index middleStudentIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(middleStudentIndex, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* ----------------- Performing addsyll operation while a filtered list is being shown ------------------  */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds of TutorHelper and student list -\u003e success */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(studentIndex.getZeroBased() \u003c expectedModel.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(studentIndex, INDEX_FIRST_SUBJECT, syllabusTest);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds of TutorHelper but out of bounds of student list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        int invalidIndex \u003d getModel().getTutorHelper().getStudentList().size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        command \u003d AddSyllCommand.COMMAND_WORD + \" \" + invalidIndex"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \" + INDEX_FIRST_SUBJECT.getOneBased()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + PREFIX_SYLLABUS + ADD_SYLLABUS_STRING;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds but subject index is out of bounds"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        invalidIndex \u003d getModel().getTutorHelper().getStudentList()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .get(INDEX_FIRST_STUDENT.getZeroBased()).getSubjects().size() + 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddSyllCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \" + invalidIndex"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + PREFIX_SYLLABUS + ADD_SYLLABUS_STRING;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* ------------------------------- Performing invalid addsyll operation ---------------------------------- */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddSyllCommand.COMMAND_WORD + \" 0 0 \" + PREFIX_SYLLABUS + ADD_SYLLABUS_STRING;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_ADDSYLL_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d AddSyllCommand.COMMAND_WORD + \" -1 -1 \" + PREFIX_SYLLABUS + ADD_SYLLABUS_STRING;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_ADDSYLL_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                getModel().getTutorHelper().getStudentList().size() + 1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        command \u003d AddSyllCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + INDEX_FIRST_SUBJECT.getOneBased() + \" \" + PREFIX_SYLLABUS + ADD_SYLLABUS_STRING;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(AddSyllCommand.COMMAND_WORD + \" a b \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + PREFIX_SYLLABUS + ADD_SYLLABUS_STRING, MESSAGE_INVALID_ADDSYLL_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(AddSyllCommand.COMMAND_WORD + \" 1 1 1 \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + PREFIX_SYLLABUS + ADD_SYLLABUS_STRING, MESSAGE_INVALID_ADDSYLL_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(\"aDdsyLL 1 1 \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + PREFIX_SYLLABUS + ADD_SYLLABUS_STRING, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends a syllabus topic {@code syllabus} to the{@code Subjcct} at the specified {@code subjectIndex} for the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code Student} at the specified {@code targetStudentIndex} in {@code model}\u0027s TutorHelper."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @return the updated student"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Student addSyllStudent(Model model, Index targetStudentIndex, Index subjectIndex, Syllabus syllabus) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d getStudent(model, targetStudentIndex);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e targetSubjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Subject updatedSubject \u003d targetSubjects.get(subjectIndex.getZeroBased()).add(syllabus);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        targetSubjects.set(subjectIndex.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d new HashSet\u003c\u003e(targetSubjects);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentUpdated \u003d SubjectsUtil.createStudentWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateStudent(studentTarget, studentUpdated);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return studentUpdated;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(Index sourceStudentIndex, Index subjectIndex, Syllabus syllabus) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String command \u003d AddSyllCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + sourceStudentIndex.getOneBased()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \" + subjectIndex.getOneBased()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \" + PREFIX_SYLLABUS + syllabus.syllabus;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student newStudent \u003d addSyllStudent("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                expectedModel, sourceStudentIndex, subjectIndex, syllabus);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_ADDSYLL_SUCCESS, newStudent);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 15,
      "lywjoel": 64,
      "-": 139
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class ClearCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: clear non-empty TutorHelper, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: undo clearing TutorHelper -\u003e original TutorHelper restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: redo clearing TutorHelper -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: selects first card in student list and clears TutorHelper -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original TutorHelper"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        selectStudent(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filters the student list before clearing -\u003e entire TutorHelper cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original TutorHelper"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: clear empty TutorHelper -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 5,
      "lywjoel": 11,
      "-": 85
    }
  },
  {
    "path": "src/test/java/systemtests/CopySubCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongyz"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CopySubCommand.MESSAGE_COPYSUB_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TestUtil.getStudent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SYLLABUS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.CopySubCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": "public class CopySubCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private static final String MESSAGE_INVALID_COPYSUB_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, CopySubCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void copysub() throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* ---------------- Performing copysub operation while an unfiltered list is being shown ------------------- */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: copy the first subject of the first student in the list,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e success"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String command \u003d \"     \" + CopySubCommand.COMMAND_WORD + \"      \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + INDEX_FIRST_STUDENT.getOneBased() + \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + INDEX_FIRST_SUBJECT.getOneBased() + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + INDEX_SECOND_STUDENT.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student newStudent \u003d copySubStudent("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                expectedModel, INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_COPYSUB_SUCCESS, newStudent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: copy first subject the last student in the list to the first student on the list -\u003e success */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model modelBeforeMarkingLast \u003d getModel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index lastStudentIndex \u003d getLastIndex(modelBeforeMarkingLast);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(lastStudentIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: undo command the last student in the list -\u003e first student subject reverted */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(command, modelBeforeMarkingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: redo command the last student in the list -\u003e first student subject restored again */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        copySubStudent(modelBeforeMarkingLast, lastStudentIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(command, modelBeforeMarkingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: copy first subject of the middle student in the list to first student in the list -\u003e success */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index middleStudentIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(middleStudentIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* ----------------- Performing copysub operation while a filtered list is being shown ------------------  */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds of TutorHelper and student list -\u003e success */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(studentIndex.getZeroBased() \u003c expectedModel.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(studentIndex, INDEX_FIRST_SUBJECT, INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds of TutorHelper but out of bounds of student list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongyz"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        int invalidIndex \u003d getModel().getTutorHelper().getStudentList().size();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d CopySubCommand.COMMAND_WORD + \" \" + invalidIndex"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + \" \" + INDEX_FIRST_SUBJECT.getOneBased()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + INDEX_SECOND_STUDENT.getOneBased();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds but subject index is out of bounds"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongyz"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        invalidIndex \u003d getModel().getTutorHelper().getStudentList()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .get(INDEX_FIRST_STUDENT.getZeroBased()).getSubjects().size() + 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d CopySubCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + \" \" + invalidIndex"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + INDEX_SECOND_STUDENT.getOneBased();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* ------------------------------- Performing invalid copySub operation ---------------------------------- */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d CopySubCommand.COMMAND_WORD + \" 0 0 0\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_COPYSUB_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d CopySubCommand.COMMAND_WORD + \" -1 -1 -1\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_COPYSUB_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                getModel().getTutorHelper().getStudentList().size() + 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d CopySubCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased() + \" 1 1\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                CopySubCommand.COMMAND_WORD + \" a b c\", MESSAGE_INVALID_COPYSUB_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                CopySubCommand.COMMAND_WORD + \" 1 a b c\", MESSAGE_INVALID_COPYSUB_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(\"cOPYsub 1 1 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Removes the {@code Student} at the specified {@code index} in {@code model}\u0027s TutorHelper."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @return the removed student"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Student copySubStudent(Model model, Index sourceStudentIndex,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                                   Index subjectIndex, Index targetStudentIndex) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentSource \u003d getStudent(model, sourceStudentIndex);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d getStudent(model, targetStudentIndex);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e sourceSubjects \u003d new ArrayList\u003c\u003e(studentSource.getSubjects());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e targetSubjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Subject selectedSubject \u003d sourceSubjects.get(subjectIndex.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Set\u003cSubject\u003e updatedSubjects;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        if (SubjectsUtil.hasSubject(studentTarget, selectedSubject.getSubjectType())) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            Index index \u003d SubjectsUtil.findSubjectIndex(studentTarget, selectedSubject.getSubjectType()).get();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            Subject updatedSubject \u003d targetSubjects.get(index.getZeroBased())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                    .append(selectedSubject.getSubjectContent());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            targetSubjects.set(index.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            updatedSubjects \u003d new HashSet\u003c\u003e(targetSubjects);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            targetSubjects.add(selectedSubject);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongyz"
        },
        "content": "            updatedSubjects \u003d new HashSet\u003c\u003e(targetSubjects);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d new HashSet\u003c\u003e(updatedSubjects);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentUpdated \u003d SubjectsUtil.createStudentWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateStudent(studentTarget, studentUpdated);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return studentUpdated;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Executes {@code command} and in addition,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 1. Asserts that the command box displays an empty string."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 5. Asserts that the command box has the default style class."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(Index sourceStudentIndex, Index subjectIndex, Index targetStudentIndex) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student copySubStudent \u003d copySubStudent(expectedModel, sourceStudentIndex, subjectIndex, targetStudentIndex);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_COPYSUB_SUCCESS, copySubStudent);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(CopySubCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + sourceStudentIndex.getOneBased() + \" \" + subjectIndex.getOneBased()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + targetStudentIndex.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Executes {@code command} and in addition,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 1. Asserts that the command box displays an empty string."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 5. Asserts that the command box has the default style class."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ongyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongyz": 162,
      "lywjoel": 62
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TestUtil.getStudent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class DeleteCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: delete the first student in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"     \" + INDEX_FIRST_STUDENT.getOneBased() + \"     \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student deletedStudent \u003d removeStudent(expectedModel, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_STUDENT_SUCCESS, deletedStudent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: delete the last student in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index lastStudentIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(lastStudentIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: undo deleting the last student in the list -\u003e last student restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: redo deleting the last student in the list -\u003e last student deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        removeStudent(modelBeforeDeletingLast, lastStudentIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: delete the middle student in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index middleStudentIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(middleStudentIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, delete index within bounds of TutorHelper and student list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index index \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredStudentList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, delete index within bounds of TutorHelper but out of bounds of student list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        int invalidIndex \u003d getModel().getTutorHelper().getStudentList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* -------------------- Performing delete operation while a student card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: delete the selected student -\u003e student list panel selects the student before the deleted student */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showAllStudents();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        selectStudent(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deletedStudent \u003d removeStudent(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_STUDENT_SUCCESS, deletedStudent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                getModel().getTutorHelper().getStudentList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Removes the {@code Student} at the specified {@code index} in {@code model}\u0027s TutorHelper."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @return the removed student"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Student removeStudent(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student targetStudent \u003d getStudent(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.deleteStudent(targetStudent);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return targetStudent;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Deletes the student at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student deletedStudent \u003d removeStudent(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_STUDENT_SUCCESS, deletedStudent);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 6,
      "lywjoel": 44,
      "-": 142
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteSubCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SUBJECT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.DeleteSubCommand.MESSAGE_DELETESUB_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TestUtil.getStudent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.DeleteSubCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "public class DeleteSubCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETESUB_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteSubCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public void deletesub() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* ----------------- Performing erase operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: delete the first subject of the third student in the list,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e success"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Model lastModel \u003d getModel();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String command \u003d \"     \" + DeleteSubCommand.COMMAND_WORD + \"      \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + INDEX_THIRD_STUDENT.getOneBased() + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + INDEX_FIRST_SUBJECT.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student deletedSubStudent \u003d deleteSubStudent(expectedModel, INDEX_THIRD_STUDENT, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETESUB_SUCCESS, deletedSubStudent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: undo command  -\u003e third student restored */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, lastModel, expectedResultMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: redo command the last student in the list -\u003e last student syllabus is erased again */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deleteSubStudent(lastModel, INDEX_THIRD_STUDENT, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, lastModel, expectedResultMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* ----------------- Performing deletesub operation while a filtered list is being shown ------------------  */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds of TutorHelper and student list -\u003e success */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index studentIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(studentIndex.getZeroBased() \u003c expectedModel.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(studentIndex, INDEX_FIRST_SUBJECT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds of TutorHelper but out of bounds of student list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        int invalidIndex \u003d getModel().getTutorHelper().getStudentList().size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d DeleteSubCommand.COMMAND_WORD + \" \" + invalidIndex"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + INDEX_FIRST_SUBJECT.getOneBased();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds but subject index is out of bounds"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        invalidIndex \u003d getModel().getTutorHelper().getStudentList()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .get(INDEX_SECOND_STUDENT.getZeroBased()).getSubjects().size() + 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d DeleteSubCommand.COMMAND_WORD + \" \" + INDEX_SECOND_STUDENT.getOneBased()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* ------------------------------- Performing invalid deletesub operation ---------------------------------- */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d DeleteSubCommand.COMMAND_WORD + \" 0 0\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETESUB_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d DeleteSubCommand.COMMAND_WORD + \" -1 -1\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETESUB_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                getModel().getTutorHelper().getStudentList().size() + 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d DeleteSubCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased() + \" 1\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                DeleteSubCommand.COMMAND_WORD + \" a b\", MESSAGE_INVALID_DELETESUB_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                DeleteSubCommand.COMMAND_WORD + \" 1 a b\", MESSAGE_INVALID_DELETESUB_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(\"dElEtEsUb 1 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Removes the {@code Subject} at the specified {@code subjectIndex} for"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * the {@code Student} at the specified {@code studentIndex} in {@code model}\u0027s TutorHelper."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @return the updated student"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Student deleteSubStudent(Model model, Index studentIndex, Index subjectIndex) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d getStudent(model, studentIndex);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        subjects.remove(subjectIndex.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentUpdated \u003d SubjectsUtil.createStudentWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateStudent(studentTarget, studentUpdated);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return studentUpdated;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Executes {@code command} and in addition,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 1. Asserts that the command box displays an empty string."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 5. Asserts that the command box has the default style class."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(Index studentIndex, Index subjectIndex) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String command \u003d DeleteSubCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + studentIndex.getOneBased()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + subjectIndex.getOneBased();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student deletedSubStudent \u003d deleteSubStudent(expectedModel, studentIndex, subjectIndex);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETESUB_SUCCESS, deletedSubStudent);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Executes {@code command} and in addition,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 1. Asserts that the command box displays an empty string."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 5. Asserts that the command box has the default style class."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lywjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 198
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteSyllCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SUBJECT_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SYLLABUS_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.DeleteSyllCommand.MESSAGE_DELETESYLL_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TestUtil.getStudent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SYLLABUS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.DeleteSyllCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class DeleteSyllCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETESYLL_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteSyllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void deletesyll() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* ----------------- Performing erase operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: erase the syllabus of first subject of the first student in the list,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e success"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String command \u003d \"     \" + DeleteSyllCommand.COMMAND_WORD + \"      \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + INDEX_FIRST_STUDENT.getOneBased() + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + INDEX_FIRST_SUBJECT.getOneBased() + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + INDEX_FIRST_SYLLABUS.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student deletedSyllStudent \u003d deleteSyllStudent("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                expectedModel, INDEX_FIRST_STUDENT, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETESYLL_SUCCESS, deletedSyllStudent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: erase ths syllabus of first subject the last student in the list -\u003e success */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Model modelBeforeMarkingLast \u003d getModel();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index lastStudentIndex \u003d getLastIndex(modelBeforeMarkingLast);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(lastStudentIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: undo command the last student in the list -\u003e last student restored */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(command, modelBeforeMarkingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: redo command the last student in the list -\u003e last student syllabus is erased again */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deleteSyllStudent(modelBeforeMarkingLast, lastStudentIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(command, modelBeforeMarkingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: erase syllabus of first subject of the middle student in the list -\u003e success */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index middleStudentIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(middleStudentIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* ----------------- Performing deletesyll operation while a filtered list is being shown ------------------  */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds of TutorHelper and student list -\u003e success */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(studentIndex.getZeroBased() \u003c expectedModel.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(studentIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds of TutorHelper but out of bounds of student list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        int invalidIndex \u003d getModel().getTutorHelper().getStudentList().size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        command \u003d DeleteSyllCommand.COMMAND_WORD + \" \" + invalidIndex"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \" + INDEX_FIRST_SUBJECT.getOneBased()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + \" \" + INDEX_FIRST_SYLLABUS.getOneBased();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds but subject index is out of bounds"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        invalidIndex \u003d getModel().getTutorHelper().getStudentList()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .get(INDEX_FIRST_STUDENT.getZeroBased()).getSubjects().size() + 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d DeleteSyllCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \" + invalidIndex"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \" + INDEX_FIRST_SYLLABUS.getOneBased();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_SUBJECT_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student and subject index within bounds but syllabus index is out of bounds"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Set\u003cSubject\u003e subjects \u003d getModel().getTutorHelper().getStudentList()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .get(INDEX_FIRST_STUDENT.getZeroBased()).getSubjects();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d new ArrayList\u003c\u003e(subjects)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .get(INDEX_FIRST_SUBJECT.getZeroBased()).getSubjectContent().size() + 5;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d DeleteSyllCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \" + INDEX_FIRST_SUBJECT.getOneBased()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_SYLLABUS_INDEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* ------------------------------- Performing invalid deletesyll operation ---------------------------------- */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        command \u003d DeleteSyllCommand.COMMAND_WORD + \" 0 0 0\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETESYLL_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        command \u003d DeleteSyllCommand.COMMAND_WORD + \" -1 -1 -1\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETESYLL_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                getModel().getTutorHelper().getStudentList().size() + 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        command \u003d DeleteSyllCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased() + \" 1 1\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                DeleteSyllCommand.COMMAND_WORD + \" a b c\", MESSAGE_INVALID_DELETESYLL_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                DeleteSyllCommand.COMMAND_WORD + \" 1 a b c\", MESSAGE_INVALID_DELETESYLL_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(\"dElEtESYll 1 1 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Removes the {@code Student} at the specified {@code index} in {@code model}\u0027s TutorHelper."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @return the removed student"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Student deleteSyllStudent(Model model, Index studentIndex, Index subjectIndex, Index syllabusIndex)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d getStudent(model, studentIndex);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject updatedSubject \u003d subjects.get(subjectIndex.getZeroBased()).remove(syllabusIndex);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjects.set(subjectIndex.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentUpdated \u003d SubjectsUtil.createStudentWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateStudent(studentTarget, studentUpdated);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return studentUpdated;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Executes {@code command} and in addition,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 1. Asserts that the command box displays an empty string."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 5. Asserts that the command box has the default style class."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(Index studentIndex, Index subjectIndex, Index syllabusIndex)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student deletedSyllStudent \u003d deleteSyllStudent(expectedModel, studentIndex, subjectIndex, syllabusIndex);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETESYLL_SUCCESS, deletedSyllStudent);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(DeleteSyllCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + studentIndex.getOneBased() + \" \" + subjectIndex.getOneBased()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + \" \" + syllabusIndex.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Executes {@code command} and in addition,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 1. Asserts that the command box displays an empty string."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 5. Asserts that the command box has the default style class."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 159,
      "lywjoel": 55,
      "-": 14
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DUPLICATE_SYLLABUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_CABBAGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SYLLABUS_KINETICS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SYLLABUS_ORGANIC;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUITION_TIMING_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TUITION_TIMING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.EditCommand.MESSAGE_DUPLICATE_STUDENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentUtil;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": "public class EditCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index index \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \" \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(BOB).withTags(VALID_TAG_HUSBAND).withSubjects(VALID_SUBJECT_AMY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withSyllabus(INDEX_FIRST_SUBJECT, DUPLICATE_SYLLABUS).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, index, editedStudent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: undo editing the last student in the list -\u003e last student restored */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: redo editing the last student in the list -\u003e last student edited again */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateStudent("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                getModel().getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased()), editedStudent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: edit a student with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, index, editedStudent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: edit a student with new values same as another student\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        index \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        index \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentToEdit \u003d getModel().getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedStudent \u003d new StudentBuilder(studentToEdit).withTags().build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, index, editedStudent);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, edit index within bounds of TutorHelper and student list -\u003e edited */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        index \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredStudentList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        studentToEdit \u003d getModel().getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedStudent \u003d new StudentBuilder(studentToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, index, editedStudent);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, edit index within bounds of TutorHelper but out of bounds of student list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        int invalidIndex \u003d getModel().getTutorHelper().getStudentList().size();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* -------------------- Performing edit operation while a student card is selected -------------------------- */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: selects first card in the student list, edit a student -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showAllStudents();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        index \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        selectStudent(index);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        // browser\u0027s url is updated to reflect the new student\u0027s name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedStudent \u003d new StudentBuilder(AMY).withTuitionTiming(VALID_TUITION_TIMING_BOB)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withSubjects(VALID_SUBJECT_AMY).withSyllabus(INDEX_FIRST_SUBJECT, DUPLICATE_SYLLABUS).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, index, editedStudent, index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredStudentList().size() + 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: edit a student with new values same as another student\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        executeCommand(StudentUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(getModel().getTutorHelper().getStudentList().contains(BOB));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        index \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(getModel().getFilteredStudentList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: edit a student with new values same as another student\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Student, Index)} except that"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Student, Index)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Student editedStudent) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedStudent, null);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the student at index {@code toEdit} being"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * updated to values specified {@code editedStudent}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Student editedStudent,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(expectedModel.getFilteredStudentList().get(toEdit.getZeroBased()), editedStudent);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @see TutorHelperSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongyz": 19,
      "lywjoel": 76,
      "-": 191
    }
  },
  {
    "path": "src/test/java/systemtests/EditSyllCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DUPLICATE_SYLLABUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SYLLABUS_DESC_DIFFERENTIATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SYLLABUS_DESC_INTEGRATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SYLLABUS_DIFFERENTIATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.EditSyllCommand.MESSAGE_DUPLICATE_SYLLABUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SYLLABUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditSyllCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditSyllCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void editsyll() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ---------------- Performing editsyll operation while an unfiltered list is being shown ------------------- */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: edit the syllabus entry of first subject of the first student in the list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index index \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexSubject \u003d INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexSyll \u003d INDEX_FIRST_SYLLABUS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditSyllCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                + indexSubject.getOneBased() + \" \" + indexSyll.getOneBased() + \" \" + SYLLABUS_DESC_DIFFERENTIATION"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(ALICE).replaceSyllabus(indexSubject, indexSyll,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                VALID_SYLLABUS_DIFFERENTIATION).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, index, editedStudent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: undo editing the last student in the list -\u003e last student restored */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: redo editing the last student in the list -\u003e last student edited again */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateStudent("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                getModel().getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased()), editedStudent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, edit index within bounds of TutorHelper and student list -\u003e edited */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        index \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredStudentList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditSyllCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + indexSubject.getOneBased()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \" + indexSyll.getOneBased() + \" \" + SYLLABUS_DESC_INTEGRATION + \" \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentToEdit \u003d getModel().getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedStudent \u003d new StudentBuilder(ALICE).replaceSyllabus(indexSubject, indexSyll,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                DUPLICATE_SYLLABUS).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, index, editedStudent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, edit index within bounds of TutorHelper but out of bounds of student list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        int invalidIndex \u003d getModel().getTutorHelper().getStudentList().size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditSyllCommand.COMMAND_WORD + \" \" + invalidIndex + \" \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_SUBJECT.getOneBased() + \" \" + INDEX_FIRST_SYLLABUS + \" \" + SYLLABUS_DESC_DIFFERENTIATION,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditSyllCommand.COMMAND_WORD + \" 0\" + \" \" + INDEX_FIRST_SYLLABUS.getOneBased()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \" + SYLLABUS_DESC_DIFFERENTIATION, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                EditSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditSyllCommand.COMMAND_WORD + \" -1\" + \" \" + INDEX_FIRST_SYLLABUS.getOneBased()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \" + SYLLABUS_DESC_DIFFERENTIATION, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                EditSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredStudentList().size() + 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditSyllCommand.COMMAND_WORD + \" \" + invalidIndex + \" \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_SYLLABUS.getOneBased() + \" \" + SYLLABUS_DESC_DIFFERENTIATION,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditSyllCommand.COMMAND_WORD + \" \" + SYLLABUS_DESC_DIFFERENTIATION,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing syllabus field -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(EditSyllCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased() + \" \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_SUBJECT.getOneBased() + \" \" + INDEX_FIRST_SYLLABUS.getOneBased(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditSyllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: duplicate syllabus field -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(EditSyllCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased() + \" \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_SUBJECT.getOneBased() + \" \" + INDEX_FIRST_SYLLABUS.getOneBased() + \" \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                + SYLLABUS_DESC_INTEGRATION, MESSAGE_DUPLICATE_SYLLABUS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Student, Index)} except that"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Student, Index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Student editedStudent) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedStudent, null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the student at index {@code toEdit} being"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * updated to values specified {@code editedStudent}.\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Student editedStudent,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(expectedModel.getFilteredStudentList().get(toEdit.getZeroBased()), editedStudent);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                String.format(EditSyllCommand.MESSAGE_EDITSYLL_SUCCESS, editedStudent), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see TutorHelperSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 2,
      "lywjoel": 38,
      "-": 159
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class ErrorDialogGuiTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class FindCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find multiple students in TutorHelper, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "         * -\u003e 2 students found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: repeat previous find command where student list is displaying the students we are finding"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "         * -\u003e 2 students found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find student where student list is not displaying the student we are finding -\u003e 1 student found */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find multiple students in TutorHelper, 2 keywords -\u003e 2 students found */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find multiple students in TutorHelper, 2 keywords in reversed order -\u003e 2 students found */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find multiple students in TutorHelper, 2 keywords with 1 repeat -\u003e 2 students found */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find multiple students in TutorHelper, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "         * -\u003e 2 students found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find same students in TutorHelper after deleting 1 of them -\u003e 1 student found */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(getModel().getTutorHelper().getStudentList().contains(BENSON));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find student in TutorHelper, keyword is same as name but of different case -\u003e 1 student found */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find student in TutorHelper, keyword is substring of name -\u003e 0 students found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find student in TutorHelper, name is substring of keyword -\u003e 0 students found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find student not in TutorHelper -\u003e 0 students found */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find phone number of student in TutorHelper -\u003e 0 students found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find address of student in TutorHelper -\u003e 0 students found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find email of student in TutorHelper -\u003e 0 students found */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find tags of student in TutorHelper -\u003e 0 students found */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find while a student is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showAllStudents();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        selectStudent(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertFalse(getStudentListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: find student in empty TutorHelper -\u003e 0 students found */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deleteAllStudents();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * box displays {@code Messages#MESSAGE_STUDENTS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                MESSAGE_STUDENTS_LISTED_OVERVIEW, expectedModel.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 5,
      "ongyz": 1,
      "lywjoel": 33,
      "-": 157
    }
  },
  {
    "path": "src/test/java/systemtests/GroupCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andlimey"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.logic.commands.GroupCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andlimey"
        },
        "content": "import seedu.address.model.tuitiontiming.TuitionTimingContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andlimey"
        },
        "content": "public class GroupCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private static final String MESSAGE_INVALID_GROUP_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, GroupCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    public void group() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        /* --------------------- Performing group operation while an unfiltered list is shown ---------------------- */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        Model modelBeforeGrouping \u003d getModel();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String command \u003d \"     \" + GroupCommand.COMMAND_WORD + \"      \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String undoCommand \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //Groups by day"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String validDayCommand \u003d command + \"Monday \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(new TuitionTimingContainsKeywordsPredicate(\"Monday\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                expectedModel.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandSuccess(validDayCommand, true, false, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //Undo sorting by time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandSuccess(undoCommand, modelBeforeGrouping, expectedResultMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //Groups by time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String validTimeCommand \u003d command + \"5:00pm \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(new TuitionTimingContainsKeywordsPredicate(\"5:00pm\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedResultMessage \u003d String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                expectedModel.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandSuccess(validTimeCommand, false, true, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //Undo sorting by day"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandSuccess(undoCommand, modelBeforeGrouping, expectedResultMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        /* ---------------------- Performing group operation while a filtered list is shown ------------------------ */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //Initial model needs to be acquired and sorted first"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        Model modelAfterFirstSort \u003d getModel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        modelAfterFirstSort.sortByTime();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //Group by day and sort by time first"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String firstGroupCommand \u003d command + \"Saturday \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(new TuitionTimingContainsKeywordsPredicate(\"Saturday\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                expectedModel.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandSuccess(firstGroupCommand, true, false, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //Followed by grouping by time and sorting by day"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String secondGroupCommand \u003d command + \"1:00pm \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(new TuitionTimingContainsKeywordsPredicate(\"1:00pm\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                expectedModel.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandSuccess(secondGroupCommand, false, true, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //Undo sorting twice"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandSuccess(undoCommand, modelAfterFirstSort, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandSuccess(undoCommand, modelBeforeGrouping, expectedResultMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        /* -------------------------------- Performing invalid group operation ------------------------------------- */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String invalidDayCommand \u003d command + \"MONDAY \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandFailure(invalidDayCommand, MESSAGE_INVALID_GROUP_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        String invalidTimeCommand \u003d command + \"1300 \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandFailure(invalidTimeCommand, MESSAGE_INVALID_GROUP_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        //command with no additional parameter"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_GROUP_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 6. Sorts the list depending on whether its grouped by day or time.\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private void assertCommandSuccess(String command, boolean isDay, boolean isTime,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andlimey"
        },
        "content": "                                      Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        if (isDay \u0026\u0026 !isTime) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            expectedModel.sortByTime();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        } else if (isTime \u0026\u0026 !isDay) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            expectedModel.sortByDay();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andlimey"
        },
        "content": "            expectedModel.commitTutorHelper();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andlimey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andlimey"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andlimey"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andlimey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andlimey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andlimey": 136,
      "lywjoel": 13
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public class HelpCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getStudentListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertNotEquals(getBrowserPanel().DEFAULT_STUDENT, getBrowserPanel().getLoadedStudent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getStudentListPanel(), getModel().getFilteredStudentList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 3,
      "-": 104
    }
  },
  {
    "path": "src/test/java/systemtests/MarkCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.logic.commands.MarkCommand.MESSAGE_MARK_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TestUtil.getStudent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SUBJECT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SYLLABUS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.MarkCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.subject.Subject;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.util.SubjectsUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class MarkCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private static final String MESSAGE_INVALID_MARK_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    public void mark() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* ----------------- Performing mark operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: mark the first student in the list, command with leading spaces and trailing spaces -\u003e marked */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        String command \u003d \"     \" + MarkCommand.COMMAND_WORD + \"      \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + INDEX_FIRST_STUDENT.getOneBased() + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + INDEX_FIRST_SUBJECT.getOneBased() + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + INDEX_FIRST_SYLLABUS.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student markedStudent \u003d markStudent(expectedModel, INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_MARK_SUCCESS, markedStudent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: mark the last student in the list -\u003e marked */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Model modelBeforeMarkingLast \u003d getModel();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index lastStudentIndex \u003d getLastIndex(modelBeforeMarkingLast);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(lastStudentIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: undo marking the last student in the list -\u003e last student restored */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(command, modelBeforeMarkingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: redo marking the last student in the list -\u003e last student marked again */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        markStudent(modelBeforeMarkingLast, lastStudentIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(command, modelBeforeMarkingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: marking the middle student in the list -\u003e marked */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index middleStudentIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(middleStudentIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* ------------------ Performing mark operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, mark index within bounds of TutorHelper and student list -\u003e marked */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(studentIndex.getZeroBased() \u003c expectedModel.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(studentIndex, INDEX_FIRST_SUBJECT, INDEX_FIRST_SYLLABUS, KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, mark index within bounds of TutorHelper but out of bounds of student list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        int invalidIndex \u003d getModel().getTutorHelper().getStudentList().size();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        command \u003d MarkCommand.COMMAND_WORD + \" \" + invalidIndex"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + \" \" + INDEX_FIRST_SYLLABUS.getOneBased()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + \" \" + INDEX_FIRST_SYLLABUS.getOneBased();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        command \u003d MarkCommand.COMMAND_WORD + \" 0 0 0\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_MARK_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        command \u003d MarkCommand.COMMAND_WORD + \" -1 -1 -1\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_MARK_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                getModel().getTutorHelper().getStudentList().size() + 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        command \u003d MarkCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased() + \" 1 1\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(MarkCommand.COMMAND_WORD + \" a b c\", MESSAGE_INVALID_MARK_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(MarkCommand.COMMAND_WORD + \" 1 a b c\", MESSAGE_INVALID_MARK_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandFailure(\"mARk 1 1 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Removes the {@code Student} at the specified {@code index} in {@code model}\u0027s TutorHelper."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * @return the removed student"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private Student markStudent(Model model, Index studentIndex, Index subjectIndex, Index syllabusIndex)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentTarget \u003d getStudent(model, studentIndex);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e(studentTarget.getSubjects());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Subject updatedSubject \u003d subjects.get(subjectIndex.getZeroBased()).toggleState(syllabusIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        subjects.set(subjectIndex.getZeroBased(), updatedSubject);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Set\u003cSubject\u003e newSubjects \u003d new HashSet\u003c\u003e(subjects);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student studentUpdated \u003d SubjectsUtil.createStudentWithNewSubjects(studentTarget, newSubjects);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateStudent(studentTarget, studentUpdated);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return studentUpdated;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(Index studentIndex, Index subjectIndex, Index syllabusIndex)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(studentIndex, subjectIndex, syllabusIndex, null);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Executes {@code command} and in addition,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 4. Asserts that the command box has the error style."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(Index studentIndex, Index subjectIndex, Index syllabusIndex, String filter)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student markedStudent \u003d markStudent(expectedModel, studentIndex, subjectIndex, syllabusIndex);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_MARK_SUCCESS, markedStudent);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandSuccess(MarkCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                + \" \" + studentIndex.getOneBased() + \" \" + subjectIndex.getOneBased()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                + \" \" + syllabusIndex.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Executes {@code command} and in addition,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 1. Asserts that the command box displays an empty string."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 5. Asserts that the command box has the default style class."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Executes {@code command} and in addition,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * 4. Asserts that the command box has the error style."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 7,
      "SusterDrifter": 149,
      "lywjoel": 46
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static final Predicate\u003cStudent\u003e PREDICATE_MATCHING_NO_STUDENTS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cStudent\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Optional\u003cPredicate\u003cStudent\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateFilteredStudentList(predicate.orElse(PREDICATE_MATCHING_NO_STUDENTS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    public static void setFilteredList(Model model, Student... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Student} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private static Predicate\u003cStudent\u003e getPredicateMatching(Student other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        return student -\u003e student.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lywjoel": 9,
      "-": 30
    }
  },
  {
    "path": "src/test/java/systemtests/PayCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongyz"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.PayCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongyz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Payment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongyz"
        },
        "content": "public class PayCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    public void pay() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* ------------------------ Perform pay operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: Update payment for first student in a non-empty TutorHelper,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongyz"
        },
        "content": "         * command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongyz"
        },
        "content": "         * -\u003e pay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String command \u003d \"  paid 1 400 8 2018 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student toPay \u003d model.getFilteredStudentList().get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student paidStudent \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withTuitionTiming(\"Tuesday 8:00pm\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withSubjects(\"Mathematics\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withSyllabus(Index.fromOneBased(1), \"Integration\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withTags(\"friends\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withPayments(\"1 400 8 2018\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, toPay, paidStudent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: undo paying Alice(First student) in the list -\u003e Alice restored */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: redo paying Alice(First student) in the list -\u003e Alice has paid again */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        model.updateStudent("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                getModel().getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased()), paidStudent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: Update payment for last existing student in a non-empty TutorHelper */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d \"paid 7 400 8 2018 \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        toPay \u003d model.getFilteredStudentList().get(6);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        paidStudent \u003d new StudentBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                .withPhone(\"94824420\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withAddress(\"4th street\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withTuitionTiming(\"Friday 5:00pm\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withSubjects(\"Economics\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withSyllabus(Index.fromOneBased(1), \"Macroeconomics\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withPayments(\"4 400 8 2018\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, toPay, paidStudent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: Edit payment for first student in a non-empty TutorHelper -\u003e edit pay */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d \"  paid 1 500 8 2018 \";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index index \u003d INDEX_FIRST_STUDENT;;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withTuitionTiming(\"Tuesday 8:00pm\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withSubjects(\"Mathematics\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withSyllabus(Index.fromOneBased(1), \"Integration\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withTags(\"friends\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withPayments(\"1 500 8 2018\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEditPayCommandSuccess(command, index, editedStudent);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* ----------------- Performing payment operation while a filtered list is being shown ------------------  */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds of TutorHelper and student list -\u003e success */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d \"paid 2 400 8 2018 \";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        toPay \u003d model.getFilteredStudentList().get(3);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        paidStudent \u003d new StudentBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withAddress(\"10th street\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withTuitionTiming(\"Saturday 3:00pm\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withSubjects(\"Mathematics\", \"Physics\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withSyllabus(Index.fromOneBased(1), \"Calculus II\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withSyllabus(Index.fromOneBased(1), \"Statistics I\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withPayments(\"4 400 8 2018\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withTags(\"friends\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, toPay, paidStudent);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds of TutorHelper and student list -\u003e success */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d \"  paid 2 100 8 2018 \";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        index \u003d INDEX_SECOND_STUDENT;;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        editedStudent \u003d new StudentBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withAddress(\"10th street\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withTuitionTiming(\"Saturday 3:00pm\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withSubjects(\"Mathematics\", \"Physics\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withSyllabus(Index.fromOneBased(1), \"Calculus II\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withSyllabus(Index.fromOneBased(1), \"Statistics I\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withPayments(\"4 500 8 2018\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .withTags(\"friends\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertEditPayCommandSuccess(command, index, editedStudent);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds of TutorHelper but out of bounds of student list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongyz"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        int invalidIndex \u003d getModel().getTutorHelper().getStudentList().size();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d PayCommand.COMMAND_WORD + \" \" + invalidIndex"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + \" 200 8 2018\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, student index within bounds but syllabus index is out of bounds"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongyz"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        invalidIndex \u003d getModel().getTutorHelper().getStudentList().size();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d PayCommand.COMMAND_WORD + \" \" + invalidIndex"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                + \" 200 8 2018\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* ------------------------------- Performing invalid payment operation ---------------------------------- */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d PayCommand.COMMAND_WORD + \" 0 200 8 2018\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_INDEX,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d PayCommand.COMMAND_WORD + \" -1 200 8 2018\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_INDEX,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                getModel().getTutorHelper().getStudentList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        command \u003d PayCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased() + \" 200 8 2018\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* Case: invalid number of arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                PayCommand.COMMAND_WORD + \" a b c\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                        PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* Case: invalid number of arguments  -\u003e rejected */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                PayCommand.COMMAND_WORD + \" 200 1 2018\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                        PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                PayCommand.COMMAND_WORD + \" 1 a b c\", String.format(Payment.MESSAGE_PAYMENT_AMOUNT_CONSTRAINTS,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongyz"
        },
        "content": "                        PayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandFailure(\"PAid 1 200 8 2018\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Student)}. Executes {@code command}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertCommandSuccess(String command, Student original, Student toPay) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(original, toPay);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        String expectedResultMessage \u003d String.format(PayCommand.MESSAGE_PAYMENT_SUCCESS, toPay);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Student)} except asserts that"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 2. {@code Storage} and {@code StudentListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @see PayCommandSystemTest"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 4. {@code Storage} and {@code StudentListPanel} remain unchang"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * ed.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the student at index {@code toEdit} being"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * updated to values specified {@code editedStudent}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ongyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "    private void assertEditPayCommandSuccess(String command, Index toEdit, Student editedStudent) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student original \u003d expectedModel.getFilteredStudentList().get(toEdit.getZeroBased());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        expectedModel.updateStudent(original, editedStudent);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String expectedResultMessage \u003d String.format(PayCommand.MESSAGE_EDITPAYMENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ongyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ongyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ongyz"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ongyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongyz": 211,
      "lywjoel": 56
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class SampleDataTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    protected TutorHelper getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public void tutorHelper_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Student[] expectedList \u003d SampleDataUtil.getSampleStudents();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertListMatching(getStudentListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 4,
      "lywjoel": 3,
      "-": 44
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_STUDENT_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "public class SelectCommandSystemTest extends TutorHelperSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: select the first card in the student list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: select the last card in the student list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        Index studentCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + studentCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandSuccess(command, studentCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: select the middle card in the student list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, select index within bounds of TutorHelper but out of bounds of student list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        showStudentsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        int invalidIndex \u003d getModel().getTutorHelper().getStudentList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: filtered student list, select index within bounds of TutorHelper and student list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredStudentList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredStudentList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        /* Case: select from empty TutorHelper -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        deleteAllStudents();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected student.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 4. {@code Storage} and {@code StudentListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "                MESSAGE_SELECT_STUDENT_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getStudentListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lywjoel"
        },
        "content": "     * 4. {@code Storage} and {@code StudentListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * {@code TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "     * @see TutorHelperSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 6,
      "lywjoel": 29,
      "-": 119
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "import seedu.address.model.ReadOnlyTutorHelper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyTutorHelper\u003e tutorHelper, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooihuiying"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(tutorHelper, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooihuiying": 3,
      "-": 71
    }
  },
  {
    "path": "src/test/java/systemtests/TutorHelperSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StudentCardHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StudentListPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "import seedu.address.model.TutorHelper;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": " * A system test class for TutorHelper, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "public abstract class TutorHelperSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "    protected TutorHelper getInitialData() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalStudents.getTypicalTutorHelper();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentListPanelHandle getStudentListPanel() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStudentListPanel();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all students in the TutorHelper."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllStudents() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getTutorHelper().getStudentList().size(), getModel().getFilteredStudentList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all students with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showStudentsWithName(String keyword) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredStudentList().size() \u003c getModel().getTutorHelper().getStudentList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the student at {@code index} of the displayed list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectStudent(Index index) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getStudentListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all students in the TutorHelper."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllStudents() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getTutorHelper().getStudentList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same student objects as {@code expectedModel}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the student list panel displays the students in the model correctly."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertEquals(new TutorHelper(expectedModel.getTutorHelper()), testApp.readStorageTutorHelper());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getStudentListPanel(), expectedModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code StudentListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        getBrowserPanel().rememberStudent();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        getStudentListPanel().rememberSelectedStudentCard();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected student."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @see BrowserPanelHandle#isStudentChanged()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(getBrowserPanel().isStudentChanged());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getStudentListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the student in the student list panel at"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @see BrowserPanelHandle#isStudentChanged()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see StudentListPanelHandle#isSelectedStudentCardChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        getStudentListPanel().navigateToCard(getStudentListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        StudentCardHandle selectedCard \u003d getStudentListPanel().getHandleToSelectedCard();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        Student expectedSelectedStudent \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .withName(selectedCard.getName())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .withPhone(selectedCard.getPhone())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .withEmail(selectedCard.getEmail())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "                .withAddress(selectedCard.getAddress()).build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        Student actualSelectedStudent \u003d getBrowserPanel().getLoadedStudent();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(expectedSelectedStudent.isSameStudent(actualSelectedStudent));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getStudentListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the student list panel remain unchanged."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "     * @see BrowserPanelHandle#isStudentChanged()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see StudentListPanelHandle#isSelectedStudentCardChanged()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertFalse(getBrowserPanel().isStudentChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getStudentListPanel().isSelectedStudentCardChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getStudentListPanel(), getModel().getFilteredStudentList());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SusterDrifter"
        },
        "content": "        assertEquals(getBrowserPanel().DEFAULT_STUDENT, getBrowserPanel().getLoadedStudent());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SusterDrifter": 18,
      "-": 276
    }
  }
]
