[
  {
    "path": ".travis.yml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "language: java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "matrix:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  include:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    - jdk: oraclejdk9"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "before_install:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "  - \"export DISPLAY\u003d:99.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "  - \"sh -e /etc/init.d/xvfb start\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "script: \u003e-"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    ./config/travis/run-checks.sh \u0026\u0026"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    travis_retry ./gradlew clean checkstyleMain checkstyleTest headless allTests coverage coveralls asciidoctor copyDummySearchPage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "deploy:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  skip_cleanup: true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  provider: script"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  script: ./config/travis/deploy_github_pages.sh"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  on:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    branch: master"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "addons:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  apt:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    packages:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      - oracle-java9-installer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "before_cache:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "cache:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  directories:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    - $HOME/.gradle/caches/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    - $HOME/.gradle/wrapper/"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 4,
      "-": 29
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "mainClassName \u003d \u0027seedu.saveit.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    compile group: \u0027org.fxmisc.richtext\u0027, name: \u0027richtextfx\u0027, version: \u00270.9.1\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    archiveName \u003d \u0027saveit.jar\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            test.include \u0027seedu/saveit/**\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            test.include \u0027seedu/saveit/ui/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            test.exclude \u0027seedu/saveit/ui/**\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        \u0027site-name\u0027: \u0027saveit-Level4\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/saveit-level4\u0027,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 2,
      "leo-1997": 7,
      "-": 240
    }
  },
  {
    "path": "src/main/java/seedu/saveit/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/saveit/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ReadOnlySaveIt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.storage.SaveItStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.storage.XmlSaveItStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing SaveIt ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SaveItStorage saveItStorage \u003d new XmlSaveItStorage(userPrefs.getSaveItFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        storage \u003d new StorageManager(saveItStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s saveIt and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * The data from the sample saveIt will be used instead if {@code storage}\u0027s saveIt is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * or an empty saveIt will be used instead if errors occur when reading {@code storage}\u0027s saveIt."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Optional\u003cReadOnlySaveIt\u003e saveItOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        ReadOnlySaveIt initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            saveItOptional \u003d storage.readSaveIt();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            if (!saveItOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample SaveIt\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            initialData \u003d saveItOptional.orElseGet(SampleDataUtil::getSampleSaveIt);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty SaveIt\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            initialData \u003d new SaveIt();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty SaveIt\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            initialData \u003d new SaveIt();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty SaveIt\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        logger.info(\"Starting SaveIt \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping SaveIt ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 20,
      "leo-1997": 25,
      "-": 163
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private String appTitle \u003d \"SaveIt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/EventsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.EventBus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages the event dispatching of the app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCenter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static EventsCenter instance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EventBus eventBus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EventsCenter() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus \u003d new EventBus();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EventsCenter getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            instance \u003d new EventsCenter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void clearSubscribers() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        instance \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void registerHandler(Object handler) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.register(handler);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts an event to the event bus."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.post(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowWidth() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowHeight() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(windowWidth, o.windowWidth)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String LOG_FILE \u003d \"saveit.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "-": 125
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX \u003d \"The issue index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final String MESSAGE_INVALID_SOLUTION_DISPLAYED_INDEX \u003d \"The solution index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_ISSUES_LISTED_OVERVIEW \u003d \"%1$d issues listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_WRONG_DIRECTORY \u003d \"Wrong directory, please check!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 2,
      "leo-1997": 2,
      "xllliu": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/directory/Directory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllliu"
        },
        "content": "package seedu.saveit.commons.core.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllliu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * Represent the directory of current edition by user. It can be passed as parameters to communicate with other"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * components as the directory design is rather complicated. There are three levels: root/issue/solution."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * issue and solution are all one based index. Zero value denotes root directory."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllliu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": "public class Directory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private int issue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private int solution;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * newIssue and newSolution should be non-negative values."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public Directory(int newIssue, int newSolution) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assert newIssue \u003e\u003d 0 \u0026\u0026 newSolution \u003e\u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        issue \u003d newIssue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        solution \u003d newSolution;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * newIssue and newSolution should be non-negative values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static Directory formDirectory(int newIssue, int newSolution) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assert newIssue \u003e\u003d 0 \u0026\u0026 newSolution \u003e\u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return new Directory(newIssue, newSolution);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Judge whether the directory is at Root level."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public boolean isRootLevel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return issue \u003d\u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Judge whether the directory is at Issue level."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public boolean isIssueLevel() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return issue \u003e 0 \u0026\u0026 solution \u003d\u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Judge whether the directory is at Solution level."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public boolean isSolutionLevel() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return issue \u003e 0 \u0026\u0026 solution \u003e 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public int getIssue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return issue;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public int getSolution() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return solution;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"SaveIt/\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        if (issue !\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            result.append(\"Issue \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            result.append(issue);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            result.append(\"/\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            if (solution !\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                result.append(\"Solution \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                result.append(solution);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xllliu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllliu": 72
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * All Events should have a clear unambiguous custom toString message so that feedback message creation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * stays consistent and reusable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/events/model/SaveItChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ReadOnlySaveIt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "/** Indicates the SaveIt in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class SaveItChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public final ReadOnlySaveIt data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public SaveItChangedEvent(ReadOnlySaveIt data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return \"number of issues \" + data.getIssueList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 4,
      "leo-1997": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/events/storage/DataSavingExceptionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates an exception during a file saving"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataSavingExceptionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Exception exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataSavingExceptionEvent(Exception exception) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return exception.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/events/ui/BrowserPanelFocusChangeEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllliu"
        },
        "content": "package seedu.saveit.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllliu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * indicate focus changed to {@code BrowserPanel} when loading a web-page with input text-field."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllliu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": "public class BrowserPanelFocusChangeEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public BrowserPanelFocusChangeEvent() {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllliu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllliu": 16
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/events/ui/ChangeDirectoryRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllliu"
        },
        "content": "package seedu.saveit.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.directory.Directory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllliu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * Indicates a request to jump to the list of issues"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllliu"
        },
        "content": "public class ChangeDirectoryRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public final Directory directory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public ChangeDirectoryRequestEvent(Directory newDirectory) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        this.directory \u003d newDirectory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllliu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllliu": 22
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/events/ui/ExitAppRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request for App termination"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitAppRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * Indicates a request to jump to the list of issues"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/events/ui/JumpToSolutionListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllliu"
        },
        "content": "package seedu.saveit.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllliu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * Indicates a request to jump to the list of issues"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllliu"
        },
        "content": "public class JumpToSolutionListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public JumpToSolutionListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllliu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllliu": 22
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewResultAvailableEvent(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/events/ui/ShowHelpRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ShowHelpRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/events/ui/SolutionPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllliu"
        },
        "content": "package seedu.saveit.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllliu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * Represents a selection change in the Solution List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllliu"
        },
        "content": "public class SolutionPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private final Solution newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public SolutionPanelSelectionChangedEvent(Solution newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public Solution getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllliu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllliu": 26
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private static final String PARTIAL_MATCH_REGEX \u003d \"(.*)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Returns true if the {@code sentence} is partially matched with the {@code word}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     *   Ignores cases and full word is not required."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     *   Examples:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     *      partialMatchIgnoreCase(\"hello there\", \"ello\") \u003d\u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     *      partialMatchIgnoreCase(\"hello there\", \"heLLO\") \u003d\u003d true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @param word cannot be null or empty, must be a single word"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static boolean partialMatchIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return sentence.toLowerCase().matches(PARTIAL_MATCH_REGEX + preppedWord.toLowerCase() + PARTIAL_MATCH_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns true if all the CliSyntax prefix contains in the given {@code"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static boolean arePrefixesPresent(String args, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e args.contains(prefix.getPrefix()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns true if there is at least one of the CliSyntax prefix not contain in the  given {@code"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static boolean arePrefixesNotPresent(String args, Prefix... prefixes) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return Stream.of(prefixes).noneMatch(prefix -\u003e args.contains(prefix.getPrefix()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static boolean arePrefixesValuePresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 26,
      "leo-1997": 4,
      "zhengwei143": 11,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/util/XmlUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Helps with reading from and writing to XML files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the xml data in the file as an object of the specified type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file           Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classToConvert The class corresponding to the xml data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if the file is empty or does not have the correct format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T getDataFromFile(Path file, Class\u003cT\u003e classToConvert)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(classToConvert);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!FileUtil.isFileExists(file)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(classToConvert);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Unmarshaller um \u003d context.createUnmarshaller();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return ((T) um.unmarshal(file.toFile()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the data in the file in xml format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *             Cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if there is an error during converting the data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               into xml and writing to the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveDataToFile(Path file, T data) throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(file)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(data.getClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Marshaller m \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        m.marshal(data, file.toFile());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/AutoSuggestionManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "package seedu.saveit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_SOLUTION_LINK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_STATEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import static seedu.saveit.logic.parser.SaveItParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import org.fxmisc.richtext.InlineCssTextArea;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import javafx.scene.control.CustomMenuItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.FindByTagCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.parser.Prefix;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.suggestion.AutoSuggestion;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.suggestion.CopyExistingAutoSuggestion;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.suggestion.IssueNameAutoSuggestion;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.suggestion.TagNameAutoSuggestion;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * The TextField component which supports auto key word suggestion"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "public class AutoSuggestionManager extends InlineCssTextArea {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String WORD_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String WORD_TAG \u003d \"tag\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String DUMMY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String WHITESPACE_IDENTIFIER \u003d \" \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String TAG_PREFIX_IDENTIFIER \u003d \"t/\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    // To get substring after whitespace, substring starting index has to be increased by 1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final int STRING_INDEX_ADJUSTMENT_WHITESPACE \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    // To get substring after tag prefix, substring starting index has to be increased by 2"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final int STRING_INDEX_ADJUSTMENT_TAG_PREFIX \u003d 2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final int MAX_NUMBER \u003d 5;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private ContextMenu popUpWindow;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private IssueNameAutoSuggestion issueSuggestion;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private TagNameAutoSuggestion tagSuggestion;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public AutoSuggestionManager() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Adds new listener to the text field to handle the key suggestion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void initialise(Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        issueSuggestion \u003d new IssueNameAutoSuggestion(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        tagSuggestion \u003d new TagNameAutoSuggestion(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        popUpWindow \u003d new ContextMenu();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.textProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(newValue);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            if (!matcher.matches()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                popUpWindow.hide();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                addCommandListener(commandWord, arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                editCommandListener(commandWord, arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                findCommandListener(commandWord, arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            case FindByTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            case FindByTagCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                findTagCommandListener(commandWord, arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                popUpWindow.hide();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Handles the method call to display the suggestion box"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private void handleCopyExisting(Index index, Prefix prefix) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        AutoSuggestion suggestion \u003d new CopyExistingAutoSuggestion(logic, index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // TODO: Temporarily feed in empty string, need refactoring"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        LinkedList\u003cString\u003e values \u003d suggestion.giveSuggestion(prefix.getPrefix());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        showSuggestionWindow(values, getCaretPosition(), suggestion, DUMMY_STRING);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Listener for the {@code AddCommand}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void addCommandListener(String commandWord, String arguments) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        if (arguments.length() !\u003d 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            handleSuggestionForAddingEditing();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Listener for the {@code FindByTagCommand}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void findTagCommandListener(String commandWord, String arguments) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (arguments.length() !\u003d 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            handleSuggestionForFinding();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Listener for the {@code EditCommand}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void editCommandListener(String commandWord, String arguments) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_STATEMENT, PREFIX_DESCRIPTION, PREFIX_SOLUTION_LINK,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                        PREFIX_REMARK, PREFIX_TAG);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultiMap.getPreamble());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            // TODO: Throw some exception?"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        String i \u003d argMultiMap.getPreamble();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        int position \u003d getCaretPosition() - commandWord.length();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        Prefix prefix \u003d argMultiMap.findNearestPrefixKey(position);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        if (prefix \u003d\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // Differentiate suggestion based on prefix"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        if (prefix.equals(PREFIX_STATEMENT) || prefix.equals(PREFIX_DESCRIPTION)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            Optional\u003cString\u003e posArgs \u003d argMultiMap.getValue(prefix);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            // Only show AutoSuggestion box if the string is empty"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            if (posArgs.isPresent() \u0026\u0026 posArgs.get().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                handleCopyExisting(index, prefix);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                popUpWindow.hide();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        } else if (prefix.equals(PREFIX_TAG)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            handleSuggestionForAddingEditing();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Listener for the {@code FindCommand}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void findCommandListener(String commandWord, String arguments) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        if (arguments.length() !\u003d 0) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            handleSuggestionForFinding();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Updates the keywords stored in the class whenever there is a change on issue list in the storage."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void update(Logic logic) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        issueSuggestion.update(logic);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        tagSuggestion.update(logic);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Analyses the input String and give suggestion for find and findtag command"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private void handleSuggestionForFinding() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String mainText \u003d getText();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        int startingIndex \u003d mainText.indexOf(WHITESPACE_IDENTIFIER) + STRING_INDEX_ADJUSTMENT_WHITESPACE;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String text \u003d startingIndex \u003d\u003d -1 ? mainText.trim() : mainText.substring(startingIndex).trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        LinkedList\u003cString\u003e searchResult \u003d mainText.contains(WORD_TAG) ? tagSuggestion.giveSuggestion(text)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                : issueSuggestion.giveSuggestion(text);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        AutoSuggestion suggestion \u003d mainText.contains(WORD_TAG) ? tagSuggestion : issueSuggestion;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        showWindow(searchResult, text, startingIndex, suggestion, DUMMY_STRING);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Analyses the input String and give suggestion for tags in add and edit command"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private void handleSuggestionForAddingEditing() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String cursorString \u003d getText().substring(0, getCaretPosition());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (cursorString.lastIndexOf(TAG_PREFIX_IDENTIFIER) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        int startingIndex \u003d cursorString.lastIndexOf(TAG_PREFIX_IDENTIFIER);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String afterText \u003d getText().substring(getCaretPosition(), getText().length());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String substring \u003d cursorString.substring(startingIndex, getCaretPosition());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        startingIndex +\u003d STRING_INDEX_ADJUSTMENT_TAG_PREFIX;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String text \u003d substring.contains(WHITESPACE_IDENTIFIER) ? DUMMY_STRING"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                : substring.replaceFirst(TAG_PREFIX_IDENTIFIER, DUMMY_STRING);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        LinkedList\u003cString\u003e searchResult \u003d tagSuggestion.giveSuggestion(text);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        showWindow(searchResult, text, startingIndex, tagSuggestion, afterText);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Handles the pop up window"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * @param searchResult List of strings used to create the items"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * @param text The context which user enters"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * @param startingIndex position where the argument starts"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * @param suggestion The AutoSuggestion object being used"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * @param afterText The command line string will be truncated into three parts when dealing with tag,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * it represents the last truncated part which is after the cursor position."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private void showWindow(LinkedList\u003cString\u003e searchResult, String text, int startingIndex,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            AutoSuggestion suggestion, String afterText) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (searchResult.size() \u003e 0 \u0026\u0026 text.length() \u003e 0) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            //hide the suggestion window if the issue statement is already entered completely"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            if (searchResult.size() \u003d\u003d 1 \u0026\u0026 searchResult.get(0).equals(text)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                popUpWindow.hide();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                showSuggestionWindow(searchResult, startingIndex, suggestion, afterText);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            popUpWindow.hide();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Fills in suggestion content and shows the pop up window"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @param searchResult List of strings used to create the items"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @param startingIndex position where the argument starts"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @param suggestion the AutoSuggestion object being used"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private void showSuggestionWindow(LinkedList\u003cString\u003e searchResult,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            int startingIndex, AutoSuggestion suggestion, String afterText) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        int count \u003d Math.min(searchResult.size(), MAX_NUMBER);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // Builds the dropdown"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        List\u003cCustomMenuItem\u003e menuItems \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            final String result \u003d searchResult.get(i);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            final String previousText \u003d getText();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            Label entryLabel \u003d new Label(result);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            requestFocus();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            CustomMenuItem item \u003d new CustomMenuItem(entryLabel, true);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            item.setOnAction(suggestion.getItemHandler(this, previousText, afterText, startingIndex, i));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            menuItems.add(item);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        popUpWindow.getItems().clear();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        popUpWindow.getItems().addAll(menuItems);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        getFocused();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        popUpWindow.show(this, Side.BOTTOM, (double) startingIndex * 8, 0);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Makes the popup window get ready to get focused before next showing"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private void getFocused() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        popUpWindow.show(AutoSuggestionManager.this, Side.BOTTOM, (double) getCaretPosition() * 8, 0);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        popUpWindow.hide();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Gets the contextMenu"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public ContextMenu getWindow() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return popUpWindow;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 154,
      "zhengwei143": 138
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of issues */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    ObservableList\u003cIssue\u003e getFilteredAndSortedIssueList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**Returns an unmodifiable view of the filtered list of solutions of the selected issue */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    ObservableList\u003cSolution\u003e getFilteredSolutionList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 5,
      "xllliu": 4,
      "-": 21,
      "yshu7": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.logic.commands.DangerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.SaveItParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String CONFIRM_WORD \u003d \"Yes\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String CONFIRM_ALIAS \u003d \"Y\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final SaveItParser saveItParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private DangerCommand bufferedCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveItParser \u003d new SaveItParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        bufferedCommand \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            // handle buffered command before executing other command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            if (requireConfirmationBeforeExecution(bufferedCommand)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                return handleBufferedCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            Command command \u003d saveItParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            if (requireConfirmationBeforeExecution(command)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                setBufferedCommand((DangerCommand) command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                return bufferedCommand.askForConfirmation();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                return command.execute(model, history);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public ObservableList\u003cIssue\u003e getFilteredAndSortedIssueList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return model.getFilteredAndSortedIssueList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public ObservableList\u003cSolution\u003e getFilteredSolutionList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        ObservableList\u003cSolution\u003e k \u003d model.getFilteredSolutionList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return k;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Check if a buffered command can be executed based on {@code commandText}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Update {@code bufferedCommand} to null."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private CommandResult handleBufferedCommand(String commandText) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        DangerCommand command \u003d bufferedCommand;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        resetBufferedCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (commandText.equals(CONFIRM_WORD) || commandText.equals(CONFIRM_ALIAS)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            return command.failedConfirmation();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Check if a command requires confirmation before being executed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private boolean requireConfirmationBeforeExecution(Command command) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return command instanceof DangerCommand;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private void setBufferedCommand(DangerCommand command) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        bufferedCommand \u003d command;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private void resetBufferedCommand() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        bufferedCommand \u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 3,
      "leo-1997": 10,
      "xllliu": 7,
      "-": 37,
      "yshu7": 48
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_REMARK_STRING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_SOLUTION_LINK_STRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_STATEMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Adds an issue to the saveIt."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an issue to the saveIt. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            + PREFIX_STATEMENT + \"ISSUE_STATEMENT \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            + PREFIX_TAG + \"algorithm \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + PREFIX_TAG + \"java\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + \"_____________________________\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + \": Adds a solution to a existing issue. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + PREFIX_SOLUTION_LINK_STRING + \"SOLUTION_LINK\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + PREFIX_REMARK_STRING + \"SOLUTION_REMARK\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MESSAGE_ISSUE_SUCCESS \u003d \"New issue added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ISSUE \u003d \"This issue already exists in the saveIt\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SOLUTION \u003d \"This solution already exists in the given issue\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String DUMMY_STATEMENT \u003d \"dummyStatement\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String DUMMY_DESCRIPTION \u003d \"dummyDescription\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String MESSAGE_FAILED_ISSUE \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            \"Issue has to be selected first before adding solution\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String MESSAGE_WRONG_DIRECTORY \u003d \"Wrong directory, please check!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String MESSAGE_SOLUTION_SUCCESS \u003d \"New solution added: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private boolean addSolution;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private final Solution solutionToBeAdded;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private final Issue toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Issue}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public AddCommand(Issue issue) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (issue.getStatement().issue.equals(DUMMY_STATEMENT) \u0026\u0026 issue.getDescription().value"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                .equals(DUMMY_DESCRIPTION)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            addSolution \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            assert (issue.getSolutions().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            solutionToBeAdded \u003d issue.getSolutions().get(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            toAdd \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            addSolution \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            requireNonNull(issue);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            toAdd \u003d issue;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            solutionToBeAdded \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Add a solution to a existing issue in the issue list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private void addSolutionToIssue(Model model, Index index) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (model.hasSolution(index, solutionToBeAdded)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SOLUTION);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        model.addSolution(index, solutionToBeAdded);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        model.commitSaveIt();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (addSolution) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            if (model.getCurrentDirectory().isIssueLevel()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                Index issueIndex \u003d Index.fromOneBased(model.getCurrentDirectory().getIssue());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                addSolutionToIssue(model, issueIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SOLUTION_SUCCESS, solutionToBeAdded));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                throw new CommandException(MESSAGE_FAILED_ISSUE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (model.getCurrentDirectory().isIssueLevel()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_DIRECTORY);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (model.hasIssue(toAdd)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.addIssue(toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.commitSaveIt();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        addSolution \u003d false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ISSUE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 8,
      "leo-1997": 74,
      "xllliu": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/AddTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * To rename or remove a spcific tag for all entries with that tag."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtag\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"at\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_ADD_TAG_SUCCESS \u003d \"Add tags success\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        COMMAND_WORD + \": To add tags for an issue.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            + \"Parameters: INDEX t/NEW_TAG [t/NEW_TAG2]... \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 t/python t/java\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @param index the issue index that tag will be add"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @param tagList the new tag(s) to be added to saveIt"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public AddTagCommand(Index index, Set\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireNonNull(tagList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        this.tagList \u003d tagList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.addTag(index, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.updateFilteredIssueList(Model.PREDICATE_SHOW_ALL_ISSUES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.commitSaveIt();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return new CommandResult(MESSAGE_ADD_TAG_SUCCESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            || (other instanceof RefactorTagCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jasonvank": 57
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Clears the saveIt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class ClearCommand extends DangerCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"SaveIt has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.resetData(new SaveIt());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.commitSaveIt();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public CommandResult askForConfirmation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return new CommandResult(String.format(ASK_FOR_CONFIRMATION, COMMAND_WORD));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public CommandResult failedConfirmation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return new CommandResult(String.format(CONFIRMATION_FAILED, COMMAND_WORD));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 6,
      "leo-1997": 4,
      "-": 16,
      "yshu7": 11
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final int ROOT_DIRECTORY \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 4,
      "xllliu": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/DangerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yshu7"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yshu7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yshu7"
        },
        "content": " * Represents a danger command that needs confirmation before being executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yshu7"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public abstract class DangerCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String ASK_FOR_CONFIRMATION \u003d \"Are you sure to %s ? Please enter Yes(Y) to confirm.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String CONFIRMATION_FAILED \u003d \"Didn\u0027t %s.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public abstract CommandResult askForConfirmation();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public abstract CommandResult failedConfirmation();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yshu7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yshu7": 12
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Deletes an issue identified using it\u0027s displayed index from the saveIt."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + \": Deletes the issue identified by the index number used in the displayed issue list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MESSAGE_DELETE_ISSUE_SUCCESS \u003d \"Deleted Issue: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        List\u003cIssue\u003e lastShownList \u003d model.getFilteredAndSortedIssueList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Issue issueToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.deleteIssue(issueToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.commitSaveIt();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ISSUE_SUCCESS, issueToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 5,
      "leo-1997": 12,
      "-": 39,
      "yshu7": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_SOLUTION_LINK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_STATEMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.directory.Directory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Edits the details of an existing issue in the saveIt."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ISSUE \u003d \"This issue already exists in the saveIt.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_EDIT_ISSUE_SUCCESS \u003d \"Edited Issue: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" command format: \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        + \"Edit issue by the index number used in the displayed list: \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        + \"******  \" + COMMAND_WORD + \" INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        + \"[\" + PREFIX_STATEMENT + \"ISSUE_STATEMENT] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        + \"Edit solution by the index number used in the displayed solution list: \\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        + \"******  \" + COMMAND_WORD + \" INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        + \"[\" + PREFIX_SOLUTION_LINK + \"NEW_SOLUTION_LINK] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        + \"[\" + PREFIX_REMARK + \"NEW_SOLUTION_REMARK] \\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String DUMMY_SOLUTION_REMARK \u003d \"dummySolutionRemark\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String DUMMY_SOLUTION_LINK \u003d \"https://www.dummySolutionLink.com\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private final EditIssueDescriptor editIssueDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @param index of the issue in the filtered issue list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * @param editIssueDescriptor details to edit the issue with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public EditCommand(Index index, EditIssueDescriptor editIssueDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        requireNonNull(editIssueDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        this.editIssueDescriptor \u003d editIssueDescriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Issue issueToEdit;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        List\u003cIssue\u003e lastShownList \u003d model.getFilteredAndSortedIssueList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        Directory currentDirectory \u003d model.getCurrentDirectory();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (currentDirectory.isRootLevel() \u0026\u0026 editIssueDescriptor.isAnyIssueFieldEdited()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            issueToEdit \u003d getIssueToEdit(lastShownList, lastShownList.size(), index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        } else if ((currentDirectory.isIssueLevel() || currentDirectory.isSolutionLevel()) \u0026\u0026 editIssueDescriptor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            .isAnySolutionFieldEdited()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            int solutionListSize \u003d lastShownList.get(currentDirectory.getIssue() - 1).getSolutions().size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            issueToEdit \u003d getIssueToEdit(lastShownList, solutionListSize, currentDirectory.getIssue() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_WRONG_DIRECTORY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Issue editedIssue \u003d createEditedIssue(issueToEdit, editIssueDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (!issueToEdit.isSameIssue(editedIssue) \u0026\u0026 model.hasIssue(editedIssue)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.updateIssue(issueToEdit, editedIssue);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.updateFilteredIssueList(Model.PREDICATE_SHOW_ALL_ISSUES);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.commitSaveIt();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ISSUE_SUCCESS, editedIssue));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Issue getIssueToEdit(List\u003cIssue\u003e lastShownList, int listSize, int issueIndex)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Issue issueToEdit;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (index.getZeroBased() \u003c listSize) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            issueToEdit \u003d lastShownList.get(issueIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return issueToEdit;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Creates and returns a {@code Issue} with the details of {@code issueToEdit} edited with {@code"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * editIssueDescriptor}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static Issue createEditedIssue(Issue issueToEdit, EditIssueDescriptor editIssueDescriptor)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assert issueToEdit !\u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        List\u003cSolution\u003e updatedSolutions;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (editIssueDescriptor.getIndex() !\u003d -1) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            updatedSolutions \u003d new ArrayList\u003c\u003e(issueToEdit.getSolutions());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            assert (editIssueDescriptor.getSolution() !\u003d null);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            Solution updatedSolution \u003d processNewSolution(editIssueDescriptor.getIndex(), issueToEdit,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                editIssueDescriptor.getSolution().get());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            updatedSolutions.set(editIssueDescriptor.getIndex(), updatedSolution);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            updatedSolutions \u003d editIssueDescriptor.getSolutions().orElse(issueToEdit.getSolutions());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        IssueStatement updatedName \u003d editIssueDescriptor.getStatement().orElse(issueToEdit.getStatement());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        Description updatedDescription \u003d editIssueDescriptor.getDescription().orElse(issueToEdit.getDescription());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editIssueDescriptor.getTags().orElse(issueToEdit.getTags());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return new Issue(updatedName, updatedDescription, updatedSolutions, updatedTags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Creates and returns a {@code index} with the details of {@code issueToEdit} edited with {@code"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * editIssueDescriptor}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static Solution processNewSolution(int index, Issue issueToEdit, Solution newSolution)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // if in the home directory, should not process this"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (index \u003e\u003d issueToEdit.getSolutions().size()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            Solution oldSolution \u003d issueToEdit.getSolutions().get(index);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            Solution updatedSolution;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            String updatedSolutionLink \u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                newSolution.getLink().getValue().equals(DUMMY_SOLUTION_LINK) ? oldSolution.getLink().getValue()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    : newSolution.getLink().getValue();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            String updatedSolutionRemark \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                newSolution.getRemark().getValue().equals(DUMMY_SOLUTION_REMARK) ? oldSolution.getRemark().getValue()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    : newSolution.getRemark().getValue();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            updatedSolution \u003d new Solution(updatedSolutionLink, updatedSolutionRemark);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return updatedSolution;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            \u0026\u0026 editIssueDescriptor.equals(e.editIssueDescriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Stores the details to edit the issue with. Each non-empty field value will replace the corresponding field value"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * of the issue."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static class EditIssueDescriptor {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        private IssueStatement statement;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        private List\u003cSolution\u003e solutions;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        private int index \u003d -1;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        private Solution solution;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public EditIssueDescriptor() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public EditIssueDescriptor(Index index, Solution solution) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            this.solution \u003d solution;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            this.index \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        public EditIssueDescriptor(EditIssueDescriptor toCopy) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            this.index \u003d toCopy.getIndex();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            setStatement(toCopy.statement);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            setSolutions(toCopy.solutions);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public int getIndex() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "         * Returns true if at least one field of issue level is edited."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public boolean isAnyIssueFieldEdited() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return CollectionUtil.isAnyNonNull(statement, description, tags);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "         * Returns true if solution field is edited."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public boolean isAnySolutionFieldEdited() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return CollectionUtil.isAnyNonNull(solution);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void setStatement(IssueStatement statement) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            this.statement \u003d statement;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public Optional\u003cIssueStatement\u003e getStatement() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return Optional.ofNullable(statement);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public Optional\u003cSolution\u003e getSolution() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return Optional.ofNullable(solution);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void setSolutions(List\u003cSolution\u003e solutions) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            this.solutions \u003d (solutions !\u003d null) ? new ArrayList\u003c\u003e(solutions) : null;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        public Optional\u003cList\u003cSolution\u003e\u003e getSolutions() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            return (solutions !\u003d null) ? Optional.of(Collections.unmodifiableList(solutions)) : Optional.empty();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException} if modification is"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "         * attempted. Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            if (!(other instanceof EditIssueDescriptor)) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            EditIssueDescriptor e \u003d (EditIssueDescriptor) other;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return getStatement().equals(e.getStatement())"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                \u0026\u0026 getSolutions().equals(e.getSolutions())"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 139,
      "leo-1997": 31,
      "xllliu": 15,
      "-": 105,
      "yshu7": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"x\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting SaveIt as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 2,
      "leo-1997": 5,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/FindByTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueHasTagsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " * Finds and lists all issues in saveIt that contains all the tags"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class FindByTagCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findtag\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ft\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all issues that contain all the tags \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            + \"represented by the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" java IndexOutOfBounds\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private final IssueHasTagsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public FindByTagCommand(IssueHasTagsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        model.filterIssues(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                String.format(Messages.MESSAGE_ISSUES_LISTED_OVERVIEW, model.getFilteredAndSortedIssueList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                || (other instanceof FindByTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindByTagCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 5,
      "zhengwei143": 36,
      "yshu7": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Finds and lists all issues in saveIt whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all issues whose statements contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private final IssueContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public FindCommand(IssueContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        model.filterIssues(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                String.format(Messages.MESSAGE_ISSUES_LISTED_OVERVIEW, model.getFilteredAndSortedIssueList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 2,
      "leo-1997": 5,
      "zhengwei143": 3,
      "xllliu": 1,
      "-": 32,
      "yshu7": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"his\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 2,
      "leo-1997": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/HomeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.directory.Directory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.ui.ChangeDirectoryRequestEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllliu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "public class HomeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"home\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"hm\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Return to the home directory.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        model.updateFilteredIssueList(Model.PREDICATE_SHOW_ALL_ISSUES);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        model.resetDirectory(new Directory(0, 0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeDirectoryRequestEvent(new Directory(0, 0)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllliu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 3,
      "xllliu": 25
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * Lists all issues in the saveIt to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all issues\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.updateFilteredIssueList(Model.PREDICATE_SHOW_ALL_ISSUES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 2,
      "leo-1997": 4,
      "-": 16,
      "yshu7": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Reverts the {@code model}\u0027s saveIt to its previously undone state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (!model.canRedoSaveIt()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.redoSaveIt();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.updateFilteredIssueList(Model.PREDICATE_SHOW_ALL_ISSUES);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 6,
      "leo-1997": 4,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/RefactorTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * To rename or remove a specified tag for all entries with that tag."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class RefactorTagCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"refactortag\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"rt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_REFACTOR_TAG_SUCCESS \u003d \"Refactoring tag success\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_REFACTOR_TAG_FAILURE \u003d \"Refactoring tag is unsuccessful due to no such tag\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        COMMAND_WORD + \": To rename or remove a specific tag for all entries with that tag.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            + \"Parameters: t/OLD_TAG [n/NEW_TAG] \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" t/python n/java\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String DUMMY_TAG \u003d \"dummyTag\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final Tag oldTag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final Tag newTag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Issue editedIssue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private boolean isEdit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @param oldTag the tag will be replaced"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @param newTag the new tag that will replace original one"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public RefactorTagCommand(Tag oldTag, Tag newTag) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireNonNull(oldTag);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        this.oldTag \u003d oldTag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        this.newTag \u003d newTag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        editedIssue \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        this.isEdit \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        isEdit \u003d model.refactorTag(oldTag, newTag);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.updateFilteredIssueList(Model.PREDICATE_SHOW_ALL_ISSUES);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.commitSaveIt();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (isEdit) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return new CommandResult(MESSAGE_REFACTOR_TAG_SUCCESS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return new CommandResult(MESSAGE_REFACTOR_TAG_FAILURE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            || (other instanceof RefactorTagCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            || (editedIssue.equals(((RefactorTagCommand) other).editedIssue)); //state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jasonvank": 61,
      "leo-1997": 6
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/RetrieveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.awt.datatransfer.Clipboard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.awt.datatransfer.StringSelection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * Retrieves the solution link of an existing solution in a issue in the saveIt."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "public class RetrieveCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"retrieve\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"rv\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + \": Retrieves the solution which is identified by the index number in the selected issue and \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + \"copy it to the system clipboard.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MESSAGE_RETRIEVE_LINK_SUCCESS \u003d \"Solution link no. %1$s is pasted to the \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + \"clipboard.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MESSAGE_FAILED_SELECTION \u003d \"Issue has to be selected first before \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + \"retrieving solution link.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MESSAGE_FAILED_SOLUTION \u003d \"The solution index provided is invalid\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private final Index targetedIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * @param targetedIndex of the solution in the selected issue."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public RetrieveCommand(Index targetedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.targetedIndex \u003d targetedIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        int issueIndex \u003d model.getCurrentDirectory().getIssue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        List\u003cIssue\u003e lastShownList \u003d model.getFilteredAndSortedIssueList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Issue selectedIssue;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (issueIndex \u003e 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            selectedIssue \u003d lastShownList.get(issueIndex - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                String selectedLink \u003d selectedIssue.getSolutions().get(targetedIndex.getZeroBased())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                        .getLink().getValue();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                copyToClipBoard(selectedLink);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                return new CommandResult("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                        String.format(MESSAGE_RETRIEVE_LINK_SUCCESS, targetedIndex.getOneBased()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                throw new CommandException(MESSAGE_FAILED_SOLUTION);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new CommandException(MESSAGE_FAILED_SELECTION);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Copy the solution link {@code String} to the system clipboard."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private void copyToClipBoard(String solution) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Clipboard clipBoard \u003d Toolkit.getDefaultToolkit().getSystemClipboard();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        StringSelection selection \u003d new StringSelection(solution);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        clipBoard.setContents(selection, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                || (other instanceof RetrieveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                \u0026\u0026 targetedIndex.equals(((RetrieveCommand) other).targetedIndex));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 83,
      "xllliu": 1,
      "yshu7": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.directory.Directory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.ui.ChangeDirectoryRequestEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.ui.JumpToSolutionListRequestEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Selects an issue identified using it\u0027s displayed index from the saveIt."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * Change the current directory to the selected issue."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            + \": Selects the issue identified by the index number used in the displayed issue list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MESSAGE_SELECT_ISSUE_SUCCESS \u003d \"Selected Issue: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final String MESSAGE_SELECT_SOLUTION_SUCCESS \u003d \", Solution: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        if (model.getCurrentDirectory().isRootLevel()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            return selectIssue(model, history);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            return selectSolution(model, history);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * execute command for selecting an {@code Issue}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private CommandResult selectIssue(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        List\u003cIssue\u003e filteredIssueList \u003d model.getFilteredAndSortedIssueList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredIssueList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        model.resetDirectory(new Directory(targetIndex.getOneBased(), 0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        EventsCenter.getInstance().post("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                new ChangeDirectoryRequestEvent(model.getCurrentDirectory()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_ISSUE_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * execute command for selecting a {@code Solution}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private CommandResult selectSolution(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getFilteredSolutionList().size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SOLUTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        model.resetDirectory(new Directory(model.getCurrentDirectory().getIssue(), targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        EventsCenter.getInstance().post("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                new ChangeDirectoryRequestEvent(model.getCurrentDirectory()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToSolutionListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                String.format(MESSAGE_SELECT_ISSUE_SUCCESS, model.getCurrentDirectory().getIssue())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                        + String.format(MESSAGE_SELECT_SOLUTION_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 2,
      "leo-1997": 13,
      "xllliu": 38,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yshu7"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.commons.core.directory.Directory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.model.issue.IssueSort;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yshu7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yshu7"
        },
        "content": " * Lists all persons in the saveIt to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"sr\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sort all issues with index numbers based on \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            + \"the provided sortType: freq (search frequency), chro (chronological), tag (tag names).\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            + \"Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + IssueSort.TAG_SORT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted issues by %s.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private final IssueSort sortType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public SortCommand(IssueSort sortType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        this.sortType \u003d sortType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Directory currentDirectory \u003d model.getCurrentDirectory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (!currentDirectory.isRootLevel()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_WRONG_DIRECTORY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        model.sortIssues(sortType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                String.format(MESSAGE_SUCCESS, sortType.getSortType()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                \u0026\u0026 sortType.equals(((SortCommand) other).sortType)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yshu7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yshu7": 52
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Reverts the {@code model}\u0027s saveIt to its previous state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (!model.canUndoSaveIt()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.undoSaveIt();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.updateFilteredIssueList(Model.PREDICATE_SHOW_ALL_ISSUES);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 6,
      "leo-1997": 4,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.util.StringUtil.arePrefixesNotPresent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.util.StringUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_SOLUTION_LINK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_STATEMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String DUMMY_SOLUTION_LINK \u003d \"https://www.dummySolutionLink.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String DUMMY_SOLUTION_REMARK \u003d \"dummySolutionRemark\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String NO_LINK_EXCEPTION \u003d \"Please enter solution link\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String NO_REMARK_EXCEPTION \u003d \"Please enter solution remark\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String NO_STATEMENT_EXCEPTION \u003d \"Please enter statement\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String NO_DESCRIPTION_EXCEPTION \u003d \"Please enter description\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand and returns an AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STATEMENT, PREFIX_DESCRIPTION, PREFIX_SOLUTION_LINK,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                        PREFIX_REMARK, PREFIX_TAG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (arePrefixesPresent(args, PREFIX_STATEMENT, PREFIX_DESCRIPTION, PREFIX_TAG) \u0026\u0026 argMultimap"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                .getPreamble().isEmpty() \u0026\u0026 arePrefixesNotPresent(args, PREFIX_SOLUTION_LINK,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                PREFIX_REMARK)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            return handleAddIssueParser(argMultimap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        } else if (arePrefixesPresent(args, PREFIX_SOLUTION_LINK, PREFIX_REMARK)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                \u0026\u0026 arePrefixesNotPresent(args, PREFIX_STATEMENT, PREFIX_DESCRIPTION, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            return handleAddSolutionParser(argMultimap);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Handles parsing the add command which intends to add a new issue."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private AddCommand handleAddIssueParser(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        IssueStatement statement;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATEMENT).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            statement \u003d ParserUtil.parseStatement(argMultimap.getValue(PREFIX_STATEMENT).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new ParseException(NO_STATEMENT_EXCEPTION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Description description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new ParseException(NO_DESCRIPTION_EXCEPTION);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        List\u003cSolution\u003e solutionList \u003d ParserUtil.parseSolutions(DUMMY_SOLUTION_LINK, DUMMY_SOLUTION_REMARK);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Issue issue \u003d new Issue(statement, description, solutionList, tagList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return new AddCommand(issue);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Handles parsing the add command which intends to add solution."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private AddCommand handleAddSolutionParser(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String solutionLink;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SOLUTION_LINK).isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            solutionLink \u003d ParserUtil.parseSolutionLink(argMultimap.getValue(PREFIX_SOLUTION_LINK).get()).getValue();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new ParseException(NO_LINK_EXCEPTION);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String solutionRemark;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            solutionRemark \u003d ParserUtil.parseSolutionRemark(argMultimap.getValue(PREFIX_REMARK).get()).getValue();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new ParseException(NO_REMARK_EXCEPTION);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        List\u003cSolution\u003e solutionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        solutionList.add(new Solution(solutionLink, solutionRemark));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Set\u003cTag\u003e dummyTagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Issue issue \u003d new Issue(new IssueStatement(AddCommand.DUMMY_STATEMENT),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                new Description(AddCommand.DUMMY_DESCRIPTION),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                solutionList, dummyTagList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return new AddCommand(issue);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 2,
      "leo-1997": 93,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/AddTagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.commons.util.StringUtil.arePrefixesNotPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_NEW_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_SOLUTION_LINK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_STATEMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Parses input arguments and creates a new AddTagCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTagCommand and returns an AddTagCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public AddTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            ArgumentTokenizer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                .tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent() \u0026\u0026 arePrefixesNotPresent(args,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            PREFIX_SOLUTION_LINK, PREFIX_REMARK, PREFIX_STATEMENT, PREFIX_DESCRIPTION, PREFIX_NEW_TAG)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return new AddTagCommand(index, tagList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 56
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Attempts to find the {@code Prefix} used as the key with the same position as the caret"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @param caretPosition"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @return Prefix if found and null if not"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public Prefix findNearestPrefixKey(int caretPosition) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        Set\u003cPrefix\u003e keySet \u003d argMultimap.keySet();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        List\u003cPrefix\u003e filtered \u003d keySet.stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                .filter(prefix -\u003e prefix.getPosition() \u003c\u003d (caretPosition - prefix.getPrefix().length()))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        if (filtered.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // Should get the last matched Prefix (as it is the closest to the caret)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return filtered.get(filtered.size() - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "zhengwei143": 20,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        List\u003cPrefix\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private static List\u003cPrefix\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private static List\u003cPrefix\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        List\u003cPrefix\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            // Create a new Prefix with the position it is found at"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            Prefix extendedPrefix \u003d new Prefix(prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefix\u003e prefixPositions) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getPosition() - prefix2.getPosition());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        Prefix preambleMarker \u003d new Prefix(\"\", 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        Prefix endPositionMarker \u003d new Prefix(\"\", argsString.length());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                                        Prefix currentPrefixPosition,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                                        Prefix nextPrefixPosition) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getPosition() + currentPrefixPosition.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "zhengwei143": 15,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final String PREFIX_STATEMENT_STRING \u003d \"i/\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final String PREFIX_SOLUTION_LINK_STRING \u003d \"s/\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final String PREFIX_REMARK_STRING \u003d \"r/\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final String PREFIX_DESCRIPTION_STRING \u003d \"d/\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final String PREFIX_TAG_STRING \u003d \"t/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final String PREFIX_NEW_TAG_STRING \u003d \"n/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final Prefix PREFIX_STATEMENT \u003d new Prefix(PREFIX_STATEMENT_STRING);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final Prefix PREFIX_SOLUTION_LINK \u003d new Prefix(PREFIX_SOLUTION_LINK_STRING);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(PREFIX_REMARK_STRING);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(PREFIX_DESCRIPTION_STRING);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(PREFIX_TAG_STRING);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final Prefix PREFIX_NEW_TAG \u003d new Prefix(PREFIX_NEW_TAG_STRING);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "zhengwei143": 13,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 5,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.util.StringUtil.arePrefixesNotPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.util.StringUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_SOLUTION_LINK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_STATEMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.EditCommand.EditIssueDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand and returns an EditCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            ArgumentTokenizer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                .tokenize(args, PREFIX_STATEMENT, PREFIX_DESCRIPTION, PREFIX_SOLUTION_LINK, PREFIX_REMARK, PREFIX_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // check if the command is correct"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if ((arePrefixesPresent(args, PREFIX_STATEMENT, PREFIX_DESCRIPTION, PREFIX_TAG)) \u0026\u0026 arePrefixesNotPresent(args,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            PREFIX_SOLUTION_LINK, PREFIX_REMARK)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return getIssueLevelEditCommand(argMultimap, index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        } else if (arePrefixesNotPresent(args, PREFIX_STATEMENT, PREFIX_DESCRIPTION, PREFIX_TAG) \u0026\u0026 ("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            arePrefixesPresent(args, PREFIX_SOLUTION_LINK, PREFIX_REMARK))) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return getSolutionLevelEditCommand(argMultimap, index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private EditCommand getIssueLevelEditCommand(ArgumentMultimap argMultimap, Index index) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditIssueDescriptor editIssueDescriptor \u003d new EditIssueDescriptor();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATEMENT).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            IssueStatement statement \u003d ParserUtil.parseStatement(argMultimap.getValue(PREFIX_STATEMENT).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            editIssueDescriptor.setStatement(statement);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            editIssueDescriptor.setDescription(description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editIssueDescriptor::setTags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return new EditCommand(index, editIssueDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private EditCommand getSolutionLevelEditCommand(ArgumentMultimap argMultimap, Index index) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String solutionLink \u003d argMultimap.getValue(PREFIX_SOLUTION_LINK).isPresent()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            ? argMultimap.getValue(PREFIX_SOLUTION_LINK).get() : EditCommand.DUMMY_SOLUTION_LINK;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String solutionRemark \u003d argMultimap.getValue(PREFIX_REMARK).isPresent()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            ? argMultimap.getValue(PREFIX_REMARK).get() : EditCommand.DUMMY_SOLUTION_REMARK;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Solution solution \u003d parseSolutionForEdit(solutionLink, solutionRemark);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditIssueDescriptor editIssueDescriptorForSolution \u003d new EditIssueDescriptor(index, solution);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return new EditCommand(index, editIssueDescriptorForSolution);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e solutions} into a {@code Set\u003cSolution\u003e} if {@code solutions} is non-empty. If"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * {@code solutions} contain only one element which is an empty string, it will be parsed into a {@code"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Set\u003cSolution\u003e} containing zero solutions."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Solution parseSolutionForEdit(String solutionLink, String solutionRemark) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Solution solution \u003d ParserUtil.parseSolution(solutionLink, solutionRemark);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return solution;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty. If {@code tags}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * contain only one element which is an empty string, it will be parsed into a {@code Set\u003cTag\u003e} containing zero"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * tags."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 59,
      "leo-1997": 19,
      "xllliu": 1,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/FindByTagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.FindByTagCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueHasTagsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " * Parses input arguments and creates a new FindByTagCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class FindByTagCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public FindByTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return new FindByTagCommand(new IssueHasTagsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 5,
      "zhengwei143": 27
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return new FindCommand(new IssueContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 5,
      "zhengwei143": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.solution.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.solution.SolutionLink;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String dummySolutionLink \u003d \"https://www.dummySolutionLink.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String dummySolutionRemark \u003d \"dummySolutionRemark\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Parses a {@code String name} into a {@code IssueStatement}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static IssueStatement parseStatement(String statement) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireNonNull(statement);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String trimmedStatementName \u003d statement.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (!IssueStatement.isValidIssueStatement(trimmedStatementName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new ParseException(IssueStatement.MESSAGE_ISSUE_STATEMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return new IssueStatement(trimmedStatementName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new ParseException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e solutions} into a {@code Set\u003cSolution\u003e}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static List\u003cSolution\u003e parseSolutions(String solutionLink, String solutionRemark) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireAllNonNull(solutionLink, solutionRemark);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        final List\u003cSolution\u003e solutionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (solutionLink.equals(dummySolutionLink) \u0026\u0026 solutionRemark.equals(dummySolutionRemark)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return solutionList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String trimmedSolutionLink \u003d solutionLink.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String trimmedRemark \u003d solutionRemark.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (!SolutionLink.isValidLink(trimmedSolutionLink)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new ParseException(SolutionLink.MESSAGE_SOLUTION_LINK_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (!Remark.isValidRemark(trimmedRemark)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new ParseException(Remark.MESSAGE_REMARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        solutionList.add(new Solution(solutionLink, solutionRemark));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return solutionList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e solutions} into a {@code Set\u003cSolution\u003e}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static Solution parseSolution(String solutionLink, String solutionRemark) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireAllNonNull(solutionLink, solutionRemark);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (solutionLink.equals(EditCommand.DUMMY_SOLUTION_LINK) \u0026\u0026 solutionRemark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            .equals(EditCommand.DUMMY_SOLUTION_REMARK)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new ParseException(\"Solution cannot be both null\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String trimmedSolutionLink \u003d solutionLink.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String trimmedRemark \u003d solutionRemark.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (!SolutionLink.isValidLink(trimmedSolutionLink)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new ParseException(SolutionLink.MESSAGE_SOLUTION_LINK_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (!Remark.isValidRemark(trimmedRemark)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new ParseException(Remark.MESSAGE_REMARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Solution solution \u003d new Solution(trimmedSolutionLink, trimmedRemark);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return solution;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Parses {@code String solutionLink into a {@code SolutionLink}}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static SolutionLink parseSolutionLink(String solutionLink) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireNonNull(solutionLink);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String trimmedSolutionLink \u003d solutionLink.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (!SolutionLink.isValidLink(trimmedSolutionLink)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new ParseException(SolutionLink.MESSAGE_SOLUTION_LINK_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return new SolutionLink(solutionLink);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Parses {@code String solutionRemark into a {@code Remark}}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static Remark parseSolutionRemark(String solutionRemark) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireNonNull(solutionRemark);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String trimmedRemark \u003d solutionRemark.trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (!Remark.isValidRemark(trimmedRemark)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new ParseException(Remark.MESSAGE_REMARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return new Remark(solutionRemark);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 39,
      "leo-1997": 60,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private final int position;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // In this case, the position is just assigned to 0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // equality is not affected by the value of the position"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.position \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Additional parameter used to (optionally) store the position of the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     *  {@code prefix} in the argument string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     *  to dynamically control the position of the autosuggestion box"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public Prefix(String prefix, int position) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public int getPosition() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return position;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "zhengwei143": 18,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/RefactorTagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.commons.util.StringUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_NEW_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_SOLUTION_LINK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_STATEMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.ParserUtil.parseTag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.RefactorTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Parses input arguments and creates a new RefactorTagCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class RefactorTagCommandParser implements Parser\u003cRefactorTagCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RefactorTagCommand and returns an"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * RefactorTagCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public RefactorTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            ArgumentTokenizer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                .tokenize(args, PREFIX_TAG, PREFIX_NEW_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Tag newTag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Tag oldTag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (arePrefixesPresent(args, PREFIX_DESCRIPTION, PREFIX_STATEMENT, PREFIX_SOLUTION_LINK, PREFIX_REMARK)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, RefactorTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            oldTag \u003d parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, RefactorTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NEW_TAG).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            newTag \u003d parseTag(argMultimap.getValue(PREFIX_NEW_TAG).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            newTag \u003d parseTag(RefactorTagCommand.DUMMY_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return new RefactorTagCommand(oldTag, newTag);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jasonvank": 53,
      "leo-1997": 8
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/RetrieveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.RetrieveCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * Parses input arguments and creates a new RetrieveCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "public class RetrieveCommandParser implements Parser\u003cRetrieveCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RetrieveCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * and returns an ReturnCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public RetrieveCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            return new RetrieveCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, RetrieveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 28
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/SaveItParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.FindByTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.RefactorTagCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.RetrieveCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class SaveItParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        case FindByTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        case FindByTagCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            return new FindByTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        case SortCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case HomeCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            return new HomeCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        case RetrieveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        case RetrieveCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            return new RetrieveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case RefactorTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case RefactorTagCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return new RefactorTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case AddTagCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return new AddTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 24,
      "leo-1997": 25,
      "zhengwei143": 5,
      "xllliu": 3,
      "-": 70,
      "yshu7": 6
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/SortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueSort;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yshu7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yshu7"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Set\u003cString\u003e sortTypes \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        sortTypes.add(IssueSort.EMPTY_SORT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        sortTypes.add(IssueSort.CHRONOLOGICAL_SORT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        sortTypes.add(IssueSort.FREQUENCY_SORT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        sortTypes.add(IssueSort.TAG_SORT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (Arrays.asList(trimmedArgs.isEmpty()).size() \u003e 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (!areSortTypeValid(sortTypes, trimmedArgs)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return new SortCommand(new IssueSort(trimmedArgs));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Returns true if none of the sortType contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static boolean areSortTypeValid(Set\u003cString\u003e sortTypes, String sortType) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return sortTypes.stream().anyMatch(s -\u003e s.equals(sortType));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yshu7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 4,
      "yshu7": 46
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/suggestion/AutoSuggestion.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "package seedu.saveit.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.AutoSuggestionManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public interface AutoSuggestion {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Returns a list of suggestions to fill the autosuggestion box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    LinkedList\u003cString\u003e giveSuggestion(String text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Interfaces with the logic component\u0027s API to search the issues and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * updates the values suggested accordingly"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    void update(Logic logic);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    EventHandler\u003cActionEvent\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        getItemHandler(AutoSuggestionManager manager, String previousText, String afterText,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            int initIndex, int selection);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "zhengwei143": 27
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/suggestion/CopyExistingAutoSuggestion.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "package seedu.saveit.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DESCRIPTION_STRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_STATEMENT_STRING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.AutoSuggestionManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " * Prompts the user with a suggestion to copy and paste the existing text value"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " *  in any field of the object that is being edited"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " *  e.g. {@code Description} of {@code Issue}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " *  e.g. {@code Remark} of {@code Solution}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class CopyExistingAutoSuggestion implements AutoSuggestion {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private static final String COPY_EXISTING_PROMPT \u003d \"Copy Existing...\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private Issue issue;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private String identifier;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private LinkedList\u003cString\u003e suggestions \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            new LinkedList\u003c\u003e(Arrays.asList(COPY_EXISTING_PROMPT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public CopyExistingAutoSuggestion(Logic logic, Index index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.identifier \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.issue \u003d logic.getFilteredAndSortedIssueList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public LinkedList\u003cString\u003e giveSuggestion(String identifier) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.identifier \u003d identifier;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return suggestions;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void update(Logic logic) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public EventHandler\u003cActionEvent\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        getItemHandler(AutoSuggestionManager manager, String previousText,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            String afterText, int initIndex, int selection) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        String result \u003d getValueFromIdentifier(identifier);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return actionEvent -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            manager.replaceText(previousText.substring(0, initIndex) + result);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            manager.moveTo(manager.getLength());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            manager.getWindow().hide();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        };"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Get value based on identifier"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private String getValueFromIdentifier(String identifier) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        switch (identifier) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        case PREFIX_DESCRIPTION_STRING:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            return issue.getDescription().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        case PREFIX_STATEMENT_STRING:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            return issue.getStatement().issue;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "zhengwei143": 76
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/suggestion/IssueNameAutoSuggestion.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "package seedu.saveit.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.AutoSuggestionManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * The suggestion component which stores and provides issue statement key words"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class IssueNameAutoSuggestion implements AutoSuggestion {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private TreeSet\u003cString\u003e issueStatementSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private List\u003cString\u003e issueKeyWords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private LinkedList\u003cString\u003e searchResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public IssueNameAutoSuggestion(Logic logic) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.issueStatementSet \u003d new TreeSet\u003c\u003e(String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.issueKeyWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.searchResult \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        fillIssueKeyWords();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        addAllIssueKeyWord();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Compares and match the keywords."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public LinkedList\u003cString\u003e giveSuggestion(String text) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        searchResult.clear();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        searchResult.addAll(issueStatementSet.subSet(text, text + Character.MAX_VALUE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return searchResult;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Updates the keywords stored in the class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void update(Logic logic) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        fillIssueKeyWords();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        addAllIssueKeyWord();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public EventHandler\u003cActionEvent\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        getItemHandler(AutoSuggestionManager manager, String previousText,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            String afterText, int initIndex, int selection) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        String result \u003d searchResult.get(selection);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return actionEvent -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            manager.replaceText(previousText.substring(0, initIndex) + result);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            manager.moveTo(manager.getLength());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            manager.getWindow().hide();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Stores all the issue statements to the key word list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private void fillIssueKeyWords() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.issueKeyWords.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        logic.getFilteredAndSortedIssueList().forEach(issue -\u003e this.issueKeyWords.add(issue.getStatement().issue));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Adds all the stored key words to the treeSet"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private void addAllIssueKeyWord() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        issueStatementSet.clear();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        for (String str : issueKeyWords) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            issueStatementSet.add(str);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 60,
      "zhengwei143": 21,
      "yshu7": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/suggestion/TagNameAutoSuggestion.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "package seedu.saveit.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.AutoSuggestionManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * The suggestion component which stores and provides tag name key words"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class TagNameAutoSuggestion implements AutoSuggestion {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private TreeSet\u003cString\u003e tagSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private Set\u003cString\u003e tagKeyWords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private LinkedList\u003cString\u003e searchResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public TagNameAutoSuggestion(Logic logic) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.tagSet \u003d new TreeSet\u003c\u003e(String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.tagKeyWords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.searchResult \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        fillTagKeyWords();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        addAllTagKeyWord();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Compares and match the keywords."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public LinkedList\u003cString\u003e giveSuggestion(String text) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        searchResult.clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        searchResult.addAll(tagSet.subSet(text, text + Character.MAX_VALUE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return searchResult;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Updates the keywords stored in the class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void update(Logic logic) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        fillTagKeyWords();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        addAllTagKeyWord();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public EventHandler\u003cActionEvent\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        getItemHandler(AutoSuggestionManager manager, String previousText,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            String afterText, int initIndex, int selection) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        String result \u003d searchResult.get(selection);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return actionEvent -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            manager.replaceText(previousText.substring(0, initIndex) + result + afterText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            manager.moveTo(afterText.equals(\"\") ? manager.getLength() : initIndex + result.length());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            manager.getWindow().hide();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Adds all the stored key words to the treeSet"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private void addAllTagKeyWord() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        tagSet.clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        for (String str : tagKeyWords) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            tagSet.add(str);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Stores all the tag names to the key word set"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private void fillTagKeyWords() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.tagKeyWords.clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        logic.getFilteredAndSortedIssueList().forEach(issue -\u003e issue.getTags()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                .forEach(tag -\u003e this.tagKeyWords.add(tag.tagName)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 63,
      "zhengwei143": 18,
      "yshu7": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/Issue.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.sql.Timestamp;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueSearchFrequency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " * Represents a Issue in the remark book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class Issue {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private final IssueStatement statement;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private final List\u003cSolution\u003e solutions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private final IssueSearchFrequency frequency;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private final Timestamp time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public Issue(IssueStatement statement, Description description, List\u003cSolution\u003e solutions, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        CollectionUtil.requireAllNonNull(statement, description, solutions, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.statement \u003d statement;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.solutions.addAll(solutions);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.frequency \u003d new IssueSearchFrequency(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        this.time \u003d new Timestamp(new Date().getTime());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            * Overloaded constructor with additional {@code frequency} field"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public Issue(IssueStatement statement, Description description, List\u003cSolution\u003e solutions,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            Set\u003cTag\u003e tags, IssueSearchFrequency frequency) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        CollectionUtil.requireAllNonNull(statement, description, solutions, tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.statement \u003d statement;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.solutions.addAll(solutions);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        this.time \u003d new Timestamp(new Date().getTime());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Overloaded constructor with additional {@code frequency} field"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public Issue(Issue issue) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        CollectionUtil.requireAllNonNull(issue);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.statement \u003d issue.getStatement();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.description \u003d issue.getDescription();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.solutions.addAll(issue.getSolutions());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.tags.addAll(issue.getTags());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.frequency \u003d issue.getFrequency();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.time \u003d new Timestamp(new Date().getTime());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public IssueStatement getStatement() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return statement;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Returns an immutable solution List, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public List\u003cSolution\u003e getSolutions() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return Collections.unmodifiableList(solutions);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Returns ab observableList of solutions."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public ObservableList\u003cSolution\u003e getObservableSolutions() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return FXCollections.observableList(solutions);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Returns the IssueSearchFrequency of the Issue"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public IssueSearchFrequency getFrequency() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return frequency;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Returns the Timestamp of the Issue"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public Timestamp getLastModifiedTime() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Updates the search frequency of the current issue"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void updateFrequency() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        frequency.increment();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns true if both issues of the same statement have at least one other identity field that is the same."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * This defines a weaker notion of equality between two issues.Solution"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public boolean isSameIssue(Issue otherIssue) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (otherIssue \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return otherIssue !\u003d null"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                \u0026\u0026 otherIssue.getStatement().equals(getStatement())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                \u0026\u0026 otherIssue.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns true if both issues have the same identity and data fields."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * This defines a stronger notion of equality between two issues."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (!(other instanceof Issue)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Issue otherIssue \u003d (Issue) other;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return otherIssue.getStatement().equals(getStatement())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                \u0026\u0026 otherIssue.getFrequency().equals(getFrequency());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return Objects.hash(statement, description, solutions, tags);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        builder.append(getStatement())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                .append(\" Solutions: \");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        getSolutions().forEach(builder::append);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 14,
      "leo-1997": 37,
      "zhengwei143": 39,
      "xllliu": 9,
      "-": 64,
      "yshu7": 18
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.directory.Directory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueSort;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    Predicate\u003cIssue\u003e PREDICATE_SHOW_ALL_ISSUES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    void resetData(ReadOnlySaveIt newData);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /** Reset the current directory. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    void resetDirectory(Directory currentDirectory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /** Return the current directory. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    Directory getCurrentDirectory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /** Returns the SaveIt */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    ReadOnlySaveIt getSaveIt();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns true if an issue with the same identity as {@code issue} exists in the saveIt."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    boolean hasIssue(Issue issue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Returns true if the indexed issue has same solution as {@code solution} exists in the saveIt."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    boolean hasSolution(Index index, Solution solution);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Deletes the given issue."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * The issue must exist in the saveIt."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    void deleteIssue(Issue target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Adds the given solution to the indexed issue."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * {@code solution} must not already exist in the given issue."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    void addSolution(Index index, Solution solution);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Adds the given issue."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * {@code issue} must not already exist in the saveIt."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    void addIssue(Issue issue);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Replaces the given issue {@code target} with {@code editedIssue}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * {@code target} must exist in the saveIt."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * The issue identity of {@code editedIssue} must not be the same as another existing issue in the saveIt."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    void updateIssue(Issue target, Issue editedIssue);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /** Returns an unmodifiable view of the filtered issue list */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    ObservableList\u003cIssue\u003e getFilteredIssueList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**Returns an unmodified view of the filtered soluiton list of the selected issue */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    ObservableList\u003cSolution\u003e getFilteredSolutionList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Filters the issues given the predicate and sorts them based on the search frequency"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    void filterIssues(Predicate\u003cIssue\u003e predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Sorts the issues given the order."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @param sortType"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    void sortIssues(IssueSort sortType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /** Returns an unmodifiable view of the filtered or sorted issue list */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    ObservableList\u003cIssue\u003e getFilteredAndSortedIssueList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Updates the filter of the filtered issue list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    void updateFilteredIssueList(Predicate\u003cIssue\u003e predicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Updates the sorting of the sorted issue list to sort by the give {@code sortType}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    void updateFilteredAndSortedIssueList(Comparator\u003cIssue\u003e sortType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Adds tag(s) to the existing data of this {@code SaveIt} for {@code index} issue with {@code tagList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    void addTag(Index index, Set\u003cTag\u003e tagList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns true if the model has previous saveIt states to restore."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    boolean canUndoSaveIt();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns true if the model has undone saveIt states to restore."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    boolean canRedoSaveIt();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Restores the model\u0027s saveIt to its previous state."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    void undoSaveIt();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Restores the model\u0027s saveIt to its previously undone state."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    void redoSaveIt();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Saves the current saveIt state for undo/redo."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    void commitSaveIt();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * To rename or remove a specified {@code oldTag} to {@code newTag} for all entries."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @return true if any tag has been replaced, otherwise false."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    boolean refactorTag(Tag oldTag, Tag newTag);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 42,
      "leo-1997": 18,
      "zhengwei143": 5,
      "xllliu": 11,
      "-": 46,
      "yshu7": 12
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.directory.Directory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.model.SaveItChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueSort;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Represents the in-memory model of the saveIt data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final VersionedSaveIt versionedSaveIt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private FilteredList\u003cIssue\u003e filteredIssues;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private SortedList\u003cIssue\u003e filteredAndSortedIssues;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Initializes a ModelManager with the given saveIt and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public ModelManager(ReadOnlySaveIt saveIt, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireAllNonNull(saveIt, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        logger.fine(\"Initializing with SaveIt: \" + saveIt + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt \u003d new VersionedSaveIt(saveIt);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        filteredIssues \u003d new FilteredList\u003c\u003e(versionedSaveIt.getIssueList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        filteredAndSortedIssues \u003d new SortedList\u003c\u003e(getFilteredIssueList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        this(new SaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void resetData(ReadOnlySaveIt newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.resetData(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        indicateSaveItChanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public void resetDirectory(Directory newDirectory) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        versionedSaveIt.setCurrentDirectory(newDirectory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        indicateSaveItChanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public Directory getCurrentDirectory() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return versionedSaveIt.getCurrentDirectory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public ReadOnlySaveIt getSaveIt() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return versionedSaveIt;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private void indicateSaveItChanged() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        raise(new SaveItChangedEvent(versionedSaveIt));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public boolean hasIssue(Issue issue) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireNonNull(issue);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return versionedSaveIt.hasIssue(issue);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public boolean hasSolution(Index index, Solution solution) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireAllNonNull(index, solution);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return versionedSaveIt.hasSolution(index, solution);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void deleteIssue(Issue target) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.removeIssue(target);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        indicateSaveItChanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void addSolution(Index index, Solution solution) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        versionedSaveIt.addSolution(index, solution);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        indicateSaveItChanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void addIssue(Issue issue) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.addIssue(issue);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        updateFilteredIssueList(PREDICATE_SHOW_ALL_ISSUES);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        indicateSaveItChanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void updateIssue(Issue target, Issue editedIssue) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireAllNonNull(target, editedIssue);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.updateIssue(target, editedIssue);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        indicateSaveItChanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void filterIssues(Predicate\u003cIssue\u003e predicate) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        updateFilteredIssueList(predicate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // Update the search frequencies after filtering"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        for (Issue issue : filteredIssues) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            issue.updateFrequency();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Add Tag \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void addTag(Index index, Set\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireAllNonNull(index, tagList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.addTag(index, tagList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        indicateSaveItChanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Refactor Tag \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public boolean refactorTag(Tag oldTag, Tag newTag) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireAllNonNull(oldTag, newTag);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        boolean isEdit \u003d versionedSaveIt.refactorTag(oldTag, newTag);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        indicateSaveItChanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return isEdit;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void sortIssues(IssueSort sortType) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        updateFilteredAndSortedIssueList(sortType.getComparator());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Issue List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Issue} backed by the internal list of"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * {@code versionedSaveIt}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public ObservableList\u003cIssue\u003e getFilteredIssueList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredIssues);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Solution} backed by the internal list of"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * {@code Issue}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public ObservableList\u003cSolution\u003e getFilteredSolutionList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        Directory directory \u003d getCurrentDirectory();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        if (directory.isRootLevel()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            return FXCollections.unmodifiableObservableList"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                    (filteredIssues.get(directory.getIssue() - 1).getObservableSolutions());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void updateFilteredIssueList(Predicate\u003cIssue\u003e predicate) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        filteredIssues.setPredicate(predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted Issue List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void updateFilteredAndSortedIssueList(Comparator\u003cIssue\u003e comparator) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        filteredAndSortedIssues.setComparator(comparator);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted Issue List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Issue} backed by the internal list of"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * {@code versionedSaveIt}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public ObservableList\u003cIssue\u003e getFilteredAndSortedIssueList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredAndSortedIssues);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public boolean canUndoSaveIt() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return versionedSaveIt.canUndo();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public boolean canRedoSaveIt() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return versionedSaveIt.canRedo();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void undoSaveIt() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.undo();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        indicateSaveItChanged();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void redoSaveIt() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.redo();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        indicateSaveItChanged();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void commitSaveIt() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.commit();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return versionedSaveIt.equals(other.versionedSaveIt)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                \u0026\u0026 filteredIssues.equals(other.filteredIssues);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 64,
      "leo-1997": 28,
      "zhengwei143": 10,
      "xllliu": 28,
      "-": 92,
      "yshu7": 27
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/ReadOnlySaveIt.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.directory.Directory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Unmodifiable view of an saveIt"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public interface ReadOnlySaveIt {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns an unmodifiable view of the issues list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * This list will not contain any duplicate issues."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    ObservableList\u003cIssue\u003e getIssueList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    Directory getCurrentDirectory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 5,
      "leo-1997": 1,
      "xllliu": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/SaveIt.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.directory.Directory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * Wraps all data at the saveit-book level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * Duplicates are not allowed (by .isSameIssue comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class SaveIt implements ReadOnlySaveIt {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final String DUMMY_TAG \u003d \"dummyTag\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final UniqueIssueList issues;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private Directory currentDirectory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        issues \u003d new UniqueIssueList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        currentDirectory \u003d new Directory(0, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public SaveIt() {}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Creates an SaveIt using the Issues in the {@code toBeCopied}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public SaveIt(ReadOnlySaveIt toBeCopied) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Replaces the contents of the issue list with {@code issues}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * {@code issues} must not contain duplicate issues."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void setIssues(List\u003cIssue\u003e issues) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        this.issues.setIssues(issues);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Update the current directory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * {@code CurrentDirectory} must not exceeds the length of {@code issues}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * @param directory"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public void setCurrentDirectory(Directory directory) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            if (directory.isIssueLevel() \u0026\u0026 directory.getIssue() \u003e issues.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                throw new IllegalValueException(\"Refer to non-existent directory.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            } else if (directory.isSolutionLevel() \u0026\u0026 directory.getSolution()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                    \u003e issues.getSolutionNumber(Index.fromOneBased(directory.getSolution()))) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                throw new IllegalValueException(\"Refer to non-existent directory.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            currentDirectory \u003d directory;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Resets the existing data of this {@code SaveIt} with {@code newData}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void resetData(ReadOnlySaveIt newData) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        setIssues(newData.getIssueList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        setCurrentDirectory(newData.getCurrentDirectory());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    //// issue-level operations"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns true if an issue with the same identity as {@code issue} exists in the saveIt."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public boolean hasIssue(Issue issue) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireNonNull(issue);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return issues.contains(issue);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Returns true if the targeted issue has the same solution exists in the saveIt."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public boolean hasSolution(Index index, Solution solution) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireAllNonNull(index, solution);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return issues.getIssue(index).getSolutions().contains(solution);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Adds an issue to the saveIt."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * The issue must not already exist in the saveIt."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void addIssue(Issue p) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        issues.add(p);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Adds an issue to the saveIt."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * The issue must not already exist in the saveIt."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void addSolution(Index index, Solution solution) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Issue issueToEdit \u003d issues.getIssue(index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        List\u003cSolution\u003e solutionsToUpdate \u003d new ArrayList\u003c\u003e(issueToEdit.getSolutions());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        solutionsToUpdate.add(solution);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Issue updateIssue \u003d new Issue(issueToEdit.getStatement(), issueToEdit.getDescription(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                solutionsToUpdate, issueToEdit.getTags(), issueToEdit.getFrequency());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        updateIssue(issueToEdit, updateIssue);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Replaces the given issue {@code target} in the list with {@code editedIssue}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * {@code target} must exist in the saveIt."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * The issue identity of {@code editedIssue} must not be the same as another existing issue in the saveIt."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void updateIssue(Issue target, Issue editedIssue) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireNonNull(editedIssue);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        issues.setIssue(target, editedIssue);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Adds tag(s) to the existing data of this {@code SaveIt} issue with {@code tagList} for {@code index} issue."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void addTag(Index index, Set\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireNonNull(tagList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Issue issueToEdit \u003d issues.getIssue(index);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Set\u003cTag\u003e tagsToUpdate \u003d new HashSet\u003c\u003e(issueToEdit.getTags());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        tagsToUpdate.addAll(tagList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Issue updateIssue \u003d new Issue(issueToEdit.getStatement(), issueToEdit.getDescription(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            issueToEdit.getSolutions(), tagsToUpdate, issueToEdit.getFrequency());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        updateIssue(issueToEdit, updateIssue);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Adds tag(s) to the existing data of this {@code SaveIt} issue with {@code tagList} for {@code index} issue."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public boolean refactorTag(Tag oldTag, Tag newTag) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        boolean isEdit \u003d false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireNonNull(oldTag);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        for (Issue issueToUpdate : issues) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            Set\u003cTag\u003e tagsToUpdate \u003d new HashSet\u003c\u003e(issueToUpdate.getTags());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            if (tagsToUpdate.contains(oldTag)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                tagsToUpdate.remove(oldTag);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                if (!newTag.tagName.equals(DUMMY_TAG)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                    tagsToUpdate.add(newTag);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                isEdit \u003d true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                Issue updateIssue \u003d new Issue(issueToUpdate.getStatement(), issueToUpdate.getDescription(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                    issueToUpdate.getSolutions(), tagsToUpdate, issueToUpdate.getFrequency());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                updateIssue(issueToUpdate, updateIssue);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return isEdit;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Removes {@code key} from this {@code SaveIt}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * {@code key} must exist in the saveIt."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void removeIssue(Issue key) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        issues.remove(key);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return issues.asUnmodifiableObservableList().size() + \" issues\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public ObservableList\u003cIssue\u003e getIssueList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return issues.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public Directory getCurrentDirectory() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return currentDirectory;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                || (other instanceof SaveIt // instanceof handles nulls"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                \u0026\u0026 issues.equals(((SaveIt) other).issues));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return issues.hashCode();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 74,
      "leo-1997": 36,
      "xllliu": 29,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/UniqueIssueList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.exceptions.DuplicateIssueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.exceptions.IssueNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " * A list of issues that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yshu7"
        },
        "content": " * A issue is considered unique by comparing using {@code Issue#isSameIssue(Issue)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " * issues uses Issue#isSameIssue(Issue) for equality so as to ensure that the issue being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * unique in terms of identity in the UniqueIssueList. However, the removal of an issue uses Issue#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yshu7"
        },
        "content": " * as to ensure that the issue with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": " * @see Issue#isSameIssue(Issue)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class UniqueIssueList implements Iterable\u003cIssue\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private final ObservableList\u003cIssue\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Returns true if the list contains an equivalent issue as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public boolean contains(Issue toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameIssue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Adds an issue to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * The issue must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void add(Issue toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            throw new DuplicateIssueException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * * Replaces the issue {@code target} in the list with {@code editedIssue}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * The issue identity of {@code editedIssue} must not be the same as another existing issue in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void setIssue(Issue target, Issue editedIssue) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireAllNonNull(target, editedIssue);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            throw new IssueNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (!target.isSameIssue(editedIssue) \u0026\u0026 contains(editedIssue)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            throw new DuplicateIssueException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        internalList.set(index, editedIssue);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Removes the equivalent issue from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * The issue must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void remove(Issue toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            throw new IssueNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void setIssues(UniqueIssueList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Replaces the contents of this list with {@code issues}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * {@code issues} must not contain duplicate issues."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void setIssues(List\u003cIssue\u003e issues) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        requireAllNonNull(issues);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        if (!issuesAreUnique(issues)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            throw new DuplicateIssueException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        internalList.setAll(issues);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public ObservableList\u003cIssue\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public Iterator\u003cIssue\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                || (other instanceof UniqueIssueList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueIssueList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Returns true if {@code issues} contains only unique issues."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private boolean issuesAreUnique(List\u003cIssue\u003e issues) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        for (int i \u003d 0; i \u003c issues.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            for (int j \u003d i + 1; j \u003c issues.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                if (issues.get(i).isSameIssue(issues.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * return the number of solutions of the indexed issue."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public int getSolutionNumber(Index index) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return internalList.get(index.getZeroBased()).getSolutions().size();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @param index issue index in the saveIt"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @return the issue in the saveIt"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public Issue getIssue(Index index) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 15,
      "leo-1997": 4,
      "zhengwei143": 22,
      "xllliu": 13,
      "-": 87,
      "yshu7": 14
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private Path saveItFilePath \u003d Paths.get(\"data\" , \"saveit.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public Path getSaveItFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return saveItFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void setSaveItFilePath(Path saveItFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        this.saveItFilePath \u003d saveItFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                \u0026\u0026 Objects.equals(saveItFilePath, o.saveItFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return Objects.hash(guiSettings, saveItFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + saveItFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 7,
      "leo-1997": 2,
      "-": 59,
      "yshu7": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/VersionedSaveIt.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * {@code SaveIt} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class VersionedSaveIt extends SaveIt {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final List\u003cReadOnlySaveIt\u003e saveItStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public VersionedSaveIt(ReadOnlySaveIt initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveItStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveItStateList.add(new SaveIt(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Saves a copy of the current {@code SaveIt} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveItStateList.add(new SaveIt(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveItStateList.subList(currentStatePointer + 1, saveItStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Restores the saveIt to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        resetData(saveItStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Restores the saveIt to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        resetData(saveItStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns true if {@code undo()} has saveIt states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns true if {@code redo()} has saveIt states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return currentStatePointer \u003c saveItStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (!(other instanceof VersionedSaveIt)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt otherVersionedSaveIt \u003d (VersionedSaveIt) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return super.equals(otherVersionedSaveIt)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                \u0026\u0026 saveItStateList.equals(otherVersionedSaveIt.saveItStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedSaveIt.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            super(\"Current state pointer at start of saveItState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            super(\"Current state pointer at end of saveItState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 23,
      "leo-1997": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Represents a Issue\u0027s description in the saveIt."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        \"Issue description can take any values, but it should not be blank.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        AppUtil.checkArgument(isValidDescription(description), MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns true if a given string is a valid descriptions number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return test.matches(DESCRIPTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 50,
      "leo-1997": 3,
      "yshu7": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/IssueChroComparator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yshu7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": " * Comparator used to sort the Issues in chronological order"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yshu7"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class IssueChroComparator implements Comparator\u003cIssue\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public int compare(Issue a, Issue b) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return b.getLastModifiedTime().compareTo(a.getLastModifiedTime());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "yshu7": 12
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/IssueContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Tests that a {@code Issue}\u0027s {@code IssueStatement} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class IssueContainsKeywordsPredicate implements Predicate\u003cIssue\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public IssueContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public boolean test(Issue issue) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.partialMatchIgnoreCase(issue.getStatement().issue, keyword)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                    || StringUtil.partialMatchIgnoreCase(issue.getDescription().value, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                || (other instanceof IssueContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                \u0026\u0026 keywords.equals(((IssueContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 4,
      "zhengwei143": 6,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/IssueFreqComparator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yshu7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": " * Comparator used to sort the Issues in search frequency order"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yshu7"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class IssueFreqComparator implements Comparator\u003cIssue\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public int compare(Issue a, Issue b) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return b.getFrequency().compare(a.getFrequency());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "yshu7": 12
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/IssueHasTagsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " * Tests that a {@code Issue}\u0027s {@code tags} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class IssueHasTagsPredicate implements Predicate\u003cIssue\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public IssueHasTagsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public boolean test(Issue issue) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return keywords.stream().allMatch(keyword -\u003e issue.getTags().contains(new Tag(keyword)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                || (other instanceof IssueHasTagsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                \u0026\u0026 keywords.equals(((IssueHasTagsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "zhengwei143": 27
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/IssueSearchFrequency.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " * Represents an Issue\u0027s Search Frequency"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " *      Each time an issue is successfully filtered through a predicate"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " *      Its search frequency increments by 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " *      Used to display search terms in order of their search frequency"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " *      So that the most frequently searched issues are listed at the top"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class IssueSearchFrequency {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private Integer value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public IssueSearchFrequency(int frequency) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        value \u003d frequency;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void increment() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        value \u003d value + 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public Integer getValue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public int compare(IssueSearchFrequency other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return Integer.compare(value, other.value);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                || (other instanceof IssueSearchFrequency // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                \u0026\u0026 value.equals(((IssueSearchFrequency) other).value)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "zhengwei143": 34
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/IssueSort.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": " * Create respective Comparator based on the command inputted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class IssueSort {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String FREQUENCY_SORT \u003d \"freq\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String CHRONOLOGICAL_SORT \u003d \"chro\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String TAG_SORT \u003d \"tag\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String EMPTY_SORT \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static final String FREQUENCY \u003d \"search frequency\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static final String CHRONOLOGICAL \u003d \"chronological order\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static final String TAG \u003d \"first tag\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static final String DEFAULT \u003d \"adding order\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private final Comparator\u003cIssue\u003e comparator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private final String sortType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public IssueSort(String sortType) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        switch (sortType) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        case FREQUENCY_SORT:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            this.comparator \u003d new IssueFreqComparator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            this.sortType \u003d FREQUENCY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        case CHRONOLOGICAL_SORT:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            this.comparator \u003d new IssueChroComparator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            this.sortType \u003d CHRONOLOGICAL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        case TAG_SORT:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            this.comparator \u003d new IssueTagComparator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            this.sortType \u003d TAG;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        case EMPTY_SORT:default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            this.comparator \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            this.sortType \u003d DEFAULT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public Comparator\u003cIssue\u003e getComparator() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return this.comparator;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public String getSortType() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return this.sortType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                || (other instanceof IssueSort // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                \u0026\u0026 sortType.equals(((IssueSort) other).sortType));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "zhengwei143": 9,
      "yshu7": 45
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/IssueStatement.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Represents a Issue\u0027s name in the saveIt."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIssueStatement(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class IssueStatement {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MESSAGE_ISSUE_STATEMENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            \"Issue statement can take any values, but it should not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * The first character of the saveit must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String ISSUE_STATEMENT_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public final String issue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Constructs a {@code IssueStatement}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * @param issue A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public IssueStatement(String issue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireNonNull(issue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        AppUtil.checkArgument(isValidIssueStatement(issue), MESSAGE_ISSUE_STATEMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.issue \u003d issue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns true if a given string is a valid issuestatement."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static boolean isValidIssueStatement(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return test.matches(ISSUE_STATEMENT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return issue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                || (other instanceof IssueStatement // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                \u0026\u0026 issue.equals(((IssueStatement) other).issue)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return issue.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 6,
      "leo-1997": 17,
      "-": 35,
      "yshu7": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/IssueTagComparator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yshu7"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yshu7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": " * Comparator used to sort the Issues in order"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yshu7"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class IssueTagComparator implements Comparator\u003cIssue\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Compare Issue a and b with their first tag in the tag set. Tag is compared based on String tagName."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public int compare(Issue a, Issue b) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Tag tagB \u003d b.getTags().stream().findFirst().orElse(null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Tag tagA \u003d a.getTags().stream().findFirst().orElse(null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (tagA \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        int result \u003d tagA.compare(tagB);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (result \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            return a.getTags().size() - b.getTags().size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yshu7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yshu7": 30
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/Solution.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.solution.Remark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.solution.SolutionLink;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yshu7"
        },
        "content": " * Represents a Issue\u0027s solution in saveit."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class Solution {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public final String solutionName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public final SolutionLink solutionLink;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public final Remark remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Construct a new Solution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public Solution(String solutionName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        int index \u003d solutionName.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (index !\u003d -1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            this.solutionLink \u003d new SolutionLink(solutionName.substring(0, index));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            this.remark \u003d new Remark(solutionName.substring(index + 1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            if (SolutionLink.isValidLink(solutionName)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                this.solutionLink \u003d new SolutionLink(solutionName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                this.remark \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                this.solutionLink \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                this.remark \u003d new Remark(solutionName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        this.solutionName \u003d solutionName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Construct a new Solution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * @param solutionLink url link to solution website."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * @param remark user\u0027s notes about this solution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public Solution(String solutionLink, String remark) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.solutionLink \u003d new SolutionLink(solutionLink);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.solutionName \u003d solutionLink + \" \" + remark;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public SolutionLink getLink() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return solutionLink;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return \u0027[\u0027 + \" link: \" + getLink() + \" remark: \" + getRemark() + \u0027]\u0027;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                || (other instanceof Solution // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                \u0026\u0026 solutionLink.equals(((Solution) other).solutionLink)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return Objects.hash(solutionLink, remark);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yshu7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 16,
      "yshu7": 59
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Represents a Tag in the saveIt."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should not contain white space\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"^[^\\\\d\\\\s]+$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        AppUtil.checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Compare two Tag regarding to their tagName."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public int compare(Tag other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return tagName.compareTo(other.tagName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 9,
      "leo-1997": 5,
      "-": 48,
      "yshu7": 3
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/exceptions/DuplicateIssueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * Signals that the operation will result in duplicate Issues (Issues are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class DuplicateIssueException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public DuplicateIssueException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        super(\"Operation would result in duplicate issues\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "zhengwei143": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/exceptions/IssueNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yshu7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yshu7"
        },
        "content": " * Signals that the operation is unable to find the specified issue."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yshu7"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class IssueNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "zhengwei143": 1,
      "yshu7": 4
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/solution/Remark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue.solution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yshu7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": " * Represents a Issue\u0027s remark in saveit."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yshu7"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            \"Remarks can take in any values and it shouldn\u0027t be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * The first character of the remark must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String REMARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Constructs an {@code Remark}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * @param remark A valid remark."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        AppUtil.checkArgument(isValidRemark(remark), MESSAGE_REMARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Returns true if a given string is a valid remark."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static boolean isValidRemark(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return test.matches(REMARK_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yshu7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 7,
      "yshu7": 54
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/issue/solution/SolutionLink.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue.solution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yshu7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": " * Represents a Issue\u0027s solution link in saveit."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yshu7"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class SolutionLink {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MESSAGE_SOLUTION_LINK_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        \"SolutionLinks can only take a validate url.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String SOLUTION_LINK_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            \"https?:\\\\/\\\\/(www\\\\.)?[-a-zA-Z0-9@:%._\\\\+~#\u003d]{2,256}\\\\.[a-z]{2,6}\\\\b([-a-zA-Z0-9@:%_\\\\+.~#?\u0026//\u003d]*)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String linkPrefix \u003d \"https://\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Construct a new solution link."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * @param value url to the solution website."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public SolutionLink(String value) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        value \u003d appendUrlPrefix(value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        AppUtil.checkArgument(isValidLink(value), MESSAGE_SOLUTION_LINK_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Returns if a given string is a valid URL."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static boolean isValidLink(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        test \u003d appendUrlPrefix(test);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return test.matches(SOLUTION_LINK_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static String appendUrlPrefix(String value) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return value.startsWith(\"http\") ? value : linkPrefix + value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            || (other instanceof SolutionLink // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            \u0026\u0026 value.equals(((SolutionLink) other).getValue())); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yshu7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 21,
      "zhengwei143": 5,
      "yshu7": 38
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ReadOnlySaveIt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.solution.SolutionLink;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Contains utility methods for populating {@code SaveIt} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static Issue[] getSampleIssues() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return new Issue[]{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            new Issue(new IssueStatement(\"Java NullPointer\"), new Description(\"cannot find object\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    getSolutionSet(\"https://stackoverflow.com/ remark\"), getTagSet(\"solved\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            new Issue(new IssueStatement(\"StackOverflow\"), new Description(\"Cannot run\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    getSolutionSet(\"https://ivle.nus.edu.sg/v1/workspace.aspx newRemark\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                            \"https://www.wikipedia.org/ remark\"), getTagSet(\"newBug\", \"notSolved\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            new Issue(new IssueStatement(\"ArrayIndexOutOfBounds\"), new Description(\"invalid input\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    getSolutionSet(\"https://www.zhihu.com/ solutionIsHere\"), getTagSet(\"notSolved\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            new Issue(new IssueStatement(\"ClassNotFoundException\"), new Description(\"WrongPackage\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    getSolutionSet(\"https://stackoverflow.com/ solution\"), getTagSet(\"urgent\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            new Issue(new IssueStatement(\"ExceptionNotHandled\"), new Description(\"Mistake\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    getSolutionSet(\"https://www.reddit.com/ yes\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                            \"https://docs.oracle.com/javase/7/docs/api/overview-summary.html remark\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    getTagSet(\"solved\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            new Issue(new IssueStatement(\"UnknownBug\"), new Description(\"Unknown\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    getSolutionSet(\"https://www.google.com.sg/ newRemark\"), getTagSet(\"Dead\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static ReadOnlySaveIt getSampleSaveIt() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SaveIt sampleAb \u003d new SaveIt();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        for (Issue sampleIssue : getSampleIssues()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            sampleAb.addIssue(sampleIssue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Returns a solution set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static List\u003cSolution\u003e getSolutionSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        List\u003cSolution\u003e solutionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        for (String solutions : strings) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            int index \u003d solutions.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            String link \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            String remark \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            if (index !\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                link \u003d solutions.substring(0, solutions.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                remark \u003d solutions.substring(solutions.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                if (SolutionLink.isValidLink(solutions)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                    link \u003d solutions;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                    remark \u003d solutions;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            solutionList.add(new Solution(link, remark));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return solutionList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 7,
      "leo-1997": 40,
      "-": 24,
      "yshu7": 13
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 4,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/SaveItStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ReadOnlySaveIt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Represents a storage for {@link SaveIt}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public interface SaveItStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    Path getSaveItFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns SaveIt data as a {@link ReadOnlySaveIt}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    Optional\u003cReadOnlySaveIt\u003e readSaveIt() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @see #getSaveItFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    Optional\u003cReadOnlySaveIt\u003e readSaveIt(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Saves the given {@link ReadOnlySaveIt} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @param saveIt cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    void saveSaveIt(ReadOnlySaveIt saveIt) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @see #saveSaveIt(ReadOnlySaveIt)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    void saveSaveIt(ReadOnlySaveIt saveIt, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 12,
      "leo-1997": 4,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.model.SaveItChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ReadOnlySaveIt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public interface Storage extends SaveItStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    Path getSaveItFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    Optional\u003cReadOnlySaveIt\u003e readSaveIt() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    void saveSaveIt(ReadOnlySaveIt saveIt) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Saves the current version of the SaveIt to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    void handleSaveItChangedEvent(SaveItChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 6,
      "leo-1997": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.model.SaveItChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ReadOnlySaveIt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Manages storage of SaveIt data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private SaveItStorage saveItStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public StorageManager(SaveItStorage saveItStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        this.saveItStorage \u003d saveItStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SaveIt methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public Path getSaveItFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return saveItStorage.getSaveItFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public Optional\u003cReadOnlySaveIt\u003e readSaveIt() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return readSaveIt(saveItStorage.getSaveItFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public Optional\u003cReadOnlySaveIt\u003e readSaveIt(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return saveItStorage.readSaveIt(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void saveSaveIt(ReadOnlySaveIt saveIt) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveSaveIt(saveIt, saveItStorage.getSaveItFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void saveSaveIt(ReadOnlySaveIt saveIt, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveItStorage.saveSaveIt(saveIt, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void handleSaveItChangedEvent(SaveItChangedEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            saveSaveIt(event.data);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 17,
      "leo-1997": 8,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Saves the given {@link UserPrefs} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 2,
      "leo-1997": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/XmlAdaptedIssue.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueSearchFrequency;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * JAXB-friendly version of the Issue."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "public class XmlAdaptedIssue {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Issue\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private String statement;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private List\u003cXmlAdaptedSolution\u003e solutions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private Integer frequency;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Constructs an XmlAdaptedIssue. This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public XmlAdaptedIssue() {}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Constructs an {@code XmlAdaptedIssue} with the given statement details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public XmlAdaptedIssue(String statement, String description, List\u003cXmlAdaptedSolution\u003e solutions,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                           List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        this.statement \u003d statement;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (solutions !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            this.solutions \u003d new ArrayList\u003c\u003e(solutions);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.frequency \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Constructs an {@code XmlAdaptedIssue} with the given statement details."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public XmlAdaptedIssue(String statement, String description, List\u003cXmlAdaptedSolution\u003e solutions,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                           List\u003cXmlAdaptedTag\u003e tagged, Integer frequency) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.statement \u003d statement;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        if (solutions !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            this.solutions \u003d new ArrayList\u003c\u003e(solutions);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Converts a given Issue into this class for JAXB use."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedIssue"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public XmlAdaptedIssue(Issue source) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        statement \u003d source.getStatement().issue;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        solutions \u003d source.getSolutions().stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                .map(XmlAdaptedSolution::new)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        frequency \u003d source.getFrequency().getValue();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Converts this jaxb-friendly adapted statement object into the model\u0027s Issue object."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted statement"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public Issue toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        final List\u003cTag\u003e issueTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            issueTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        final List\u003cSolution\u003e issueSolutions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        for (XmlAdaptedSolution solution : solutions) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            issueSolutions.add(solution.toModelType());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (statement \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                    IssueStatement.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (!IssueStatement.isValidIssueStatement(statement)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new IllegalValueException(IssueStatement.MESSAGE_ISSUE_STATEMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        final IssueStatement modelName \u003d new IssueStatement(statement);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        final List\u003cSolution\u003e modelSolutions \u003d new ArrayList\u003c\u003e(issueSolutions);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(issueTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        final IssueSearchFrequency searchFrequency \u003d new IssueSearchFrequency(frequency);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return new Issue(modelName, modelDescription, modelSolutions, modelTags, searchFrequency);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (!(other instanceof XmlAdaptedIssue)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        XmlAdaptedIssue otherIssue \u003d (XmlAdaptedIssue) other;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return Objects.equals(statement, otherIssue.statement)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                \u0026\u0026 Objects.equals(description, otherIssue.description)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                \u0026\u0026 solutions.equals(otherIssue.solutions)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                \u0026\u0026 tagged.equals(otherIssue.tagged);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 5,
      "leo-1997": 42,
      "zhengwei143": 32,
      "-": 62,
      "yshu7": 13
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/XmlAdaptedSolution.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.solution.Remark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.solution.SolutionLink;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * JAXB-friendly adapted version of the Solution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "public class XmlAdaptedSolution {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Solution\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private String solutionName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Constructs an XmlAdaptedSolution. This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public XmlAdaptedSolution() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Constructs a {@code XmlAdaptedSolution} with the given {@code solutionName}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public XmlAdaptedSolution(String solutionName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.solutionName \u003d solutionName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Converts a given Solution into this class for JAXB use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public XmlAdaptedSolution(Solution source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        solutionName \u003d source.getLink() + \" \" + source.getRemark();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Converts this jaxb-friendly adapted solution object into the model\u0027s Solution object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted issue"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public Solution toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        int index \u003d solutionName.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String link \u003d solutionName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String remark \u003d solutionName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (index !\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            link \u003d solutionName.substring(0, index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            remark \u003d solutionName.substring(solutionName.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (link !\u003d null \u0026\u0026 !Remark.isValidRemark(remark)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new IllegalValueException(Remark.MESSAGE_REMARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (remark !\u003d null \u0026\u0026 !SolutionLink.isValidLink(link)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new IllegalValueException(SolutionLink.MESSAGE_SOLUTION_LINK_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return new Solution(link, remark);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (!(other instanceof XmlAdaptedSolution)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        return solutionName.equals(((XmlAdaptedSolution) other).solutionName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 71,
      "yshu7": 10
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted issue"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "-": 58,
      "yshu7": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * Stores saveit data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Saves the given saveit data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableSaveIt saveIt)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            XmlUtil.saveDataToFile(file, saveIt);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns saveIt in the file or an empty saveIt"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static XmlSerializableSaveIt loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableSaveIt.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 5,
      "leo-1997": 5,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/XmlSaveItStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ReadOnlySaveIt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * A class to access SaveIt data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class XmlSaveItStorage implements SaveItStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlSaveItStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public XmlSaveItStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public Path getSaveItFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public Optional\u003cReadOnlySaveIt\u003e readSaveIt() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return readSaveIt(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Similar to {@link #readSaveIt()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public Optional\u003cReadOnlySaveIt\u003e readSaveIt(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            logger.info(\"SaveIt file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlSerializableSaveIt xmlSaveIt \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return Optional.of(xmlSaveIt.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void saveSaveIt(ReadOnlySaveIt saveIt) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveSaveIt(saveIt, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Similar to {@link #saveSaveIt(ReadOnlySaveIt)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void saveSaveIt(ReadOnlySaveIt saveIt, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        requireNonNull(saveIt);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableSaveIt(saveIt));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 18,
      "leo-1997": 6,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/XmlSerializableSaveIt.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ReadOnlySaveIt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * An Immutable SaveIt that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yshu7"
        },
        "content": "@XmlRootElement(name \u003d \"saveit\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class XmlSerializableSaveIt {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ISSUE \u003d \"Issues list contains duplicate issue(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private List\u003cXmlAdaptedIssue\u003e issues;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Creates an empty XmlSerializableSaveIt."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public XmlSerializableSaveIt() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        issues \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public XmlSerializableSaveIt(ReadOnlySaveIt src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        issues.addAll(src.getIssueList().stream().map(XmlAdaptedIssue::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Converts this saveit into the model\u0027s {@code SaveIt} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * {@code XmlAdaptedIssue}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public SaveIt toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SaveIt saveIt \u003d new SaveIt();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        for (XmlAdaptedIssue i : issues) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            Issue issue \u003d i.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            if (saveIt.hasIssue(issue)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            saveIt.addIssue(issue);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return saveIt;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (!(other instanceof XmlSerializableSaveIt)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return issues.equals(((XmlSerializableSaveIt) other).issues);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 11,
      "leo-1997": 6,
      "zhengwei143": 3,
      "-": 44,
      "yshu7": 7
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.ui.BrowserPanelFocusChangeEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.ui.SolutionPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final String JAVADOC_PAGE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            \"https://docs.oracle.com/javase/7/docs/api/\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private boolean isNewPageLoaded;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        isNewPageLoaded \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        browser.focusedProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            if (newValue \u0026\u0026 isNewPageLoaded) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                raise(new BrowserPanelFocusChangeEvent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                isNewPageLoaded \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        browser.setFocusTraversable(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private void loadSolutionPage(Solution solution) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        loadPage(solution.solutionLink.getValue());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private void handleSolutionPanelSelectionChangedEvent(SolutionPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        loadSolutionPage(event.getNewSelection());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        isNewPageLoaded \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "xllliu": 20,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.ui.BrowserPanelFocusChangeEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import seedu.saveit.logic.AutoSuggestionManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.ListElementPointer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"-fx-fill: #ff6060\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private AutoSuggestionManager commandTextField;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        commandTextField.textProperty().addListener((observable, oldValue, newValue)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            -\u003e highlight(observable, oldValue, newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        commandTextField.initialise(logic);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * highlight different parameters for user friendly input command line"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @param value"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @param oldValue"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @param newValue"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private void highlight(ObservableValue\u003c?\u003e value, String oldValue, String newValue) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String userInput \u003d newValue;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        CommandHighlightManager highlightManager \u003d CommandHighlightManager.getInstance();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        highlightManager.highlight(commandTextField);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        case ENTER:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            handleCommandEntered();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        setCommandInput(historySnapshot.previous());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot}, if there exists a next input in {@code"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * historySnapshot}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        setCommandInput(historySnapshot.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText().trim().replaceAll(\"\\\\r|\\\\n\", \"\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            if (!commandTextField.getText().contains(AutoSuggestionManager.WORD_FIND)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                commandTextField.update(logic);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            setCommandInput(\"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            setCommandInput(commandTextField.getText());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private void setCommandInput(String string) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        commandTextField.clear();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        commandTextField.appendText(string.replaceAll(\"\\\\r|\\\\n\", \"\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // move the cursor to the end of the input string"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        commandTextField.moveTo(commandTextField.getText().length());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        commandTextField.setStyle(0, commandTextField.getText().length(), ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private void handleBrowserPanelFocusChangeEvent(BrowserPanelFocusChangeEvent event) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 43,
      "leo-1997": 13,
      "zhengwei143": 1,
      "xllliu": 9,
      "-": 114
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/CommandHighlightManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_NEW_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_SOLUTION_LINK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_STATEMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.fxmisc.richtext.InlineCssTextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Manager of command highlighter"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class CommandHighlightManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String STYLE_COMMAND_WORD \u003d \"-fx-fill: #f4ad42;\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String STYLE_PARAMETER_KEY \u003d \"-fx-fill: #ffff00;\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String STYLE_INDEX \u003d \"-fx-fill: #55ae47;\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String STYLE_NORMAL_VALUE \u003d \"-fx-fill: #42c3f4;\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static CommandHighlightManager instance;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static CommandHighlightManager getInstance() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            instance \u003d new CommandHighlightManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * highlight user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void highlight(InlineCssTextArea commandTextField) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String userInput \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        int position \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        while (isShorterThanInput(userInput, position) \u0026\u0026 isSpace(userInput, position)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            commandTextField.setStyle(position, position + 1, STYLE_COMMAND_WORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            position++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // highlight the following parameters, which are key-value pairs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        while (isShorterThanInput(userInput, position)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            while (isIndex(userInput, position)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                commandTextField.setStyle(position, position + 1, STYLE_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                position++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            if (isShorterThanInput(userInput, position) \u0026\u0026 isParameter(userInput, position)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                commandTextField.setStyle(position - 1, position + 1, STYLE_PARAMETER_KEY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                position++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            if (!isShorterThanInput(userInput, position)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            commandTextField.setStyle(position, position + 1, STYLE_NORMAL_VALUE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            position++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private boolean isSpace(String userInput, int position) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return userInput.charAt(position) !\u003d \u0027 \u0027;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private boolean isShorterThanInput(String userInput, int position) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return position \u003c userInput.length();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private boolean isIndex(String userInput, int position) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return isShorterThanInput(userInput, position) \u0026\u0026 Character.isDigit(userInput.charAt(position));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * check if user input parameters"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @return true if parameter, otherwise false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private boolean isParameter(String userInput, int position) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        StringBuilder input \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        input.append(userInput.charAt(position - 1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        input.append(userInput.charAt(position));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String inputCheck \u003d input.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        if (isParamter(inputCheck)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * check if find the parameter"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @param inputCheck every two consecutive characters."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @return true if parameter, otherwise false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private boolean isParamter(String inputCheck) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return inputCheck.equals(PREFIX_STATEMENT.toString()) || inputCheck.equals(PREFIX_SOLUTION_LINK.toString())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            || inputCheck.equals(PREFIX_REMARK.toString()) || inputCheck.equals(PREFIX_DESCRIPTION.toString())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            || inputCheck.equals(PREFIX_TAG.toString()) || inputCheck.equals(PREFIX_NEW_TAG.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 101
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/IssueCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * An UI component that displays information of a {@code Issue}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class IssueCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final String FXML \u003d \"IssueListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As a"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception will be thrown"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/saveit-level4/issues/336\"\u003eThe issue on SaveIt level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public final Issue issue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private Label statement;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public IssueCard(Issue issue, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.issue \u003d issue;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        statement.setText(issue.getStatement().issue);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        description.setText(issue.getDescription().value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        issue.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (!(other instanceof IssueCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        IssueCard card \u003d (IssueCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                \u0026\u0026 issue.equals(card.issue);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 4,
      "leo-1997": 15,
      "-": 43,
      "yshu7": 4
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/IssueListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * Panel containing the list of issues."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllliu"
        },
        "content": "public class IssueListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private static final String FXML \u003d \"IssueListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(IssueListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private ListView\u003cIssue\u003e issueListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public IssueListPanel(ObservableList\u003cIssue\u003e issueList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        setConnections(issueList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private void setConnections(ObservableList\u003cIssue\u003e issueList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        issueListView.setItems(issueList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        issueListView.setCellFactory(listView -\u003e new IssueListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        //setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        issueListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                        logger.fine(\"Selection in issue list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                        //raise(new SolutionPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Scrolls to the {@code IssueCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            issueListView.scrollTo(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            issueListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Issue} using a {@code IssueCard}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    class IssueListViewCell extends ListCell\u003cIssue\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        protected void updateItem(Issue issue, boolean empty) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            super.updateItem(issue, empty);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            if (empty || issue \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                setGraphic(new IssueCard(issue, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 20,
      "xllliu": 6,
      "-": 55,
      "yshu7": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.model.SaveItChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private IssueListPanel issueListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private SolutionListPanel solutionListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private StackPane issueListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private StackPane solutionListPanelPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        issueListPanel \u003d new IssueListPanel(logic.getFilteredAndSortedIssueList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        issueListPanelPlaceholder.getChildren().add(issueListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        solutionListPanel \u003d new SolutionListPanel(logic.getFilteredSolutionList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        solutionListPanelPlaceholder.getChildren().add(solutionListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getSaveItFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public IssueListPanel getIssueListPanel() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return issueListPanel;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        solutionListPanel.setSolutionList(logic.getFilteredSolutionList());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private void handleSaveItChangedEvent(SaveItChangedEvent event) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        solutionListPanel.setSolutionList(logic.getFilteredSolutionList());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 4,
      "leo-1997": 8,
      "xllliu": 26,
      "-": 188,
      "yshu7": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.ui.ChangeDirectoryRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private static final String ROOT_DIRECTORY \u003d \"../SaveIt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private final StringProperty currentDirectory \u003d new SimpleStringProperty(ROOT_DIRECTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private Label directory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        directory.textProperty().bind(currentDirectory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private void handleChangeDirectoryRequestEvent(ChangeDirectoryRequestEvent event) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        Platform.runLater(() -\u003e currentDirectory.setValue(event.directory.toString()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "xllliu": 15,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/SolutionCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllliu"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllliu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * An UI component that displays information of a {@code Solution}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": "public class SolutionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private static final String FXML \u003d \"SolutionListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception will be thrown"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/saveit-level4/issues/336\"\u003eThe issue on SaveIt level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public final Solution solution;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private Label link;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public SolutionCard(Solution solution, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        this.solution \u003d solution;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        id.setText(\"Solution \" + String.valueOf(displayedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        link.setText(solution.getLink().getValue());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        remark.setText(solution.getRemark().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        if (!(other instanceof SolutionCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        SolutionCard card \u003d (SolutionCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                \u0026\u0026 solution.equals(card.solution);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllliu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllliu": 61
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/SolutionListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllliu"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.ui.JumpToSolutionListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.ui.SolutionPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllliu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllliu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": "public class SolutionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private static final String FXML \u003d \"SolutionListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SolutionListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private ListView\u003cSolution\u003e solutionListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public SolutionListPanel(ObservableList\u003cSolution\u003e solutionList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        setConnections(solutionList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private void setConnections(ObservableList\u003cSolution\u003e solutionList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        solutionListView.setItems(solutionList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        solutionListView.setCellFactory(listView -\u003e new SolutionListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        solutionListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                        logger.fine(\"Selection in solution list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                        raise(new SolutionPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            solutionListView.scrollTo(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            solutionListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public void setSolutionList(ObservableList\u003cSolution\u003e solutionList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        solutionListView.setItems(solutionList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private void handleJumpToSolutionListRequestEvent(JumpToSolutionListRequestEvent event) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Issue} using a {@code PersonCard}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    class SolutionListViewCell extends ListCell\u003cSolution\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        protected void updateItem(Solution solution, boolean empty) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            super.updateItem(solution, empty);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            if (empty || solution \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                setGraphic(new SolutionCard(solution, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xllliu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllliu": 88
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.model.SaveItChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void handleSaveItChangedEvent(SaveItChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 3,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Stops the UI. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/saveIt_logo.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 9,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 4,
      "-": 102
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CommandBoxHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import org.fxmisc.richtext.InlineCssTextArea;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle to the {@code CommandBox} in the GUI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "public class CommandBoxHandle extends NodeHandle\u003cInlineCssTextArea\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public CommandBoxHandle(InlineCssTextArea commandBoxNode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(commandBoxNode);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text in the command box."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Enters the given command in the Command Box and presses enter."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().replaceText(command));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the list of style classes present in the command box."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 5,
      "-": 38
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/IssueCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Provides a handle to an issue card in the issue list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class IssueCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static final String STATEMENT_FIELD_ID \u003d \"#statement\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private final Label statementLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final Label descriptionsLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public IssueCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        statementLabel \u003d getChildNode(STATEMENT_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        descriptionsLabel \u003d getChildNode(DESCRIPTION_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public String getStatement() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return statementLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return descriptionsLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Returns true if this handle contains {@code issue}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public boolean equals(Issue issue) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return getStatement().equals(issue.getStatement().issue)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                \u0026\u0026 getDescription().equals(issue.getDescription().value)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(issue.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 7,
      "leo-1997": 8,
      "-": 48,
      "yshu7": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/IssueListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * Provides a handle for {@code IssueListPanel} containing the list of {@code IssueCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class IssueListPanelHandle extends NodeHandle\u003cListView\u003cIssue\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String ISSUE_LIST_VIEW_ID \u003d \"#issueListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Optional\u003cIssue\u003e lastRememberedSelectedIssueCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public IssueListPanelHandle(ListView\u003cIssue\u003e issueListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        super(issueListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Returns a handle to the selected {@code IssueCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public IssueCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        List\u003cIssue\u003e selectedIssueList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (selectedIssueList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new AssertionError(\"Issue list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .map(IssueCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedIssueList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        List\u003cIssue\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Navigates the listview to display {@code issue}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void navigateToCard(Issue issue) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        if (!getRootNode().getItems().contains(issue)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new IllegalArgumentException(\"Issue does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            getRootNode().scrollTo(issue);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Selects the {@code IssueCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns the issue card handle of an issue associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public IssueCardHandle getIssueCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .map(IssueCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                .filter(handle -\u003e handle.equals(getIssue(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Issue getIssue(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Remembers the selected {@code IssueCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void rememberSelectedIssueCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        List\u003cIssue\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            lastRememberedSelectedIssueCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            lastRememberedSelectedIssueCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns true if the selected {@code IssueCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * {@code rememberSelectedIssueCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public boolean isSelectedIssueCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        List\u003cIssue\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return lastRememberedSelectedIssueCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return !lastRememberedSelectedIssueCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                    || !lastRememberedSelectedIssueCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 21,
      "leo-1997": 13,
      "-": 121,
      "yshu7": 4
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final IssueListPanelHandle issueListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        issueListPanel \u003d new IssueListPanelHandle(getChildNode(IssueListPanelHandle.ISSUE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public IssueListPanelHandle getIssueListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return issueListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/SolutionCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllliu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllliu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * Provides a handle to an solution card in the solution list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllliu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllliu"
        },
        "content": "public class SolutionCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private static final String LINK_FIELD_ID \u003d \"#link\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private static final String REMARK_FIELD_ID \u003d \"#remark\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private final Label linkLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private final Label remarkLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public SolutionCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        linkLabel \u003d getChildNode(LINK_FIELD_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        remarkLabel \u003d getChildNode(REMARK_FIELD_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public String getLink() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return linkLabel.getText();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public String getRemark() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return remarkLabel.getText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Returns true if this handle contains {@code solution}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public boolean equals(Solution solution) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return getLink().equals(solution.getLink().getValue())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                \u0026\u0026 getRemark().equals(solution.getRemark().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllliu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllliu": 48
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/saveit/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 5,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/saveit/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ReadOnlySaveIt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.storage.XmlSerializableSaveIt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    protected Supplier\u003cReadOnlySaveIt\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlySaveIt\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            createDataFileWithData(new XmlSerializableSaveIt(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        userPrefs.setSaveItFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Returns a defensive copy of the saveit book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public SaveIt readStorageSaveIt() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return new SaveIt(storage.readSaveIt().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new AssertionError(\"Data is not in the SaveIt format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return storage.getSaveItFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Model copy \u003d new ModelManager((model.getSaveIt()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredAndSortedIssueList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 9,
      "leo-1997": 15,
      "-": 95,
      "yshu7": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : SaveIt\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        final Index fifthIssueIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(fifthIssueIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(fifthIssueIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(fifthIssueIndex.equals(fifthIssueIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(fifthIssueIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(fifthIssueIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(fifthIssueIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 7,
      "leo-1997": 1,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/saveIt_logo.png\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 42,
      "yshu7": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(\"Typical App Title\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setAppTitle(\"Updated Title\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    //---------------- Tests for partialMatchIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void partialMatchIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        StringUtil.partialMatchIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void partialMatchIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void partialMatchIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void partialMatchIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void partialMatchIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertFalse(StringUtil.partialMatchIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertFalse(StringUtil.partialMatchIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // The word has to be a partial string of the sentence in order to correctly partially match"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertFalse(StringUtil.partialMatchIgnoreCase(\"aaa bbb ccc\", \"bbbb\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertFalse(StringUtil.partialMatchIgnoreCase(\"aaa bbb ccc\", \"AAAA\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // partial match does not match with spaces between"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertFalse(StringUtil.partialMatchIgnoreCase(\"aaabB ccC\", \"bbc\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // Sentence partially matched with the word correctly, case is ignored"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertTrue(StringUtil.partialMatchIgnoreCase(\"aaabbbccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertTrue(StringUtil.partialMatchIgnoreCase(\"aaabBbccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertTrue(StringUtil.partialMatchIgnoreCase(\"aaabBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertTrue(StringUtil.partialMatchIgnoreCase(\"  AAAbBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertTrue(StringUtil.partialMatchIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertTrue(StringUtil.partialMatchIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertTrue(StringUtil.partialMatchIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "zhengwei143": 22,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.storage.XmlAdaptedIssue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.storage.XmlAdaptedSolution;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.storage.XmlSerializableSaveIt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.SaveItBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.TestUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validSaveIt.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final Path MISSING_ISSUE_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingIssueField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final Path INVALID_ISSUE_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidIssueField.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final Path VALID_ISSUE_FILE \u003d TEST_DATA_FOLDER.resolve(\"validIssue.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempSaveIt.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static final String VALID_STATEMENT \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"9482424\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static final List\u003cXmlAdaptedSolution\u003e VALID_SOLUTIONS \u003d Collections"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            .singletonList(new XmlAdaptedSolution(\"webSite remark\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            .singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlUtil.getDataFromFile(null, SaveIt.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, SaveIt.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, SaveIt.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        SaveIt dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableSaveIt.class).toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(9, dataFromFile.getIssueList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void xmlAdaptedIssueFromFile_fileWithMissingIssueField_validResult() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlAdaptedIssue actualIssue \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            MISSING_ISSUE_FIELD_FILE, XmlAdaptedIssueWithRootElement.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlAdaptedIssue expectedIssue \u003d new XmlAdaptedIssue("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                null, VALID_DESCRIPTION, VALID_SOLUTIONS, VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(expectedIssue, actualIssue);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void xmlAdaptedIssueFromFile_fileWithInvalidIssueField_validResult() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlAdaptedIssue actualIssue \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            INVALID_ISSUE_FIELD_FILE, XmlAdaptedIssueWithRootElement.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlAdaptedIssue expectedIssue \u003d new XmlAdaptedIssue("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                VALID_STATEMENT, INVALID_DESCRIPTION, VALID_SOLUTIONS, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(expectedIssue, actualIssue);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void xmlAdaptedIssueFromFile_fileWithValidIssue_validResult() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlAdaptedIssue actualIssue \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            VALID_ISSUE_FILE, XmlAdaptedIssueWithRootElement.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlAdaptedIssue expectedIssue \u003d new XmlAdaptedIssue("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                VALID_STATEMENT, VALID_DESCRIPTION, VALID_SOLUTIONS, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(expectedIssue, actualIssue);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlUtil.saveDataToFile(null, new SaveIt());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new SaveIt());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlSerializableSaveIt dataToWrite \u003d new XmlSerializableSaveIt(new SaveIt());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlSerializableSaveIt dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableSaveIt.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SaveItBuilder builder \u003d new SaveItBuilder(new SaveIt());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        dataToWrite \u003d new XmlSerializableSaveIt("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                builder.withIssue(new IssueBuilder().build()).build());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableSaveIt.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * XmlAdaptedIssue} objects."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @XmlRootElement(name \u003d \"issue\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static class XmlAdaptedIssueWithRootElement extends XmlAdaptedIssue {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 45,
      "leo-1997": 18,
      "zhengwei143": 4,
      "-": 77,
      "yshu7": 6
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 174
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.logic.commands.DangerCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void execute_confirmedDangerCommand_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String clearCommand \u003d ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCommandSuccess(clearCommand,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                String.format(DangerCommand.ASK_FOR_CONFIRMATION, ClearCommand.COMMAND_WORD), model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCommandSuccess(LogicManager.CONFIRM_ALIAS, ClearCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertHistoryCorrect(LogicManager.CONFIRM_ALIAS, clearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void execute_unconfirmedDangerCommand_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String clearCommand \u003d ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String input \u003d \"any other word\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCommandSuccess(clearCommand,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                String.format(DangerCommand.ASK_FOR_CONFIRMATION, ClearCommand.COMMAND_WORD), model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCommandSuccess(input, String.format(DangerCommand.CONFIRMATION_FAILED, ClearCommand.COMMAND_WORD), model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertHistoryCorrect(input, clearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void getFilteredAndSortedIssueList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        logic.getFilteredAndSortedIssueList().remove(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     *      - {@code expectedModel}\u0027s saveit book was saved to the storage file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 10,
      "-": 108,
      "yshu7": 27
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalSaveIt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void execute_newIssue_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue validIssue \u003d new IssueBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.addIssue(validIssue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.commitSaveIt();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandSuccess(new AddCommand(validIssue), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                String.format(AddCommand.MESSAGE_ISSUE_SUCCESS, validIssue), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void execute_duplicateIssue_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Issue issueInList \u003d model.getSaveIt().getIssueList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(new AddCommand(issueInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 9,
      "leo-1997": 14,
      "-": 25,
      "yshu7": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.directory.Directory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ReadOnlySaveIt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueSort;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final int ROOT_LEVEL_INDEX \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final int EMPTY_SOLUTION_LIST_INDEX \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final Directory HOME_DIRECTORY \u003d new Directory(ROOT_LEVEL_INDEX, EMPTY_SOLUTION_LIST_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void constructor_nullIssue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void execute_issueAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        ModelStubAcceptingIssueAdded modelStub \u003d new ModelStubAcceptingIssueAdded();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue validIssue \u003d new IssueBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validIssue).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_ISSUE_SUCCESS, validIssue), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(Arrays.asList(validIssue), modelStub.issuesAdded);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void execute_duplicateIssue_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue validIssue \u003d new IssueBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validIssue);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithIssue(validIssue);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue alice \u003d new IssueBuilder().withStatement(\"Alice\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue bob \u003d new IssueBuilder().withStatement(\"Bob\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // different issue -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * A default model stub that have all of the methods failing except method getCurrentDirectory();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void addIssue(Issue issue) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void resetData(ReadOnlySaveIt newData) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        public void resetDirectory(Directory currentDirectory) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        public Directory getCurrentDirectory() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            return HOME_DIRECTORY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public ReadOnlySaveIt getSaveIt() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public boolean hasIssue(Issue issue) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        public boolean hasSolution(Index index, Solution solution) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void deleteIssue(Issue target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        public void addSolution(Index index, Solution solution) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void updateIssue(Issue target, Issue editedIssue) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public ObservableList\u003cIssue\u003e getFilteredIssueList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        public ObservableList\u003cSolution\u003e getFilteredSolutionList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        public ObservableList\u003cIssue\u003e getFilteredAndSortedIssueList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        public void filterIssues(Predicate\u003cIssue\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void updateFilteredIssueList(Predicate\u003cIssue\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void sortIssues(IssueSort sortType) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        public void updateFilteredAndSortedIssueList(Comparator\u003cIssue\u003e sortType) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void addTag(Index index, Set\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public boolean canUndoSaveIt() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public boolean canRedoSaveIt() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void undoSaveIt() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void redoSaveIt() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void commitSaveIt() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public boolean refactorTag(Tag oldTag, Tag newTag) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * A Model stub that contains a single issue."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private class ModelStubWithIssue extends ModelStub {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        private final Issue issue;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        ModelStubWithIssue(Issue issue) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            requireNonNull(issue);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            this.issue \u003d issue;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public boolean hasIssue(Issue issue) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            requireNonNull(issue);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            return this.issue.isSameIssue(issue);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * A Model stub that always accept the issue being added."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private class ModelStubAcceptingIssueAdded extends ModelStub {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        final ArrayList\u003cIssue\u003e issuesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public boolean hasIssue(Issue issue) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            requireNonNull(issue);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return issuesAdded.stream().anyMatch(issue::isSameIssue);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void addIssue(Issue issue) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            requireNonNull(issue);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            issuesAdded.add(issue);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void commitSaveIt() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public ReadOnlySaveIt getSaveIt() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            return new SaveIt();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 59,
      "leo-1997": 39,
      "zhengwei143": 5,
      "xllliu": 15,
      "-": 135,
      "yshu7": 19
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalSaveIt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void execute_emptySaveIt_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.commitSaveIt();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void execute_nonEmptySaveIt_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.resetData(new SaveIt());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.commitSaveIt();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 9,
      "leo-1997": 8,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_NEW_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_SOLUTION_LINK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_STATEMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.EditIssueDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String VALID_STATEMENT_JAVA \u003d \"Jave Issue\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String VALID_STATEMENT_C \u003d \"C Issue\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String VALID_DESCRIPTION_JAVA \u003d \"syntax error\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String VALID_DESCRIPTION_C \u003d \"94351253\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String VALID_SOLUTION_JAVA \u003d \"http://www.oracle.com RemarkJava\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String VALID_SOLUTION_C \u003d \"https://stackoverflow.com/ RemarkC\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final String VALID_SOLUTION_STACKOVERFLOW \u003d \"https://stackoverflow.com/ newSol\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String VALID_TAG_UI \u003d \"ui\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String VALID_TAG_SYNTAX \u003d \"syntax\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String STATEMENT_DESC_JAVA \u003d \" \" + PREFIX_STATEMENT + VALID_STATEMENT_JAVA;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String STATEMENT_DESC_C \u003d \" \" + PREFIX_STATEMENT + VALID_STATEMENT_C;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String DESCRIPTION_DESC_JAVA \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_JAVA;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String DESCRIPTION_DESC_C \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_C;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String SOLUTION_DESC_JAVA \u003d \" \" + PREFIX_SOLUTION_LINK + VALID_SOLUTION_JAVA;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String SOLUTION_DESC_C \u003d \" \" + PREFIX_SOLUTION_LINK + VALID_SOLUTION_C;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String TAG_DESC_SYNTAX \u003d \" \" + PREFIX_TAG + VALID_TAG_SYNTAX;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String TAG_DESC_UI \u003d \" \" + PREFIX_TAG + VALID_TAG_UI;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String NEWTAG_DESC_SYNTAX \u003d \" \" + PREFIX_NEW_TAG + VALID_TAG_SYNTAX;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String NEWTAG_DESC_UI \u003d \" \" + PREFIX_NEW_TAG + VALID_TAG_UI;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String INVALID_STATEMENT_DESC \u003d \" \" + PREFIX_STATEMENT + \" \"; // \u0027empty\u0027 not allowed in names"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        \" \" + PREFIX_DESCRIPTION + \" \"; // \u0027empty\u0027 not allowed in descriptions"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \" \"; // \u0027empty\u0027 not allowed in tags"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final EditCommand.EditIssueDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final EditCommand.EditIssueDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        DESC_AMY \u003d new EditIssueDescriptorBuilder().withStatement(VALID_STATEMENT_JAVA)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_JAVA)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            .withSolutions(VALID_SOLUTION_JAVA)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            .withTags(VALID_TAG_SYNTAX).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        DESC_BOB \u003d new EditIssueDescriptorBuilder().withStatement(VALID_STATEMENT_C)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_C)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            .withSolutions(VALID_SOLUTION_C)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            .withTags(VALID_TAG_UI, VALID_TAG_SYNTAX).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e - the {@code actualCommandHistory} remains"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * unchanged."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e - a {@code CommandException} is thrown \u003cbr\u003e - the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * CommandException message matches {@code expectedMessage} \u003cbr\u003e - the saveit book and the filtered issue list in"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * the {@code actualModel} remain unchanged \u003cbr\u003e - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SaveIt expectedSaveIt \u003d new SaveIt(actualModel.getSaveIt());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        List\u003cIssue\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredIssueList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            assertEquals(expectedSaveIt, actualModel.getSaveIt());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredIssueList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the issue at the given {@code targetIndex} in the {@code"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * model}\u0027s saveit book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static void showIssueAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAndSortedIssueList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issue \u003d model.getFilteredAndSortedIssueList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        final String[] splitName \u003d issue.getStatement().issue.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.updateFilteredIssueList(new IssueContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertEquals(1, model.getFilteredAndSortedIssueList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Deletes the first issue in {@code model}\u0027s filtered list from {@code model}\u0027s saveit book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static void deleteFirstIssue(Model model) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue firstIssue \u003d model.getFilteredAndSortedIssueList().get(0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.deleteIssue(firstIssue);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.commitSaveIt();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 29,
      "leo-1997": 17,
      "zhengwei143": 1,
      "xllliu": 3,
      "-": 45,
      "yshu7": 42
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.showIssueAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_SECOND_ISSUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalSaveIt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issueToDelete \u003d model.getFilteredAndSortedIssueList().get(INDEX_FIRST_ISSUE.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ISSUE_SUCCESS, issueToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.deleteIssue(issueToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.commitSaveIt();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAndSortedIssueList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssueAtIndex(model, INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issueToDelete \u003d model.getFilteredAndSortedIssueList().get(INDEX_FIRST_ISSUE.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ISSUE_SUCCESS, issueToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.deleteIssue(issueToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.commitSaveIt();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showNoIssue(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssueAtIndex(model, INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ISSUE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of saveit book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSaveIt().getIssueList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issueToDelete \u003d model.getFilteredAndSortedIssueList().get(INDEX_FIRST_ISSUE.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.deleteIssue(issueToDelete);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.commitSaveIt();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // delete -\u003e first issue deleted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // undo -\u003e reverts saveit back to previous state and filtered issue list to show all issues"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.undoSaveIt();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // redo -\u003e same first issue deleted again"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.redoSaveIt();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAndSortedIssueList().size() + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // execution failed -\u003e saveit book state not added into model"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // single saveit book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * 1. Deletes a {@code Issue} from a filtered list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted issue in the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the issue object regardless of indexing."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameIssueDeleted() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssueAtIndex(model, INDEX_SECOND_ISSUE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issueToDelete \u003d model.getFilteredAndSortedIssueList().get(INDEX_FIRST_ISSUE.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.deleteIssue(issueToDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.commitSaveIt();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // delete -\u003e deletes second issue in unfiltered issue list / first issue in filtered issue list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // undo -\u003e reverts saveit back to previous state and filtered issue list to show all issues"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.undoSaveIt();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertNotEquals(issueToDelete, model.getFilteredAndSortedIssueList().get(INDEX_FIRST_ISSUE.getZeroBased()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // redo -\u003e deletes same second issue in unfiltered issue list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.redoSaveIt();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ISSUE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // different issue -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private void showNoIssue(Model model) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.updateFilteredIssueList(p -\u003e false);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(model.getFilteredAndSortedIssueList().isEmpty());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 40,
      "leo-1997": 32,
      "-": 99,
      "yshu7": 8
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DESCRIPTION_C;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_STATEMENT_C;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.showIssueAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_SECOND_ISSUE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalSaveIt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.EditCommand.EditIssueDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.EditIssueDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue editedIssue \u003d new IssueBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder(editedIssue).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ISSUE, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ISSUE_SUCCESS, editedIssue);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SaveIt(model.getSaveIt()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        expectedModel.updateIssue(model.getFilteredAndSortedIssueList().get(0), editedIssue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.commitSaveIt();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Index indexLastIssue \u003d Index.fromOneBased(model.getFilteredAndSortedIssueList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue lastIssue \u003d model.getFilteredAndSortedIssueList().get(indexLastIssue.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        IssueBuilder issueInList \u003d new IssueBuilder(lastIssue);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Issue editedIssue \u003d issueInList.withStatement(VALID_STATEMENT_C).withDescription(VALID_DESCRIPTION_C)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withTags(VALID_TAG_UI).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder().withStatement(VALID_STATEMENT_C)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_C).withTags(VALID_TAG_UI).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastIssue, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ISSUE_SUCCESS, editedIssue);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SaveIt(model.getSaveIt()), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.updateIssue(lastIssue, editedIssue);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.commitSaveIt();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ISSUE, new EditIssueDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue editedIssue \u003d model.getFilteredAndSortedIssueList().get(INDEX_FIRST_ISSUE.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ISSUE_SUCCESS, editedIssue);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SaveIt(model.getSaveIt()), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.commitSaveIt();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssueAtIndex(model, INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issueInFilteredList \u003d model.getFilteredAndSortedIssueList().get(INDEX_FIRST_ISSUE.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue editedIssue \u003d new IssueBuilder(issueInFilteredList).withStatement(VALID_STATEMENT_C).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ISSUE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                new EditIssueDescriptorBuilder().withStatement(VALID_STATEMENT_C).build());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ISSUE_SUCCESS, editedIssue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SaveIt(model.getSaveIt()), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        expectedModel.updateIssue(model.getFilteredAndSortedIssueList().get(0), editedIssue);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.commitSaveIt();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void execute_duplicateIssueUnfilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue firstIssue \u003d model.getFilteredAndSortedIssueList().get(INDEX_FIRST_ISSUE.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder(firstIssue).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ISSUE, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void execute_duplicateIssueFilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssueAtIndex(model, INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // edit issue in filtered list into a duplicate in saveit book"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Issue issueInList \u003d model.getSaveIt().getIssueList().get(INDEX_SECOND_ISSUE.getZeroBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ISSUE,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                new EditIssueDescriptorBuilder(issueInList).build());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void execute_invalidIssueIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAndSortedIssueList().size() + 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand.EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withStatement(VALID_STATEMENT_C).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * but smaller than size of saveit book"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void execute_invalidIssueIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssueAtIndex(model, INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ISSUE;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of saveit book list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSaveIt().getIssueList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                new EditIssueDescriptorBuilder().withStatement(VALID_STATEMENT_C).build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue editedIssue \u003d new IssueBuilder().build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issueToEdit \u003d model.getFilteredAndSortedIssueList().get(INDEX_FIRST_ISSUE.getZeroBased());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand.EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder(editedIssue).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ISSUE, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SaveIt(model.getSaveIt()), new UserPrefs());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.updateIssue(issueToEdit, editedIssue);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.commitSaveIt();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // edit -\u003e first issue edited"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // undo -\u003e reverts saveit back to previous state and filtered issue list to show all issues"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.undoSaveIt();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // redo -\u003e same first issue edited again"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.redoSaveIt();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAndSortedIssueList().size() + 1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder().withStatement(VALID_STATEMENT_C).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // execution failed -\u003e saveit book state not added into model"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // single saveit book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * 1. Edits a {@code Issue} from a filtered list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited issue in the"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the issue object regardless of indexing."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameIssueEdited() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue editedIssue \u003d new IssueBuilder().build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder(editedIssue).build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ISSUE, descriptor);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new SaveIt(model.getSaveIt()), new UserPrefs());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssueAtIndex(model, INDEX_SECOND_ISSUE);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issueToEdit \u003d model.getFilteredAndSortedIssueList().get(INDEX_FIRST_ISSUE.getZeroBased());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.updateIssue(issueToEdit, editedIssue);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.commitSaveIt();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // edit -\u003e edits second issue in unfiltered issue list / first issue in filtered issue list"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // undo -\u003e reverts saveit back to previous state and filtered issue list to show all issues"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.undoSaveIt();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertNotEquals(model.getFilteredAndSortedIssueList().get(INDEX_FIRST_ISSUE.getZeroBased()), issueToEdit);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // redo -\u003e edits same second issue in unfiltered issue list"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.redoSaveIt();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ISSUE, DESC_AMY);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        EditIssueDescriptor copyDescriptor \u003d new EditIssueDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ISSUE, copyDescriptor);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ISSUE, DESC_AMY)));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ISSUE, DESC_BOB)));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 67,
      "leo-1997": 40,
      "xllliu": 1,
      "-": 122,
      "yshu7": 31
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/EditIssueDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DESCRIPTION_C;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_SOLUTION_C;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_STATEMENT_C;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.EditCommand.EditIssueDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.EditIssueDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "public class EditIssueDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        EditIssueDescriptor descriptorWithSameValues \u003d new EditCommand.EditIssueDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditIssueDescriptor editedAmy \u003d new EditIssueDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withStatement(VALID_STATEMENT_C).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        editedAmy \u003d new EditIssueDescriptorBuilder(DESC_AMY).withDescription(VALID_DESCRIPTION_C).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        // different solutions -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        editedAmy \u003d new EditIssueDescriptorBuilder(DESC_AMY).withSolutions(VALID_SOLUTION_C).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        editedAmy \u003d new EditIssueDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_UI).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 11,
      "leo-1997": 10,
      "xllliu": 1,
      "-": 32,
      "yshu7": 2
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d new ExitCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 7,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_ISSUES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalSaveIt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        IssueContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                new IssueContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        IssueContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                new IssueContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // different issue -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void execute_zeroKeywords_noIssueFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ISSUES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        IssueContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.updateFilteredIssueList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredAndSortedIssueList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void execute_multipleKeywords_multipleIssuesFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ISSUES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        IssueContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.updateFilteredIssueList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredAndSortedIssueList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Parses {@code userInput} into a {@code IssueContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private IssueContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return new IssueContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 19,
      "leo-1997": 13,
      "zhengwei143": 9,
      "-": 45,
      "yshu7": 2
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, SHOWING_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 2,
      "leo-1997": 8,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 5,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.showIssueAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalSaveIt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssueAtIndex(model, INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 3,
      "leo-1997": 9,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.deleteFirstIssue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalSaveIt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        deleteFirstIssue(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        deleteFirstIssue(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.undoSaveIt();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.undoSaveIt();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        deleteFirstIssue(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        deleteFirstIssue(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.undoSaveIt();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.undoSaveIt();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.redoSaveIt();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.redoSaveIt();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 14,
      "leo-1997": 9,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/RetrieveCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_SECOND_ISSUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalSaveIt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.awt.datatransfer.DataFlavor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.directory.Directory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.solution.SolutionLink;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "public class RetrieveCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        model \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void execute_retrieveValidIndex_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            Index issueIndex \u003d ParserUtil.parseIndex(\"3\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            model.resetDirectory(new Directory(issueIndex.getOneBased(), 0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            Index solutionIndex \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            String expectedMessage \u003d String.format(RetrieveCommand.MESSAGE_RETRIEVE_LINK_SUCCESS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    solutionIndex.getOneBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            RetrieveCommand retrieveCommand \u003d new RetrieveCommand(solutionIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            assertCommandSuccess(retrieveCommand, model, commandHistory, expectedMessage, model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            SolutionLink link \u003d new SolutionLink((String) Toolkit.getDefaultToolkit()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    .getSystemClipboard().getData(DataFlavor.stringFlavor));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            SolutionLink expectedSolutionLink \u003d model.getFilteredAndSortedIssueList().get(2)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    .getSolutions().get(0).getLink();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            assertEquals(expectedSolutionLink, link);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new AssertionError(\"There should not be an error retrieving the solution link\", e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void execute_retrieveInvalidIndex_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Index solutionIndex;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            Index issueIndex \u003d ParserUtil.parseIndex(\"3\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            model.resetDirectory(new Directory(issueIndex.getOneBased(), 0));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            solutionIndex \u003d ParserUtil.parseIndex(\"2\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new AssertionError(\"There should not be any parse exception\", e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String expectedMessage \u003d RetrieveCommand.MESSAGE_FAILED_SOLUTION;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        RetrieveCommand retrieveCommand \u003d new RetrieveCommand(solutionIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(retrieveCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void execute_retrieveInvalidDirectory_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Index solutionIndex;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            solutionIndex \u003d ParserUtil.parseIndex(\"2\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            throw new AssertionError(\"There should not be any parse exception\", e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String expectedMessage \u003d RetrieveCommand.MESSAGE_FAILED_SELECTION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        RetrieveCommand retrieveCommand \u003d new RetrieveCommand(solutionIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(retrieveCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        final RetrieveCommand standardCommand \u003d new RetrieveCommand(INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        RetrieveCommand sameCommand \u003d new RetrieveCommand(INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertEquals(standardCommand, sameCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertEquals(sameCommand, sameCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertFalse(standardCommand.equals(new RetrieveCommand(INDEX_SECOND_ISSUE)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 101
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.showIssueAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_SECOND_ISSUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_THIRD_ISSUE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalSaveIt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Index lastIssueIndex \u003d Index.fromOneBased(model.getFilteredAndSortedIssueList().size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_ISSUE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertExecutionSuccess(lastIssueIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredAndSortedIssueList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssueAtIndex(model, INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssueAtIndex(expectedModel, INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssueAtIndex(model, INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssueAtIndex(expectedModel, INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_ISSUE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of saveit book list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getSaveIt().getIssueList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_ISSUE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // different issue -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_ISSUE_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 18,
      "leo-1997": 20,
      "xllliu": 2,
      "-": 79,
      "yshu7": 2
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yshu7"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.GEORGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalSaveIt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.model.issue.IssueContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.model.issue.IssueSort;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        model \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void execute_sortIsNotFiltered_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        IssueSort issueSort \u003d prepareIssueSort(IssueSort.TAG_SORT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, issueSort.getSortType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        expectedModel.updateFilteredAndSortedIssueList(issueSort.getComparator());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        SortCommand command \u003d new SortCommand(issueSort);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL, BENSON, ALICE, GEORGE, FIONA, ELLE, CARL),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                model.getFilteredAndSortedIssueList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void execute_sortIsFiltered_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String[] keywordArray \u003d {\"Alice\", \"Benson\", \"Daniel\", \"Meyer\"};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        filterIssueList(keywordArray);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        IssueSort issueSort \u003d prepareIssueSort(IssueSort.TAG_SORT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, issueSort.getSortType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        expectedModel.updateFilteredAndSortedIssueList(issueSort.getComparator());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        SortCommand command \u003d new SortCommand(issueSort);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL, BENSON, ALICE, ELLE), model.getFilteredAndSortedIssueList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void execute_sortAfterUpdate_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        IssueSort issueSort \u003d prepareIssueSort(IssueSort.TAG_SORT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, issueSort.getSortType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issue \u003d new Issue(new IssueStatement(\"new C++ problem\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                new Description(\"only for test\"), new ArrayList\u003c\u003e(), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        expectedModel.updateFilteredAndSortedIssueList(issueSort.getComparator());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        expectedModel.addIssue(issue);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        model.addIssue(issue);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        SortCommand command \u003d new SortCommand(issueSort);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL, BENSON, ALICE, issue, GEORGE, FIONA, ELLE, CARL),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                model.getFilteredAndSortedIssueList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Parses {@code userInput} into a {@code Comparator\u003cIssue\u003e}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private IssueSort prepareIssueSort(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return new IssueSort(userInput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Filter issue lists in both model and expectedModel by the provided keywords."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * @param keywordArray"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private void filterIssueList(String[] keywordArray) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(keywordArray);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        IssueContainsKeywordsPredicate predicate \u003d new IssueContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        model.updateFilteredIssueList(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        expectedModel.updateFilteredIssueList(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yshu7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yshu7": 100
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.deleteFirstIssue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalSaveIt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalSaveIt(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        deleteFirstIssue(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        deleteFirstIssue(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        deleteFirstIssue(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        deleteFirstIssue(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.undoSaveIt();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.undoSaveIt();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 10,
      "leo-1997": 9,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESCRIPTION_DESC_C;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESCRIPTION_DESC_JAVA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_STATEMENT_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.SOLUTION_DESC_C;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.SOLUTION_DESC_JAVA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.STATEMENT_DESC_C;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.STATEMENT_DESC_JAVA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_SYNTAX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_UI;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DESCRIPTION_C;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_SOLUTION_C;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_SOLUTION_JAVA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_STATEMENT_C;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_SYNTAX;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_UI;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.INITIALIZED_ISSUE_FREQUENCY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue expectedIssue \u003d new IssueBuilder(BOB).withTags(VALID_TAG_UI).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + STATEMENT_DESC_C + DESCRIPTION_DESC_C"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + SOLUTION_DESC_C + CommandTestUtil.TAG_DESC_UI, new AddCommand(expectedIssue));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseSuccess(parser, STATEMENT_DESC_JAVA + STATEMENT_DESC_C + DESCRIPTION_DESC_C"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + SOLUTION_DESC_C + CommandTestUtil.TAG_DESC_UI, new AddCommand(expectedIssue));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // multiple descriptionss - last descriptions accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseSuccess(parser, STATEMENT_DESC_C + DESCRIPTION_DESC_JAVA + DESCRIPTION_DESC_C"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + SOLUTION_DESC_C + CommandTestUtil.TAG_DESC_UI, new AddCommand(expectedIssue));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        // multiple solutions - all accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue expectedIssueMultipleSolutions \u003d new IssueBuilder(BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withSolutions(VALID_SOLUTION_JAVA, VALID_SOLUTION_C).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseSuccess(parser, STATEMENT_DESC_C + DESCRIPTION_DESC_C + SOLUTION_DESC_JAVA"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + SOLUTION_DESC_C + CommandTestUtil.TAG_DESC_UI, new AddCommand(expectedIssueMultipleSolutions));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue expectedIssueMultipleTags \u003d new IssueBuilder(BOB).withTags(VALID_TAG_SYNTAX, VALID_TAG_UI)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseSuccess(parser, STATEMENT_DESC_C + DESCRIPTION_DESC_C + SOLUTION_DESC_C"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + TAG_DESC_SYNTAX + CommandTestUtil.TAG_DESC_UI, new AddCommand(expectedIssueMultipleTags));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        Issue expectedIssue \u003d new IssueBuilder(AMY).withTags().withSolutions()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                .withFrequency(INITIALIZED_ISSUE_FREQUENCY).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseSuccess(parser, STATEMENT_DESC_JAVA + DESCRIPTION_DESC_JAVA,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                new AddCommand(expectedIssue));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        // missing statement prefix"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, VALID_STATEMENT_C + DESCRIPTION_DESC_C + SOLUTION_DESC_C,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, STATEMENT_DESC_C + VALID_DESCRIPTION_C + SOLUTION_DESC_C,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, VALID_STATEMENT_C + VALID_DESCRIPTION_C + VALID_SOLUTION_C,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, INVALID_STATEMENT_DESC + DESCRIPTION_DESC_C"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + TAG_DESC_UI + CommandTestUtil.TAG_DESC_UI, IssueStatement.MESSAGE_ISSUE_STATEMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // invalid descriptions"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, STATEMENT_DESC_C + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + TAG_DESC_UI + CommandTestUtil.TAG_DESC_UI, Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + STATEMENT_DESC_C + DESCRIPTION_DESC_C"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + TAG_DESC_UI + CommandTestUtil.TAG_DESC_UI,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 6,
      "leo-1997": 33,
      "zhengwei143": 3,
      "-": 43,
      "yshu7": 28
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/AddTagCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.commands.AddTagCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESCRIPTION_DESC_C;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_SYNTAX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_SYNTAX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class AddTagCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private AddTagCommandParser parser \u003d new AddTagCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void parse_validOneTag_returnAddTagCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        tagSet.add(new Tag(VALID_TAG_UI));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        AddTagCommand expectedAddTagCommand \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            new AddTagCommand(INDEX_FIRST_ISSUE, tagSet);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseSuccess(parser, \"1\" + TAG_DESC_UI, expectedAddTagCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void parse_validMoreTags_returnAddTagCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        tagSet.add(new Tag(VALID_TAG_UI));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        tagSet.add(new Tag(VALID_TAG_SYNTAX));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        AddTagCommand expectedAddTagCommand \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            new AddTagCommand(INDEX_FIRST_ISSUE, tagSet);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseSuccess(parser, \"1\" + TAG_DESC_UI + TAG_DESC_SYNTAX, expectedAddTagCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // without index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_UI,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // with index, but other prefix"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_C,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 72
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ISSUE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 6,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESCRIPTION_DESC_C;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESCRIPTION_DESC_JAVA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_STATEMENT_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.STATEMENT_DESC_JAVA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DESCRIPTION_C;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JAVA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_STATEMENT_JAVA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_SYNTAX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_UI;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_STATEMENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_SECOND_ISSUE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_THIRD_ISSUE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.EditIssueDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final String STATEMENT_EMPTY \u003d \" \" + PREFIX_STATEMENT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseFailure(parser, STATEMENT_EMPTY + VALID_STATEMENT_JAVA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, \"-5\" + STATEMENT_DESC_JAVA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, \"0\" + STATEMENT_DESC_JAVA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertParseFailure(parser, \"1 n/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STATEMENT_DESC,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            IssueStatement.MESSAGE_ISSUE_STATEMENT_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            Description.MESSAGE_DESCRIPTION_CONSTRAINTS); // invalid description"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // valid description followed by invalid description."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // The test case for invalid description followed by valid description"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, \"1\" + DESCRIPTION_DESC_C"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            + INVALID_DESCRIPTION_DESC, Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Issue} being edited,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, \"1\" + CommandTestUtil.TAG_DESC_UI + TAG_DESC_UI + TAG_EMPTY,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, \"1\" + CommandTestUtil.TAG_DESC_UI + TAG_EMPTY + TAG_DESC_UI,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + CommandTestUtil.TAG_DESC_UI + TAG_DESC_UI,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STATEMENT_DESC + INVALID_DESCRIPTION_DESC + TAG_DESC_UI,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            IssueStatement.MESSAGE_ISSUE_STATEMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ISSUE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_C + TAG_DESC_UI"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            + STATEMENT_DESC_JAVA + CommandTestUtil.TAG_DESC_SYNTAX;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand.EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withStatement(VALID_STATEMENT_JAVA)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_C)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withTags(VALID_TAG_UI, VALID_TAG_SYNTAX).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    // TODO: test solution-level edit"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_C;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        EditCommand.EditIssueDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                new EditIssueDescriptorBuilder().withDescription(VALID_DESCRIPTION_C).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // statement"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ISSUE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + STATEMENT_DESC_JAVA;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand.EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withStatement(VALID_STATEMENT_JAVA).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_JAVA;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        descriptor \u003d new EditIssueDescriptorBuilder().withDescription(VALID_DESCRIPTION_JAVA).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        // TODO: solution"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.TAG_DESC_UI;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        descriptor \u003d new EditIssueDescriptorBuilder().withTags(VALID_TAG_UI).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_JAVA"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + CommandTestUtil.TAG_DESC_UI + DESCRIPTION_DESC_JAVA"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + CommandTestUtil.TAG_DESC_SYNTAX"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + DESCRIPTION_DESC_C + TAG_DESC_UI;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand.EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_C)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withTags(VALID_TAG_SYNTAX, VALID_TAG_UI)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    // TODO: test solution-level multiple repeated fields edit"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DESCRIPTION_DESC + DESCRIPTION_DESC_C;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        EditCommand.EditIssueDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            new EditIssueDescriptorBuilder().withDescription(VALID_DESCRIPTION_C).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_DESCRIPTION_DESC + DESCRIPTION_DESC_C + TAG_DESC_UI;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        descriptor \u003d new EditIssueDescriptorBuilder()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_C).withTags(VALID_TAG_UI).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ISSUE;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditCommand.EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 27,
      "leo-1997": 22,
      "xllliu": 5,
      "-": 102,
      "yshu7": 43
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                new FindCommand(new IssueContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 6,
      "zhengwei143": 1,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.solution.Remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "@Ignore"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String INVALID_LINK \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"123456\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static final String VALID_REMARK \u003d \"This is a remark; this remark is #1.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String VALID_LINK \u003d \"https://github.com/CS2103-AY1819S1-T12-4/main\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(INDEX_FIRST_ISSUE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(INDEX_FIRST_ISSUE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStatement((String) null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseStatement(INVALID_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        IssueStatement expectedName \u003d new IssueStatement(VALID_NAME);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseStatement(VALID_NAME));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        IssueStatement expectedName \u003d new IssueStatement(VALID_NAME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseStatement(nameWithWhitespace));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String descriptionsWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionsWithWhitespace));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void parseSolution_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSolution((String) null, (String) null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void parseSolutionLink_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        //        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseRemark(INVALID_REMARK));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void parseRemark_validValueWithoutWhitespace_returnsRemark() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Solution expectedSolution \u003d new Solution(VALID_LINK, VALID_REMARK);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertEquals(expectedSolution, ParserUtil.parseSolution(VALID_LINK, VALID_REMARK));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void parseRemark_validValueWithWhitespace_returnsTrimmedRemark() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String remarkWithWhitespace \u003d WHITESPACE + VALID_REMARK + WHITESPACE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Remark expectedRemark \u003d new Remark(VALID_REMARK);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        //        assertEquals(expectedRemark, ParserUtil.parseRemark(remarkWithWhitespace));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 24,
      "leo-1997": 24,
      "-": 138,
      "yshu7": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/RefactorTagCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESCRIPTION_DESC_C;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.NEWTAG_DESC_SYNTAX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.NEWTAG_DESC_UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_SYNTAX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_SYNTAX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.commands.RefactorTagCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.logic.commands.RefactorTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class RefactorTagCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private RefactorTagCommandParser parser \u003d new RefactorTagCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void parse_validArgs_returnRefactorTagCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        RefactorTagCommand expectedRefactorTagCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            new RefactorTagCommand(new Tag(VALID_TAG_UI), new Tag(VALID_TAG_SYNTAX));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_UI + VALID_TAG_SYNTAX, expectedRefactorTagCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // different order"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_SYNTAX + TAG_DESC_UI, expectedRefactorTagCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void parse_validWithoutNewTag_returnRefactorTagCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        RefactorTagCommand expectedRefactorTagCommand \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            new RefactorTagCommand(new Tag(VALID_TAG_UI), new Tag(RefactorTagCommand.DUMMY_TAG));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_UI + RefactorTagCommand.DUMMY_TAG, expectedRefactorTagCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // correct tag prefix, but wrong new tag prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_UI + DESCRIPTION_DESC_C,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // wrong tag prefix, also wrong new tag prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_C + DESCRIPTION_DESC_C,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // different order and includes tag prefix, but it has not allowed prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_C + TAG_DESC_UI,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // only has new tag, but not original tag"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseFailure(parser, NEWTAG_DESC_SYNTAX + NEWTAG_DESC_UI,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // only has new tag, but not original tag"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseFailure(parser, NEWTAG_DESC_UI,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 73
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/RetrieveCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.RetrieveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "public class RetrieveCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private RetrieveCommandParser parser \u003d new RetrieveCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void parse_validIndex_returnsRetrieveCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \"1\", new RetrieveCommand(INDEX_FIRST_ISSUE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RetrieveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 25
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/SaveItParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.INITIALIZED_ISSUE_FREQUENCY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.EditCommand.EditIssueDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.EditIssueDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class SaveItParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final SaveItParser parser \u003d new SaveItParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        Issue issue \u003d new IssueBuilder().withFrequency(INITIALIZED_ISSUE_FREQUENCY).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(IssueUtil.getAddCommand(issue));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertEquals(new AddCommand(issue), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ISSUE.getOneBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_ISSUE), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    // TODO: there should be two ways for edit to be parsed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issue \u003d new IssueBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        EditIssueDescriptor descriptor \u003d new EditIssueDescriptorBuilder(issue).withSolutions().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + INDEX_FIRST_ISSUE.getOneBased() + \" \" + IssueUtil.getEditIssueDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_ISSUE, descriptor), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertEquals(new FindCommand(new IssueContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" freq\") instanceof ListCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ISSUE.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_ISSUE), command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 8,
      "leo-1997": 25,
      "zhengwei143": 2,
      "-": 105,
      "yshu7": 7
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_ISSUE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 6,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/SortCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yshu7"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import seedu.saveit.model.issue.IssueSort;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private String failureMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void parse_emptyArg_returnsSortCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        SortCommand expectedSortCommand \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                new SortCommand(new IssueSort(IssueSort.EMPTY_SORT));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseSuccess(parser, \"     \", expectedSortCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void parse_oneValidArg_returnsSortCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        SortCommand expectedSortCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                new SortCommand(new IssueSort(IssueSort.TAG_SORT));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseSuccess(parser, \"tag\", expectedSortCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        // has leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseSuccess(parser, \" \\n tag  \\t\", expectedSortCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void parse_invalidArgs_returnsSortCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        // one invalid argument"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, \"random\", failureMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        // multiple arguments"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, \"tag random\", failureMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertParseFailure(parser, \"random invalid\", failureMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yshu7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yshu7": 43
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/IssueTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JAVA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_SOLUTION_C;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_SOLUTION_STACKOVERFLOW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_STATEMENT_C;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "public class IssueTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issue \u003d new IssueBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        issue.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void isSameIssue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertTrue(ALICE.isSameIssue(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertFalse(ALICE.isSameIssue(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue editedAlice \u003d new IssueBuilder(ALICE).withDescription(VALID_DESCRIPTION_JAVA).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertFalse(ALICE.isSameIssue(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        // different statement -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        editedAlice \u003d new IssueBuilder(ALICE).withStatement(VALID_STATEMENT_C).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertFalse(ALICE.isSameIssue(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // same name, same description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        editedAlice \u003d new IssueBuilder(ALICE).withSolutions(VALID_SOLUTION_STACKOVERFLOW)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withTags(VALID_TAG_UI).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertTrue(ALICE.isSameIssue(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue aliceCopy \u003d new IssueBuilder(ALICE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // different description, same issue statement -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Issue editedAlice \u003d new IssueBuilder(ALICE).withDescription(VALID_DESCRIPTION_JAVA).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // different solutions, same issue statement -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        editedAlice \u003d new IssueBuilder(ALICE).withDescription(VALID_SOLUTION_C).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // different tags, same issue statement -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        editedAlice \u003d new IssueBuilder(ALICE).withTags(VALID_TAG_UI).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // different issue -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        // different statement -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        editedAlice \u003d new IssueBuilder(ALICE).withStatement(VALID_STATEMENT_C).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 7,
      "leo-1997": 28,
      "xllliu": 2,
      "-": 41,
      "yshu7": 8
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.model.Model.PREDICATE_SHOW_ALL_ISSUES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.SaveItBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void hasIssue_nullIssue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        modelManager.hasIssue(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void hasIssue_issueNotInSaveIt_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(modelManager.hasIssue(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void hasIssue_issueInSaveIt_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        modelManager.addIssue(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(modelManager.hasIssue(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void getFilteredIssueList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        modelManager.getFilteredIssueList().remove(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SaveIt saveIt \u003d new SaveItBuilder().withIssue(ALICE).withIssue(BENSON).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SaveIt differentSaveIt \u003d new SaveIt();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        modelManager \u003d new ModelManager(saveIt, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(saveIt, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // different saveIt -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentSaveIt, userPrefs)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        String[] keywords \u003d ALICE.getStatement().issue.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        modelManager.updateFilteredIssueList(new IssueContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(saveIt, userPrefs)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        modelManager.updateFilteredIssueList(PREDICATE_SHOW_ALL_ISSUES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        differentUserPrefs.setSaveItFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(saveIt, differentUserPrefs)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 31,
      "leo-1997": 6,
      "zhengwei143": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/SaveItTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_SOLUTION_STACKOVERFLOW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalSaveIt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.core.directory.Directory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.exceptions.DuplicateIssueException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class SaveItTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final SaveIt saveIt \u003d new SaveIt();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(Collections.emptyList(), saveIt.getIssueList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveIt.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void resetData_withValidReadOnlySaveIt_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SaveIt newData \u003d getTypicalSaveIt();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveIt.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(newData, saveIt);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void resetData_withDuplicateIssues_throwsDuplicateIssueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // Two issues with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        Issue editedAlice \u003d new IssueBuilder(ALICE).withSolutions(VALID_SOLUTION_STACKOVERFLOW)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withTags(VALID_TAG_UI).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        List\u003cIssue\u003e newIssues \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        SaveItStub newData \u003d new SaveItStub(newIssues);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        thrown.expect(DuplicateIssueException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveIt.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void hasIssue_nullIssue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveIt.hasIssue(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void hasIssue_issueNotInSaveIt_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(saveIt.hasIssue(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void hasIssue_issueInSaveIt_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveIt.addIssue(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(saveIt.hasIssue(ALICE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void hasIssue_issueWithSameIdentityFieldsInSaveIt_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveIt.addIssue(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        Issue editedAlice \u003d new IssueBuilder(ALICE).withSolutions(VALID_SOLUTION_STACKOVERFLOW)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                .withTags(VALID_TAG_UI).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(saveIt.hasIssue(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void getIssueList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveIt.getIssueList().remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * A stub ReadOnlySaveIt whose issues list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static class SaveItStub implements ReadOnlySaveIt {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        private final ObservableList\u003cIssue\u003e issues \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        SaveItStub(Collection\u003cIssue\u003e issues) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            this.issues.setAll(issues);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public ObservableList\u003cIssue\u003e getIssueList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            return issues;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        public Directory getCurrentDirectory() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            return new Directory(0, 0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 39,
      "leo-1997": 15,
      "zhengwei143": 1,
      "xllliu": 9,
      "-": 50,
      "yshu7": 2
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/UniqueIssueListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DESCRIPTION_C;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_SOLUTION_C;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_SYNTAX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.exceptions.DuplicateIssueException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.exceptions.IssueNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class UniqueIssueListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private final UniqueIssueList uniqueIssueList \u003d new UniqueIssueList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void contains_nullIssue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.contains(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void contains_issueNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertFalse(uniqueIssueList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void contains_issueInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertTrue(uniqueIssueList.contains(ALICE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void contains_issueWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.add(ALICE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue editedAlice \u003d new IssueBuilder(ALICE).withDescription(VALID_DESCRIPTION_C).withTags(VALID_TAG_SYNTAX)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertTrue(uniqueIssueList.contains(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void add_nullIssue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.add(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void add_duplicateIssue_throwsDuplicateIssueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        thrown.expect(DuplicateIssueException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.add(ALICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void setIssue_nullTargetIssue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.setIssue(null, ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void setIssue_nullEditedIssue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.setIssue(ALICE, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void setIssue_targetIssueNotInList_throwsIssueNotFoundException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        thrown.expect(IssueNotFoundException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.setIssue(ALICE, ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void setIssue_editedIssueIsSameIssue_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.setIssue(ALICE, ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        UniqueIssueList expectedUniqueIssueList \u003d new UniqueIssueList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        expectedUniqueIssueList.add(ALICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertEquals(expectedUniqueIssueList, uniqueIssueList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void setIssue_editedIssueHasSameIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue editedAlice \u003d new IssueBuilder(ALICE).withDescription(VALID_SOLUTION_C).withTags(VALID_TAG_UI)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.setIssue(ALICE, editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        UniqueIssueList expectedUniqueIssueList \u003d new UniqueIssueList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        expectedUniqueIssueList.add(editedAlice);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertEquals(expectedUniqueIssueList, uniqueIssueList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void setIssue_editedIssueHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.setIssue(ALICE, BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        UniqueIssueList expectedUniqueIssueList \u003d new UniqueIssueList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        expectedUniqueIssueList.add(BOB);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertEquals(expectedUniqueIssueList, uniqueIssueList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void setIssue_editedIssueHasNonUniqueIdentity_throwsDuplicateIssueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.add(ALICE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.add(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        thrown.expect(DuplicateIssueException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.setIssue(ALICE, BOB);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void remove_nullIssue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.remove(null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void remove_issueDoesNotExist_throwsIssueNotFoundException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        thrown.expect(IssueNotFoundException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.remove(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void remove_existingIssue_removesIssue() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.remove(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        UniqueIssueList expectedUniqueIssueList \u003d new UniqueIssueList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertEquals(expectedUniqueIssueList, uniqueIssueList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void setIssues_nullUniqueIssueList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.setIssues((UniqueIssueList) null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void setIssues_uniqueIssueList_replacesOwnListWithProvidedUniqueIssueList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        UniqueIssueList expectedUniqueIssueList \u003d new UniqueIssueList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        expectedUniqueIssueList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.setIssues(expectedUniqueIssueList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertEquals(expectedUniqueIssueList, uniqueIssueList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void setIssues_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.setIssues((List\u003cIssue\u003e) null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void setIssues_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.add(ALICE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        List\u003cIssue\u003e issueList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        uniqueIssueList.setIssues(issueList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        UniqueIssueList expectedUniqueIssueList \u003d new UniqueIssueList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        expectedUniqueIssueList.add(BOB);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertEquals(expectedUniqueIssueList, uniqueIssueList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void setIssues_listWithDuplicateIssues_throwsDuplicateIssueException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        List\u003cIssue\u003e listWithDuplicateIssues \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        thrown.expect(DuplicateIssueException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.setIssues(listWithDuplicateIssues);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        uniqueIssueList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 6,
      "leo-1997": 10,
      "zhengwei143": 74,
      "-": 95,
      "yshu7": 2
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/VersionedSaveItTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.SaveItBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class VersionedSaveItTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final ReadOnlySaveIt saveItWithAmy \u003d new SaveItBuilder().withIssue(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final ReadOnlySaveIt saveItWithBob \u003d new SaveItBuilder().withIssue(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final ReadOnlySaveIt saveItWithCarl \u003d new SaveItBuilder().withIssue(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private final ReadOnlySaveIt emptySaveIt \u003d new SaveItBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void commit_singleSaveIt_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList(emptySaveIt);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertSaveItListStatus(versionedSaveIt,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                Collections.singletonList(emptySaveIt),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void commit_multipleSaveItPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt, saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertSaveItListStatus(versionedSaveIt,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                Arrays.asList(emptySaveIt, saveItWithAmy, saveItWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                saveItWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void commit_multipleSaveItPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt, saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSaveIt, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertSaveItListStatus(versionedSaveIt,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                Collections.singletonList(emptySaveIt),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void canUndo_multipleSaveItPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt, saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(versionedSaveIt.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void canUndo_multipleSaveItPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt, saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSaveIt, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(versionedSaveIt.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void canUndo_singleSaveIt_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList(emptySaveIt);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(versionedSaveIt.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void canUndo_multipleSaveItPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt, saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSaveIt, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(versionedSaveIt.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void canRedo_multipleSaveItPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt, saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSaveIt, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(versionedSaveIt.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void canRedo_multipleSaveItPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt, saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSaveIt, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(versionedSaveIt.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void canRedo_singleSaveIt_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList(emptySaveIt);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(versionedSaveIt.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void canRedo_multipleSaveItPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt, saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(versionedSaveIt.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void undo_multipleSaveItPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt, saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertSaveItListStatus(versionedSaveIt,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                Collections.singletonList(emptySaveIt),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                saveItWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                Collections.singletonList(saveItWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void undo_multipleSaveItPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt, saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSaveIt, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertSaveItListStatus(versionedSaveIt,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                Arrays.asList(saveItWithAmy, saveItWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void undo_singleSaveIt_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList(emptySaveIt);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertThrows(VersionedSaveIt.NoUndoableStateException.class, versionedSaveIt::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void undo_multipleSaveItPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt, saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSaveIt, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertThrows(VersionedSaveIt.NoUndoableStateException.class, versionedSaveIt::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void redo_multipleSaveItPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt, saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSaveIt, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertSaveItListStatus(versionedSaveIt,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                Arrays.asList(emptySaveIt, saveItWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                saveItWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void redo_multipleSaveItPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt, saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSaveIt, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        versionedSaveIt.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertSaveItListStatus(versionedSaveIt,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                Collections.singletonList(emptySaveIt),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                saveItWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                Collections.singletonList(saveItWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void redo_singleSaveIt_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList(emptySaveIt);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertThrows(VersionedSaveIt.NoRedoableStateException.class, versionedSaveIt::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void redo_multipleSaveItPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                emptySaveIt, saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertThrows(VersionedSaveIt.NoRedoableStateException.class, versionedSaveIt::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d prepareSaveItList(saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt copy \u003d prepareSaveItList(saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(versionedSaveIt.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(versionedSaveIt.equals(versionedSaveIt));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(versionedSaveIt.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(versionedSaveIt.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt differentSaveItList \u003d prepareSaveItList(saveItWithBob, saveItWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(versionedSaveIt.equals(differentSaveItList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt differentCurrentStatePointer \u003d prepareSaveItList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                saveItWithAmy, saveItWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSaveIt, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(versionedSaveIt.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Asserts that {@code versionedSaveIt} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * states before {@code versionedSaveIt#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * and states after {@code versionedSaveIt#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private void assertSaveItListStatus(VersionedSaveIt versionedSaveIt,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                                             List\u003cReadOnlySaveIt\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                                             ReadOnlySaveIt expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                                             List\u003cReadOnlySaveIt\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(new SaveIt(versionedSaveIt), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        while (versionedSaveIt.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            versionedSaveIt.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        for (ReadOnlySaveIt expectedSaveIt : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            assertEquals(expectedSaveIt, new SaveIt(versionedSaveIt));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            versionedSaveIt.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        for (ReadOnlySaveIt expectedSaveIt : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            versionedSaveIt.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            assertEquals(expectedSaveIt, new SaveIt(versionedSaveIt));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(versionedSaveIt.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedSaveIt.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Creates and returns a {@code VersionedSaveIt} with the {@code saveItStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * {@code VersionedSaveIt#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private VersionedSaveIt prepareSaveItList(ReadOnlySaveIt... saveItStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(saveItStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        VersionedSaveIt versionedSaveIt \u003d new VersionedSaveIt(saveItStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        for (int i \u003d 1; i \u003c saveItStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            versionedSaveIt.resetData(saveItStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            versionedSaveIt.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return versionedSaveIt;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Shifts the {@code versionedSaveIt#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedSaveIt versionedSaveIt, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            versionedSaveIt.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 160,
      "leo-1997": 5,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/issue/DescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // null descriptions number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // invalid descriptions numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        // valid descriptions numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(Description.isValidDescription(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(Description.isValidDescription(\"93121534\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(Description.isValidDescription(\"124293842033123\")); // long descriptions numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(Description.isValidDescription(\"descriptions\")); // non-numeric"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(Description.isValidDescription(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(Description.isValidDescription(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 35,
      "leo-1997": 2,
      "yshu7": 3
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/issue/IssueContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class IssueContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        IssueContainsKeywordsPredicate firstPredicate \u003d new IssueContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        IssueContainsKeywordsPredicate secondPredicate \u003d new IssueContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        IssueContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            new IssueContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        // different issue -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void test_issueStatementContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        IssueContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            new IssueContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(predicate.test(new IssueBuilder().withStatement(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        predicate \u003d new IssueContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(predicate.test(new IssueBuilder().withStatement(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        predicate \u003d new IssueContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(predicate.test(new IssueBuilder().withStatement(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        predicate \u003d new IssueContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(predicate.test(new IssueBuilder().withStatement(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // Partial matching keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        predicate \u003d new IssueContainsKeywordsPredicate(Arrays.asList(\"lice\", \"bO\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertTrue(predicate.test(new IssueBuilder().withStatement(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void test_issueStatementDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        IssueContainsKeywordsPredicate predicate \u003d new IssueContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertFalse(predicate.test(new IssueBuilder().withStatement(\"Alice\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        predicate \u003d new IssueContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertFalse(predicate.test(new IssueBuilder().withStatement(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // Keywords match description"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        IssueContainsKeywordsPredicate predicate \u003d new IssueContainsKeywordsPredicate("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertTrue(predicate.test(new IssueBuilder().withDescription(\"12345\").build()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // Keywords partially matches description"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        predicate \u003d new IssueContainsKeywordsPredicate(Arrays.asList(\"null\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertTrue(predicate.test(new IssueBuilder().withDescription(\"has NULL pointer\").build()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void test_descriptionAndIssueStatementDoNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // Keywords do not match description or issue statement"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        IssueContainsKeywordsPredicate predicate \u003d new IssueContainsKeywordsPredicate("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                Arrays.asList(\"java\", \"c++\", \"exception\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertFalse(predicate.test(new IssueBuilder().withStatement(\"ruby\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                .withDescription(\"null pointer\").build()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 12,
      "leo-1997": 2,
      "zhengwei143": 26,
      "-": 50,
      "yshu7": 7
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/issue/IssueStatementTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class IssueStatementTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new IssueStatement(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new IssueStatement(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e IssueStatement.isValidIssueStatement(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertFalse(IssueStatement.isValidIssueStatement(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertFalse(IssueStatement.isValidIssueStatement(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertTrue(IssueStatement.isValidIssueStatement(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertTrue(IssueStatement.isValidIssueStatement(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertTrue(IssueStatement.isValidIssueStatement(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertTrue(IssueStatement.isValidIssueStatement(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertTrue(IssueStatement.isValidIssueStatement(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 8,
      "leo-1997": 10,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/issue/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/issue/solution/RemarkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.model.issue.solution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Remark(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void constructor_invalidRemark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String invalidRemark \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Remark(invalidRemark));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void isValidRemark() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        // null remark"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Remark.isValidRemark(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        // invalid remarks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(Remark.isValidRemark(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(Remark.isValidRemark(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        // valid remarks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"Blk 456, Den Road, 01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long saveit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 10,
      "leo-1997": 6,
      "-": 15,
      "yshu7": 5
    }
  },
  {
    "path": "src/test/java/seedu/saveit/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        userPrefs.setSaveItFilePath(Paths.get(\"saveit.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "-": 130,
      "yshu7": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalSaveIt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.model.SaveItChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ReadOnlySaveIt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlSaveItStorage saveItStorage \u003d new XmlSaveItStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        storageManager \u003d new StorageManager(saveItStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void saveItReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "         * {@link XmlSaveItStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlSaveItStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SaveIt original \u003d getTypicalSaveIt();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        storageManager.saveSaveIt(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        ReadOnlySaveIt retrieved \u003d storageManager.readSaveIt().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(original, new SaveIt(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void getSaveItFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertNotNull(storageManager.getSaveItFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void handleSaveItChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlSaveItStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        storage.handleSaveItChangedEvent(new SaveItChangedEvent(new SaveIt()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    class XmlSaveItStorageExceptionThrowingStub extends XmlSaveItStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public XmlSaveItStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        public void saveSaveIt(ReadOnlySaveIt saveIt, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 17,
      "leo-1997": 8,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/saveit/storage/XmlAdaptedIssueTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.storage.XmlAdaptedIssue.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "public class XmlAdaptedIssueTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static final String INVALID_NAME \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static final String INVALID_TAG \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final String INVALID_SOLUTION \u003d \"\u0026StackOverflow *remark\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getStatement().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BENSON.getDescription().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final List\u003cXmlAdaptedSolution\u003e VALID_SOLUTIONS \u003d BENSON.getSolutions().stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            .map(XmlAdaptedSolution::new)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void toModelType_validIssueDetails_returnsIssue() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        XmlAdaptedIssue issue \u003d new XmlAdaptedIssue(BENSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertEquals(BENSON, issue.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void toModelType_invalidStatement_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        XmlAdaptedIssue issue \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                new XmlAdaptedIssue(INVALID_NAME, VALID_DESCRIPTION, VALID_SOLUTIONS, VALID_TAGS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String expectedMessage \u003d IssueStatement.MESSAGE_ISSUE_STATEMENT_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, issue::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void toModelType_nullStatement_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        XmlAdaptedIssue issue \u003d new XmlAdaptedIssue(null, VALID_DESCRIPTION, VALID_SOLUTIONS, VALID_TAGS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, IssueStatement.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, issue::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        XmlAdaptedIssue issue \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            new XmlAdaptedIssue(VALID_NAME, INVALID_DESCRIPTION, VALID_SOLUTIONS, VALID_TAGS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_DESCRIPTION_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, issue::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        XmlAdaptedIssue issue \u003d new XmlAdaptedIssue(VALID_NAME, null, VALID_SOLUTIONS, VALID_TAGS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, issue::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public void toModelType_invalidSolutions_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        List\u003cXmlAdaptedSolution\u003e invalidSolutions \u003d new ArrayList\u003c\u003e(VALID_SOLUTIONS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        invalidSolutions.add(new XmlAdaptedSolution(INVALID_SOLUTION));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        XmlAdaptedIssue issue \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            new XmlAdaptedIssue(VALID_NAME, VALID_DESCRIPTION, invalidSolutions, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, issue::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        XmlAdaptedIssue issue \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            new XmlAdaptedIssue(VALID_NAME, VALID_DESCRIPTION, VALID_SOLUTIONS, invalidTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, issue::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 14,
      "leo-1997": 17,
      "zhengwei143": 2,
      "-": 32,
      "yshu7": 22
    }
  },
  {
    "path": "src/test/java/seedu/saveit/storage/XmlSaveItStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalSaveIt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ReadOnlySaveIt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class XmlSaveItStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSaveItStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void readSaveIt_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        readSaveIt(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private java.util.Optional\u003cReadOnlySaveIt\u003e readSaveIt(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return new XmlSaveItStorage(Paths.get(filePath)).readSaveIt(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(readSaveIt(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        readSaveIt(\"NotXmlFormatSaveIt.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void readSaveIt_invalidAndValidIssueSaveIt_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        readSaveIt(\"invalidAndValidIssueSaveIt.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void readAndSaveSaveIt_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempSaveIt.xml\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SaveIt original \u003d getTypicalSaveIt();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlSaveItStorage xmlSaveItStorage \u003d new XmlSaveItStorage(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        xmlSaveItStorage.saveSaveIt(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        ReadOnlySaveIt readBack \u003d xmlSaveItStorage.readSaveIt(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(original, new SaveIt(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        original.addIssue(HOON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        original.removeIssue(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        xmlSaveItStorage.saveSaveIt(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        readBack \u003d xmlSaveItStorage.readSaveIt(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(original, new SaveIt(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        original.addIssue(IDA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        xmlSaveItStorage.saveSaveIt(original); //file path not specified"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        readBack \u003d xmlSaveItStorage.readSaveIt().get(); //file path not specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(original, new SaveIt(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void saveSaveIt_nullSaveIt_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveSaveIt(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Saves {@code saveIt} at the specified {@code filePath}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private void saveSaveIt(ReadOnlySaveIt saveIt, String filePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            new XmlSaveItStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                    .saveSaveIt(saveIt, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void saveSaveIt_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveSaveIt(new SaveIt(), null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 42,
      "leo-1997": 8,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/saveit/storage/XmlSerializableSaveItTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.TypicalIssues;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class XmlSerializableSaveItTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableSaveItTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static final Path TYPICAL_ISSUES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalIssuesSaveIt.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static final Path DUPLICATE_ISSUE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateIssuesSaveIt.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void toModelType_typicalIssuesFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        XmlSerializableSaveIt dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_ISSUES_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                XmlSerializableSaveIt.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        SaveIt saveItFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SaveIt typicalIssuesSaveIt \u003d TypicalIssues.getTypicalSaveIt();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertEquals(saveItFromFile, typicalIssuesSaveIt);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public void toModelType_duplicateIssues_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        XmlSerializableSaveIt dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_ISSUE_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "                XmlSerializableSaveIt.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        thrown.expectMessage(XmlSerializableSaveIt.MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 10,
      "leo-1997": 5,
      "zhengwei143": 14,
      "-": 10,
      "yshu7": 5
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/EditIssueDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.EditCommand.EditIssueDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * A utility class to help with building EditIssueDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class EditIssueDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private EditCommand.EditIssueDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public EditIssueDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        descriptor \u003d new EditIssueDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public EditIssueDescriptorBuilder(EditIssueDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        this.descriptor \u003d new EditIssueDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Returns an {@code EditIssueDescriptor} with fields containing {@code issue}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public EditIssueDescriptorBuilder(Issue issue) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        descriptor \u003d new EditIssueDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        descriptor.setStatement(issue.getStatement());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        descriptor.setDescription(issue.getDescription());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        descriptor.setSolutions(issue.getSolutions());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        descriptor.setTags(issue.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Sets the {@code IssueStatement} of the {@code EditIssueDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public EditIssueDescriptorBuilder withStatement(String statement) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        descriptor.setStatement(new IssueStatement(statement));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Sets the {@code Description} of the {@code EditIssueDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public EditIssueDescriptorBuilder withDescription(String descriptions) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        descriptor.setDescription(new Description(descriptions));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Parses the {@code solutions} into a {@code Set\u003cSolution\u003e} and set it to the {@code EditIssueDescriptor} that we"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public EditIssueDescriptorBuilder withSolutions(String... solutions) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        List\u003cSolution\u003e solutionSet \u003d Stream.of(solutions).map(Solution::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        descriptor.setSolutions(solutionSet);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditIssueDescriptor} that we are"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public EditIssueDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public EditCommand.EditIssueDescriptor build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 20,
      "leo-1997": 9,
      "xllliu": 9,
      "-": 36,
      "yshu7": 8
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/EventsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods related to events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers. This method will return successfully after the {@code event}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * has been posted to all subscribers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postNow(BaseEvent event) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers at some unspecified time in the future."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postLater(BaseEvent event) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/IssueBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueSearchFrequency;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * A utility class to help with building Issue objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class IssueBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final String DEFAULT_STATEMENT \u003d \"Java Problem\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"new bug\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private IssueStatement statement;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private List\u003cSolution\u003e solutions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private IssueSearchFrequency frequency;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public IssueBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        statement \u003d new IssueStatement(DEFAULT_STATEMENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        solutions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        frequency \u003d new IssueSearchFrequency(TypicalIssues.COMMON_ISSUE_FREQUENCY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Initializes the IssueBuilder with the data of {@code issueToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public IssueBuilder(Issue issueToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        statement \u003d issueToCopy.getStatement();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        description \u003d issueToCopy.getDescription();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        solutions \u003d new ArrayList\u003c\u003e(issueToCopy.getSolutions());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(issueToCopy.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        frequency \u003d issueToCopy.getFrequency();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Sets the {@code IssueStatement} of the {@code Issue} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public IssueBuilder withStatement(String statement) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        this.statement \u003d new IssueStatement(statement);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Parses the {@code solutions} into a {@code Set\u003cSolution\u003e} and set it to the {@code Issue} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public IssueBuilder withSolutions (String ... solutions) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.solutions \u003d SampleDataUtil.getSolutionSet(solutions);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Issue} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public IssueBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Sets the {@code Description} of the {@code Issue} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public IssueBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Sets the {@code IssueSearchFrequency} of the {@code Issue} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public IssueBuilder withFrequency(Integer frequency) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        this.frequency \u003d new IssueSearchFrequency(frequency);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public Issue build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return new Issue(statement, description, solutions, tags, frequency);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 8,
      "leo-1997": 25,
      "zhengwei143": 12,
      "-": 35,
      "yshu7": 13
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/IssueUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_SOLUTION_LINK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_STATEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * A utility class for Issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yshu7"
        },
        "content": "public class IssueUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Returns an add command string for adding the {@code issue}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static String getAddCommand(Issue issue) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getIssueDetails(issue);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Returns the part of command string for the given {@code issue}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static String getIssueDetails(Issue issue) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        sb.append(PREFIX_STATEMENT + issue.getStatement().issue + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + issue.getDescription().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        issue.getSolutions().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            s -\u003e sb.append(PREFIX_SOLUTION_LINK + s.getLink().getValue() + \" \" + PREFIX_REMARK"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                    + s.getRemark().getValue() + \" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        issue.getTags().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Returns the part of command string for the given {@code EditIssueDescriptor}\u0027s details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static String getEditIssueDescriptorDetails(EditCommand.EditIssueDescriptor descriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        descriptor.getStatement().ifPresent(name -\u003e sb.append(PREFIX_STATEMENT).append(name.issue).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        descriptor.getDescription()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            .ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION).append(description.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        if (descriptor.getSolutions().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            List\u003cSolution\u003e solutions \u003d descriptor.getSolutions().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            if (solutions.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                sb.append(PREFIX_SOLUTION_LINK).append(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                solutions.forEach("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                    s -\u003e sb.append(PREFIX_SOLUTION_LINK)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                            .append(s.getLink().getValue()).append(\" \")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                            .append(PREFIX_REMARK)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                            .append(s.getRemark().getValue()).append(\" \")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 7,
      "leo-1997": 20,
      "xllliu": 1,
      "-": 31,
      "yshu7": 20
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/SaveItBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * A utility class to help with building saveit objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " *     {@code SaveIt ab \u003d new SaveItBuilder().withIssue(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class SaveItBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private SaveIt saveIt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public SaveItBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveIt \u003d new SaveIt();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public SaveItBuilder(SaveIt saveIt) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        this.saveIt \u003d saveIt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Adds a new {@code Issue} to the {@code SaveIt} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public SaveItBuilder withIssue(Issue issue) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        saveIt.addIssue(issue);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public SaveIt build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return saveIt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 11,
      "leo-1997": 5,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/SolutionBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllliu"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.solution.Remark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.solution.SolutionLink;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllliu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * A utility class to help with building Issue objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllliu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllliu"
        },
        "content": "public class SolutionBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final String DEFAULT_LINK \u003d \"https://docs.oracle.com/javase/7/docs/api/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"Java™ Platform, SE 7 API Specification\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final String DEFAULT_SOLUTION_NAME \u003d \"https://docs.oracle.com/javase/7/docs/api/\" + \" \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllliu"
        },
        "content": "           + \"Java™ Platform, SE 7 API Specification\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private String solutionName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private SolutionLink solutionLink;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public SolutionBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        solutionName \u003d DEFAULT_SOLUTION_NAME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        solutionLink \u003d new SolutionLink(DEFAULT_LINK);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Initializes the SolutionBuilder with the data of {@code solutionToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public SolutionBuilder(Solution solutionToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        solutionName \u003d solutionToCopy.getLink() + \" \" + solutionToCopy.getRemark();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        solutionLink \u003d solutionToCopy.getLink();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        remark \u003d solutionToCopy.getRemark();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Sets the {@code solutionLink} of the {@code Solution} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public SolutionBuilder withLink(String link) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        this.solutionLink \u003d new SolutionLink(link);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Sets the {@code remark} of the {@code Solution} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public SolutionBuilder withRemark (String remark) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public Solution build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        return new Solution(solutionLink.getValue() , remark.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllliu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllliu": 57
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Returns the middle index of the issue in the {@code model}\u0027s issue list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAndSortedIssueList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Returns the last index of the issue in the {@code model}\u0027s issue list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAndSortedIssueList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Returns the issue in the {@code model}\u0027s issue list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static Issue getIssue(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        return model.getFilteredAndSortedIssueList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 7,
      "-": 44,
      "yshu7": 3
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final Index INDEX_FIRST_ISSUE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static final Index INDEX_SECOND_ISSUE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public static final Index INDEX_THIRD_ISSUE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 2,
      "leo-1997": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/TypicalIssues.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DESCRIPTION_C;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JAVA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_SOLUTION_C;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_SOLUTION_JAVA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_STATEMENT_C;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_STATEMENT_JAVA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": " * A utility class containing a list of {@code Issue} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public class TypicalIssues {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    // {@code IssueSearchFrequency} value when first initialized"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final Integer INITIALIZED_ISSUE_FREQUENCY \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    // {@code IssueSearchFrequency} value commonly used across the test cases"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public static final Integer COMMON_ISSUE_FREQUENCY \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final Issue ALICE \u003d new IssueBuilder().withStatement(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            .withDescription(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withTags(\"syntax\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withFrequency(COMMON_ISSUE_FREQUENCY).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final Issue BENSON \u003d new IssueBuilder().withStatement(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            .withDescription(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withFrequency(COMMON_ISSUE_FREQUENCY).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final Issue CARL \u003d new IssueBuilder().withStatement(\"Carl Kurz\").withDescription(\"95352563\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            .withSolutions(\"https://github.com/CS2103-AY1819S1-T12-4/main repoPage\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withFrequency(COMMON_ISSUE_FREQUENCY).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final Issue DANIEL \u003d new IssueBuilder().withStatement(\"Daniel Meier\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            .withDescription(\"87652533\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            .withSolutions(\"https://stackoverflow.com/ newSolution\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                    \"http://www.ZhiHu.com newSol\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withFrequency(COMMON_ISSUE_FREQUENCY).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final Issue ELLE \u003d new IssueBuilder().withStatement(\"Elle Meyer\").withDescription(\"9482224\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            .withSolutions(\"http://www.google.com ave\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withFrequency(COMMON_ISSUE_FREQUENCY).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final Issue FIONA \u003d new IssueBuilder().withStatement(\"Fiona Kunz\").withDescription(\"9482427\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            .withSolutions(\"http://www.reddit.com tokyo\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withFrequency(COMMON_ISSUE_FREQUENCY).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final Issue GEORGE \u003d new IssueBuilder().withStatement(\"George Best\").withDescription(\"9482442\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            .withSolutions(\"http://www.yahoo.com street\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withFrequency(COMMON_ISSUE_FREQUENCY).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final Issue HOON \u003d new IssueBuilder().withStatement(\"Hoon Meier\").withDescription(\"8482424\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            .withSolutions(\"https://stackoverflow.com/ india\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withFrequency(COMMON_ISSUE_FREQUENCY).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final Issue IDA \u003d new IssueBuilder().withStatement(\"Ida Mueller\").withDescription(\"8482131\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            .withSolutions(\"http://www.baidu.com ave\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withFrequency(COMMON_ISSUE_FREQUENCY).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    // Manually added - Issue\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final Issue AMY \u003d new IssueBuilder().withStatement(VALID_STATEMENT_JAVA)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_JAVA)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withSolutions(VALID_SOLUTION_JAVA).withTags(VALID_TAG_UI)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withFrequency(COMMON_ISSUE_FREQUENCY).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static final Issue BOB \u003d new IssueBuilder().withStatement(VALID_STATEMENT_C)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_C)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withSolutions(VALID_SOLUTION_C).withTags(VALID_TAG_UI)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            .withFrequency(COMMON_ISSUE_FREQUENCY).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private TypicalIssues() {} // prevents instantiation"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns an {@code SaveIt} with all the typical issues."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static SaveIt getTypicalSaveIt() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        SaveIt ab \u003d new SaveIt();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        for (Issue issue : getTypicalIssues()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            ab.addIssue(issue);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static List\u003cIssue\u003e getTypicalIssues() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 8,
      "leo-1997": 21,
      "zhengwei143": 19,
      "-": 25,
      "yshu7": 18
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/TypicalSolutions.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllliu"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_SOLUTION_C;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_SOLUTION_JAVA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_SOLUTION_STACKOVERFLOW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllliu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllliu"
        },
        "content": " * A utility class containing a list of {@code Solution} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": "public class TypicalSolutions {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final Solution REPO \u003d new Solution(\"https://github.com/CS2103-AY1819S1-T12-4/main repoPage\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final Solution ZHIHU \u003d new Solution(\"http://www.ZhiHu.com newSol\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final Solution GOOGLE \u003d new Solution(\"http://www.google.com ave\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final Solution REDDIT \u003d new Solution(\"http://www.reddit.com Reddit\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final Solution C \u003d new Solution(VALID_SOLUTION_C);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final Solution JAVA \u003d new Solution(VALID_SOLUTION_JAVA);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static final Solution STACK \u003d new Solution(VALID_SOLUTION_STACKOVERFLOW);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private TypicalSolutions() {} // prevents instantiation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllliu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllliu": 25
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import static seedu.saveit.testutil.TypicalSolutions.REPO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.commons.events.ui.SolutionPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private SolutionPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        selectionChangedEventStub \u003d new SolutionPanelSelectionChangedEvent(REPO);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        // associated web page of an solution"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        URL expectedSolutionUrl \u003d new URL(REPO.getLink().getValue());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertEquals(expectedSolutionUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 5,
      "xllliu": 7,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.LogicManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Ignore //TODO: find out why local can pass but fails on travis"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 11,
      "xllliu": 1,
      "-": 151
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * A GUI unit test class for SaveIt."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can  be removed once this bug is fixed:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(Stage::requestFocus);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "zhengwei143": 2,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/IssueCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.testutil.GuiTestAssert.assertCardDisplaysIssue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import guitests.guihandles.IssueCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "public class IssueCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issueWithNoTags \u003d new IssueBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        IssueCard issueCard \u003d new IssueCard(issueWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        uiPartRule.setUiPart(issueCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCardDisplay(issueCard, issueWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issueWithTags \u003d new IssueBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        issueCard \u003d new IssueCard(issueWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        uiPartRule.setUiPart(issueCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCardDisplay(issueCard, issueWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issue \u003d new IssueBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        IssueCard issueCard \u003d new IssueCard(issue, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // same issue, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        IssueCard copy \u003d new IssueCard(issue, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(issueCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(issueCard.equals(issueCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertFalse(issueCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertFalse(issueCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // different issue, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue differentIssue \u003d new IssueBuilder().withStatement(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertFalse(issueCard.equals(new IssueCard(differentIssue, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // same issue, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertFalse(issueCard.equals(new IssueCard(issue, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Asserts that {@code issueCard} displays the details of {@code expectedIssue} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private void assertCardDisplay(IssueCard issueCard, Issue expectedIssue, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        IssueCardHandle issueCardHandle \u003d new IssueCardHandle(issueCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", issueCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // verify issue details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCardDisplaysIssue(expectedIssue, issueCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 6,
      "leo-1997": 42,
      "yshu7": 24
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/IssueListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_SECOND_ISSUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.getTypicalIssues;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.testutil.GuiTestAssert.assertCardDisplaysIssue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import guitests.guihandles.IssueCardHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import guitests.guihandles.IssueListPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.FileUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.storage.XmlSerializableSaveIt;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "public class IssueListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final ObservableList\u003cIssue\u003e TYPICAL_ISSUES \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            FXCollections.observableList(getTypicalIssues());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_ISSUE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private IssueListPanelHandle issueListPanelHandle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        initUi(TYPICAL_ISSUES);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_ISSUES.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            issueListPanelHandle.navigateToCard(TYPICAL_ISSUES.get(i));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            Issue expectedIssue \u003d TYPICAL_ISSUES.get(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            IssueCardHandle actualCard \u003d issueListPanelHandle.getIssueCardHandle(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            assertCardDisplaysIssue(expectedIssue, actualCard);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        initUi(TYPICAL_ISSUES);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        IssueCardHandle expectedIssue \u003d issueListPanelHandle.getIssueCardHandle(INDEX_SECOND_ISSUE.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        IssueCardHandle selectedIssue \u003d issueListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertCardEquals(expectedIssue, selectedIssue);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Verifies that creating and deleting large number of issues in {@code IssueListPanel} requires lesser than"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        ObservableList\u003cIssue\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        }, \"Creation and deletion of issue cards exceeded time limit\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns a list of issues containing {@code issueCount} issues that is used to populate the"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * {@code IssueListPanel}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private ObservableList\u003cIssue\u003e createBackingList(int issueCount) throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithIssues(issueCount);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        XmlSerializableSaveIt xmlSaveIt \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableSaveIt.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return FXCollections.observableArrayList(xmlSaveIt.toModelType().getIssueList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Returns a .xml file containing {@code issueCount} issues. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private Path createXmlFileWithIssues(int issueCount) throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        builder.append(\"\u003csaveit\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        for (int i \u003d 0; i \u003c issueCount; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            builder.append(\"\u003cissues\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            builder.append(\"\u003cstatement\u003e\").append(i).append(\"a\u003c/statement\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            builder.append(\"\u003cdescription\u003e000\u003c/description\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            builder.append(\"\u003csolutions\u003ewww.example.com remark\u003c/solutions\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            builder.append(\"\u003c/issues\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        builder.append(\"\u003c/saveit\u003e\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Path manyIssuesFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyIssues.xml\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        FileUtil.createFile(manyIssuesFile);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        FileUtil.writeToFile(manyIssuesFile, builder.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        manyIssuesFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return manyIssuesFile;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Initializes {@code issueListPanelHandle} with a {@code IssueListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code IssueListPanel}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private void initUi(ObservableList\u003cIssue\u003e backingList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        IssueListPanel issueListPanel \u003d new IssueListPanel(backingList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        uiPartRule.setUiPart(issueListPanel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leo-1997"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        issueListPanelHandle \u003d new IssueListPanelHandle(getChildNode(issueListPanel.getRoot(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                IssueListPanelHandle.ISSUE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 30,
      "leo-1997": 23,
      "zhengwei143": 15,
      "xllliu": 4,
      "-": 41,
      "yshu7": 15
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.LogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(), new LogicManager(new ModelManager()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 7,
      "zhengwei143": 3,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(NEW_RESULT_EVENT_STUB);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/SolutionCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xllliu"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import static seedu.saveit.ui.testutil.GuiTestAssert.assertCardDisplaysSolution;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import guitests.guihandles.SolutionCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.testutil.IssueBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.testutil.SolutionBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xllliu"
        },
        "content": "public class SolutionCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        Solution solution \u003d new SolutionBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        SolutionCard solutionCard \u003d new SolutionCard(solution, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        uiPartRule.setUiPart(solutionCard);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertCardDisplay(solutionCard, solution, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        Issue issue \u003d new IssueBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        IssueCard issueCard \u003d new IssueCard(issue, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        // same issue, same index -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        IssueCard copy \u003d new IssueCard(issue, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertTrue(issueCard.equals(copy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertTrue(issueCard.equals(issueCard));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertFalse(issueCard.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertFalse(issueCard.equals(0));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        // different issue, same index -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        Issue differentIssue \u003d new IssueBuilder().withStatement(\"differentName\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertFalse(issueCard.equals(new IssueCard(differentIssue, 0)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        // same issue, different index -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertFalse(issueCard.equals(new IssueCard(issue, 1)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Asserts that {@code solutionCard} displays the details of {@code expectedSolution} correctly and matches"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    private void assertCardDisplay(SolutionCard solutionCard, Solution expectedSolution, int expectedId) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        SolutionCardHandle solutionCardHandle \u003d new SolutionCardHandle(solutionCard.getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertEquals(\"Solution \" + Integer.toString(expectedId), solutionCardHandle.getId());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        // verify solution details are displayed correctly"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertCardDisplaysSolution(expectedSolution, solutionCardHandle);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xllliu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xllliu": 67
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.model.SaveItChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private static final SaveItChangedEvent EVENT_STUB \u003d new SaveItChangedEvent(new SaveIt());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        // after saveit book is updated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 7,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/testutil/EventsCollectorRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Sets up an {@code EventsCollector} and tears it down after each test."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCollectorRule implements TestRule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollector eventsCollector \u003d new EventsCollector();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * A class that collects events raised by other classes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public class EventsCollector {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cBaseEvent\u003e events \u003d new ArrayList\u003cBaseEvent\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public EventsCollector() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Collects any event raised by any class"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        @Subscribe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        public void collectEvent(BaseEvent event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            events.add(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Removes collected events from the collected list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        public void reset() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            events.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        public int getSize() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns the most recent event collected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        public BaseEvent getMostRecent() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            if (events.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.get(events.size() - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if the collector did not receive any events"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isEmpty() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.isEmpty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 3,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import guitests.guihandles.IssueCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import guitests.guihandles.IssueListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import guitests.guihandles.SolutionCardHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import seedu.saveit.model.issue.Solution;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonvank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static void assertCardEquals(IssueCardHandle expectedCard, IssueCardHandle actualCard) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertEquals(expectedCard.getStatement(), actualCard.getStatement());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(expectedCard.getDescription(), actualCard.getDescription());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedIssue}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static void assertCardDisplaysIssue(Issue expectedIssue, IssueCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertEquals(expectedIssue.getStatement().issue, actualCard.getStatement());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(expectedIssue.getDescription().value, actualCard.getDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertEquals(expectedIssue.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedSolution}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xllliu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    public static void assertCardDisplaysSolution(Solution expectedSolution, SolutionCardHandle actualCard) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertEquals(expectedSolution.getLink().getValue(), actualCard.getLink());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertEquals(expectedSolution.getRemark().toString(), actualCard.getRemark());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xllliu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xllliu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Asserts that the list in {@code issueListPanelHandle} displays the details of {@code issues} correctly and"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static void assertListMatching(IssueListPanelHandle issueListPanelHandle, Issue... issues) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        for (int i \u003d 0; i \u003c issues.length; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            issueListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            assertCardDisplaysIssue(issues[i], issueListPanelHandle.getIssueCardHandle(i));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Asserts that the list in {@code issueListPanelHandle} displays the details of {@code issues} correctly and"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static void assertListMatching(IssueListPanelHandle issueListPanelHandle, List\u003cIssue\u003e issues) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertListMatching(issueListPanelHandle, issues.toArray(new Issue[0]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Asserts the size of the list in {@code issueListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public static void assertListSize(IssueListPanelHandle issueListPanelHandle, int size) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        int numberOfPeople \u003d issueListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 19,
      "leo-1997": 5,
      "xllliu": 10,
      "-": 41,
      "yshu7": 5
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "package seedu.saveit.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESCRIPTION_DESC_C;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESCRIPTION_DESC_JAVA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_STATEMENT_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.SOLUTION_DESC_C;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.SOLUTION_DESC_JAVA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.STATEMENT_DESC_C;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.STATEMENT_DESC_JAVA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_UI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DESCRIPTION_C;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_SOLUTION_C;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_STATEMENT_C;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.ALICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.CARL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.HOON;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.IDA;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class AddCommandSystemTest extends SaveItSystemTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        ----------------------------- */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: add an issue without tags to a non-empty saveit book, command with leading spaces and"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        trailing spaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        Issue toAdd \u003d AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + STATEMENT_DESC_JAVA + \"  \" + DESCRIPTION_DESC_JAVA"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            + \" \" + SOLUTION_DESC_JAVA + \"   \" + CommandTestUtil.TAG_DESC_UI + \" \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.addIssue(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: add a issue with all fields same as another issue in the saveit book except name -\u003e added */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        toAdd \u003d new IssueBuilder(AMY).withStatement(VALID_STATEMENT_C).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + STATEMENT_DESC_C + DESCRIPTION_DESC_JAVA"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            + SOLUTION_DESC_JAVA + CommandTestUtil.TAG_DESC_UI;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: add an issue with all fields same as another issue in the saveit book except description"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        toAdd \u003d new IssueBuilder(AMY).withDescription(VALID_DESCRIPTION_C).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d IssueUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: add to empty saveit book -\u003e added */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        deleteAllIssues();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* Case: add an issue with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + CommandTestUtil.TAG_DESC_UI + DESCRIPTION_DESC_C + SOLUTION_DESC_C"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            + STATEMENT_DESC_C + TAG_DESC_UI;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* Case: add an issue, missing tags -\u003e added */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        ------------------------------ */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: filters the issue list before adding -\u003e added */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssuesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* ------------------------ Perform add operation while an issue card is selected"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        --------------------------- */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* Case: selects first card in the issue list, add an issue -\u003e added, card selection remains"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        unchanged */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        selectIssue(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        --------------------------------------- */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: add a duplicate issue -\u003e rejected */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d IssueUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        /* Case: add a duplicate issue except with different description -\u003e added */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        toAdd \u003d new IssueBuilder(HOON).withDescription(VALID_DESCRIPTION_C).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCommandSuccess(toAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        /* Case: add a duplicate issue except with different solution -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        toAdd \u003d new IssueBuilder(HOON).withSolutions(VALID_SOLUTION_C).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d IssueUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: add a duplicate issue except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d IssueUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        /* Case: missing statement -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + DESCRIPTION_DESC_JAVA + SOLUTION_DESC_JAVA;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* Case: missing description -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + STATEMENT_DESC_JAVA + SOLUTION_DESC_JAVA;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d \"adds \" + IssueUtil.getIssueDetails(toAdd);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_STATEMENT_DESC + DESCRIPTION_DESC_JAVA + SOLUTION_DESC_JAVA;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertCommandFailure(command, IssueStatement.MESSAGE_ISSUE_STATEMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* Case: invalid descriptions -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + STATEMENT_DESC_JAVA + INVALID_DESCRIPTION_DESC + SOLUTION_DESC_JAVA;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertCommandFailure(command, Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e 1. Command box"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * displays an empty string.\u003cbr\u003e 2. Command box has the default style class.\u003cbr\u003e 3. Result display box displays the"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * success message of executing {@code AddCommand} with the details of {@code toAdd}.\u003cbr\u003e 4. {@code Storage} and"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * {@code IssueListPanel} equal to the corresponding components in the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e 6. Status bar\u0027s sync status changes.\u003cbr\u003e Verifications 1,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * 3 and 4 are performed by {@code SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private void assertCommandSuccess(Issue toAdd) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCommandSuccess(IssueUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Issue)}. Executes {@code command} instead."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Issue)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private void assertCommandSuccess(String command, Issue toAdd) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.addIssue(toAdd);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_ISSUE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Issue)} except asserts that the,\u003cbr\u003e 1."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Result display box displays {@code expectedResultMessage}.\u003cbr\u003e 2. {@code Storage} and {@code IssueListPanel}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * equal to the corresponding components in {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Issue)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e 1. Command box displays {@code command}.\u003cbr\u003e 2. Command box"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * has the error style class.\u003cbr\u003e 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e 4. {@code"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Storage} and {@code IssueListPanel} remain unchanged.\u003cbr\u003e 5. Browser url, selected card and status bar remain"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * unchanged.\u003cbr\u003e Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * {@code SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 27,
      "leo-1997": 58,
      "zhengwei143": 14,
      "-": 90,
      "yshu7": 26
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class ClearCommandSystemTest extends SaveItSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: clear non-empty saveit book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: undo clearing saveit book -\u003e original saveit book restored */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: redo clearing saveit book -\u003e cleared */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: selects first card in issue list and clears saveit book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original saveit book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        selectIssue(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: filters the issue list before clearing -\u003e entire saveit book cleared */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original saveit book"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssuesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: clear empty saveit book -\u003e cleared */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_ISSUE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * {@code SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * {@code SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 2,
      "leo-1997": 17,
      "zhengwei143": 7,
      "-": 77
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 1,
      "-": 56
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.DeleteCommand.MESSAGE_DELETE_ISSUE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TestUtil.getIssue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class DeleteCommandSystemTest extends SaveItSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: delete the first issue in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_ISSUE.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Issue deletedIssue \u003d removeIssue(expectedModel, INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_ISSUE_SUCCESS, deletedIssue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: delete the last issue in the list -\u003e deleted */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Index lastIssueIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertCommandSuccess(lastIssueIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: undo deleting the last issue in the list -\u003e last issue restored */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: redo deleting the last issue in the list -\u003e last issue deleted again */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        removeIssue(modelBeforeDeletingLast, lastIssueIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: delete the middle issue in the list -\u003e deleted */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Index middleIssueIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertCommandSuccess(middleIssueIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: filtered issue list, delete index within bounds of saveit book and issue list -\u003e deleted */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssuesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Index index \u003d INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredAndSortedIssueList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: filtered issue list, delete index within bounds of saveit book but out of bounds of issue list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssuesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        int invalidIndex \u003d getModel().getSaveIt().getIssueList().size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* --------------------- Performing delete operation while an issue card is selected ------------------------ */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: delete the selected issue -\u003e issue list panel selects the issue before the deleted issue */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showAllIssues();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        selectIssue(selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        deletedIssue \u003d removeIssue(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_ISSUE_SUCCESS, deletedIssue);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "                getModel().getSaveIt().getIssueList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Removes the {@code Issue} at the specified {@code index} in {@code model}\u0027s saveit book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @return the removed issue"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    private Issue removeIssue(Model model, Index index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Issue targetIssue \u003d getIssue(model, index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.deleteIssue(targetIssue);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        return targetIssue;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Deletes the issue at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Issue deletedIssue \u003d removeIssue(expectedModel, toDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_ISSUE_SUCCESS, deletedIssue);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * {@code SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " the browser url"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": " expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * {@code SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 20,
      "leo-1997": 23,
      "zhengwei143": 22,
      "-": 131,
      "yshu7": 1
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESCRIPTION_DESC_C;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESCRIPTION_DESC_JAVA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_STATEMENT_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.SOLUTION_DESC_C;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.SOLUTION_DESC_JAVA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.STATEMENT_DESC_C;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.STATEMENT_DESC_JAVA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_UI;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JAVA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_STATEMENT_C;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_STATEMENT_JAVA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_UI;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.model.Model.PREDICATE_SHOW_ALL_ISSUES;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_SECOND_ISSUE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.IssueStatement;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.IssueUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class EditCommandSystemTest extends SaveItSystemTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        ---------------------- */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        each field"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Index index \u003d INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + STATEMENT_DESC_C + \" \" + DESCRIPTION_DESC_C + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + SOLUTION_DESC_C + \" \" + TAG_DESC_UI + \" \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue editedIssue \u003d new IssueBuilder(BOB).withTags(VALID_TAG_UI).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertCommandSuccess(command, index, editedIssue);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: undo editing the last issue in the list -\u003e last issue restored */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: redo editing the last issue in the list -\u003e last issue edited again */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        model.updateIssue("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            getModel().getFilteredAndSortedIssueList().get(INDEX_FIRST_ISSUE.getZeroBased()), editedIssue);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        /* Case: edit a issue with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + STATEMENT_DESC_C + DESCRIPTION_DESC_C"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + SOLUTION_DESC_C + CommandTestUtil.TAG_DESC_UI + TAG_DESC_UI;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* Case: edit an issue with new values same as another issue\u0027s values but with different name -\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        edited */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(getModel().getSaveIt().getIssueList().contains(BOB));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        index \u003d INDEX_SECOND_ISSUE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertNotEquals(getModel().getFilteredAndSortedIssueList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + STATEMENT_DESC_JAVA + DESCRIPTION_DESC_C"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            + SOLUTION_DESC_C + CommandTestUtil.TAG_DESC_UI + TAG_DESC_UI;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        editedIssue \u003d new IssueBuilder(BOB).withStatement(VALID_STATEMENT_JAVA).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertCommandSuccess(command, index, editedIssue);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* Case: edit an issue with new values same as another issue\u0027s values but with different description"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        index \u003d INDEX_SECOND_ISSUE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + STATEMENT_DESC_C + DESCRIPTION_DESC_JAVA"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yshu7"
        },
        "content": "                + SOLUTION_DESC_C + CommandTestUtil.TAG_DESC_UI + TAG_DESC_UI;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        editedIssue \u003d new IssueBuilder(BOB).withDescription(VALID_DESCRIPTION_JAVA).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertCommandSuccess(command, index, editedIssue);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        index \u003d INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Issue issueToEdit \u003d getModel().getFilteredAndSortedIssueList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        editedIssue \u003d new IssueBuilder(issueToEdit).withTags().build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertCommandSuccess(command, index, editedIssue);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        ------------------------ */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: filtered issue list, edit index within bounds of saveit book and issue list -\u003e edited */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssuesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        index \u003d INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredAndSortedIssueList().size());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + STATEMENT_DESC_C;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        issueToEdit \u003d getModel().getFilteredAndSortedIssueList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        editedIssue \u003d new IssueBuilder(issueToEdit).withStatement(VALID_STATEMENT_C).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertCommandSuccess(command, index, editedIssue);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: filtered issue list, edit index within bounds of saveit book but out of bounds of issue list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssuesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        int invalidIndex \u003d getModel().getSaveIt().getIssueList().size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + STATEMENT_DESC_C,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* --------------------- Performing edit operation while an issue card is selected"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        -------------------------- */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* Case: selects first card in the issue list, edit an issue -\u003e edited, card selection remains"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        unchanged but"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showAllIssues();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        index \u003d INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        selectIssue(index);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + STATEMENT_DESC_JAVA + DESCRIPTION_DESC_JAVA"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            + SOLUTION_DESC_JAVA + CommandTestUtil.TAG_DESC_UI;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        // browser\u0027s url is updated to reflect the new issue\u0027s name"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        -------------------------------------- */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + STATEMENT_DESC_C,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + STATEMENT_DESC_C,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredAndSortedIssueList().size() + 1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yshu7"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + STATEMENT_DESC_C,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + STATEMENT_DESC_C,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ISSUE.getOneBased(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ISSUE.getOneBased() + INVALID_STATEMENT_DESC,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            IssueStatement.MESSAGE_ISSUE_STATEMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* Case: invalid description -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ISSUE.getOneBased() + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        /* Case: edit a issue with new values same as another issue\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        executeCommand(IssueUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertTrue(getModel().getSaveIt().getIssueList().contains(BOB));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        index \u003d INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertFalse(getModel().getFilteredAndSortedIssueList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + STATEMENT_DESC_C + DESCRIPTION_DESC_C"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            + SOLUTION_DESC_C + CommandTestUtil.TAG_DESC_UI + TAG_DESC_UI;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        /* Case: edit a issue with new values same as another issue\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + STATEMENT_DESC_C + DESCRIPTION_DESC_C"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            + SOLUTION_DESC_C + TAG_DESC_UI;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: edit a issue with new values same as another issue\u0027s values but with different saveit -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + STATEMENT_DESC_C + DESCRIPTION_DESC_C"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            + SOLUTION_DESC_JAVA + CommandTestUtil.TAG_DESC_UI + TAG_DESC_UI;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* Case: edit an issue with new values same as another issue\u0027s values but with different description -\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "         rejected */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + STATEMENT_DESC_C + DESCRIPTION_DESC_JAVA"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            + SOLUTION_DESC_C + CommandTestUtil.TAG_DESC_UI + TAG_DESC_UI;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_ISSUE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Issue, Index)} except that the"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Issue, Index)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Issue editedIssue) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedIssue, null);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e 2. Asserts"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * that the model related components are updated to reflect the issue at index {@code toEdit} being updated to"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * values specified {@code editedIssue}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Issue editedIssue,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        expectedModel.updateIssue(expectedModel.getFilteredAndSortedIssueList().get(toEdit.getZeroBased()),"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "            editedIssue);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.updateFilteredIssueList(PREDICATE_SHOW_ALL_ISSUES);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            String.format(EditCommand.MESSAGE_EDIT_ISSUE_SUCCESS, editedIssue),"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "            expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e 1. Asserts that the command box displays an empty string.\u003cbr\u003e 2."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e 3. Asserts that the browser url"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * and selected card update accordingly depending on the card at {@code expectedSelectedCardIndex}.\u003cbr\u003e 4. Asserts"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * that the status bar\u0027s sync status changes.\u003cbr\u003e 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Verifications 1 and 2 are performed by {@code SaveItSystemTest#assertApplicationDisplaysExpected(String, String,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        expectedModel.updateFilteredIssueList(PREDICATE_SHOW_ALL_ISSUES);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e 1. Asserts that the command box displays {@code command}.\u003cbr\u003e 2."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e 3. Asserts that the browser url,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * selected card and status bar remain unchanged.\u003cbr\u003e 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Verifications 1 and 2 are performed by {@code SaveItSystemTest#assertApplicationDisplaysExpected(String, String,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 49,
      "leo-1997": 55,
      "zhengwei143": 37,
      "-": 104,
      "yshu7": 48
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class ErrorDialogGuiTest extends SaveItSystemTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leo-1997": 5,
      "zhengwei143": 3,
      "-": 28
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_ISSUES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.issue.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class FindCommandSystemTest extends SaveItSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: find multiple issues in saveit book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "         * -\u003e 2 issues found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* Case: repeat previous find command where issue list is displaying the issues we are finding"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "         * -\u003e 2 issues found"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: find issue where issue list is not displaying the issue we are finding -\u003e 1 issue found */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: find multiple issues in saveit book, 2 keywords -\u003e 2 issues found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: find multiple issues in saveit book, 2 keywords in reversed order -\u003e 2 issues found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: find multiple issues in saveit book, 2 keywords with 1 repeat -\u003e 2 issues found */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: find multiple issues in saveit book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "         * -\u003e 2 issues found"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: find same issues in saveit book after deleting 1 of them -\u003e 1 issue found */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(getModel().getSaveIt().getIssueList().contains(BENSON));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: find issue in saveit book, keyword is same as name but of different case -\u003e 1 issue found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: find issue in saveit book, keyword is substring of name -\u003e 0 issues found */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: find issue in saveit book, name is substring of keyword -\u003e 0 issues found */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: find issue not in saveit book -\u003e 0 issues found */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: find description number of issue in saveit book -\u003e 0 issues found */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getDescription().value;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: find tags of issue in saveit book -\u003e 0 issues found */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        /* Case: find while an issue is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showAllIssues();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        selectIssue(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(getIssueListPanel().getHandleToSelectedCard().getStatement().equals(DANIEL.getStatement().issue));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: find issue in empty saveit book -\u003e 0 issues found */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        deleteAllIssues();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the resultdisplay"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * box displays {@code Messages#MESSAGE_ISSUES_LISTED_OVERVIEW} with the number of people in thefiltered list,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * {@code SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default styleclass, and the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            MESSAGE_ISSUES_LISTED_OVERVIEW, expectedModel.getFilteredAndSortedIssueList().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * {@code SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 12,
      "leo-1997": 26,
      "zhengwei143": 8,
      "-": 138,
      "yshu7": 3
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.ui.BrowserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class HelpCommandSystemTest extends SaveItSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        getIssueListPanel().click();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ISSUE.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertListMatching(getIssueListPanel(), getModel().getFilteredAndSortedIssueList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ISSUE.getOneBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 4,
      "leo-1997": 7,
      "zhengwei143": 3,
      "-": 95,
      "yshu7": 1
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "    private static final Predicate\u003cIssue\u003e PREDICATE_MATCHING_NO_ISSUES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cIssue\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        Optional\u003cPredicate\u003cIssue\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        model.updateFilteredIssueList(predicate.orElse(PREDICATE_MATCHING_NO_ISSUES));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    public static void setFilteredList(Model model, Issue... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yshu7"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Issue} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    private static Predicate\u003cIssue\u003e getPredicateMatching(Issue other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return issue -\u003e issue.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 1,
      "leo-1997": 4,
      "-": 29,
      "yshu7": 5
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Issue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class SampleDataTest extends SaveItSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    protected SaveIt getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "    public void saveIt_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Issue[] expectedList \u003d SampleDataUtil.getSampleIssues();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertListMatching(getIssueListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 2,
      "leo-1997": 5,
      "zhengwei143": 3,
      "-": 41
    }
  },
  {
    "path": "src/test/java/systemtests/SaveItSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xllliu"
        },
        "content": "import static seedu.saveit.ui.BrowserPanel.JAVADOC_PAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "import guitests.guihandles.IssueListPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.MainApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.TestApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.SaveIt;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.testutil.TypicalIssues;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.ui.CommandBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonvank"
        },
        "content": " * A system test class for SaveIt, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "public abstract class SaveItSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    protected SaveIt getInitialData() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return TypicalIssues.getTypicalSaveIt();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public IssueListPanelHandle getIssueListPanel() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        return mainWindowHandle.getIssueListPanel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Displays all issues in the saveit book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    protected void showAllIssues() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertEquals(getModel().getSaveIt().getIssueList().size(), getModel().getFilteredAndSortedIssueList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Displays all issues with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    protected void showIssuesWithName(String keyword) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(getModel().getFilteredAndSortedIssueList().size() \u003c getModel().getSaveIt().getIssueList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Selects the issue at {@code index} of the displayed list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    protected void selectIssue(Index index) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(index.getZeroBased(), getIssueListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Deletes all issues in the saveit book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    protected void deleteAllIssues() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(0, getModel().getSaveIt().getIssueList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same issue objects as {@code expectedModel}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * and the issue list panel displays the issues in the model correctly."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(new SaveIt(expectedModel.getSaveIt()), testApp.readStorageSaveIt());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertListMatching(getIssueListPanel(), expectedModel.getFilteredAndSortedIssueList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code IssueListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        getIssueListPanel().rememberSelectedIssueCard();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * of the previously selected issue."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(getIssueListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the issue in the issue list panel at"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @see IssueListPanelHandle#isSelectedIssueCardChanged()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        getIssueListPanel().navigateToCard(getIssueListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String selectedCardName \u003d getIssueListPanel().getHandleToSelectedCard().getStatement();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xllliu"
        },
        "content": "            expectedUrl \u003d new URL(JAVADOC_PAGE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getIssueListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the issue list panel remain unchanged."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * @see IssueListPanelHandle#isSelectedIssueCardChanged()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertFalse(getIssueListPanel().isSelectedIssueCardChanged());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertListMatching(getIssueListPanel(), getModel().getFilteredAndSortedIssueList());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 25,
      "leo-1997": 24,
      "xllliu": 2,
      "-": 237,
      "yshu7": 4
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.logic.commands.SelectCommand.MESSAGE_SELECT_ISSUE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_ISSUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import static seedu.saveit.testutil.TypicalIssues.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yshu7"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "public class SelectCommandSystemTest extends SaveItSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yshu7"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: select the first card in the issue list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ISSUE.getOneBased() + \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_ISSUE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: select the last card in the issue list -\u003e selected */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        Index issueCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + issueCount.getOneBased();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertCommandSuccess(command, issueCount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "        /* Case: select the middle card in the issue list -\u003e selected */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: filtered issue list, select index within bounds of saveit book but out of bounds of issue list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        showIssuesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        int invalidIndex \u003d getModel().getSaveIt().getIssueList().size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: filtered issue list, select index within bounds of saveit book and issue list -\u003e selected */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredAndSortedIssueList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yshu7"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredAndSortedIssueList().size() + 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xllliu"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "        /* Case: select from empty saveit book -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        deleteAllIssues();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ISSUE.getOneBased(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xllliu"
        },
        "content": "                MESSAGE_INVALID_ISSUE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected issue.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * 4. {@code Storage} and {@code IssueListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * {@code SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "                MESSAGE_SELECT_ISSUE_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getIssueListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yshu7"
        },
        "content": "            //assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "     * 4. {@code Storage} and {@code IssueListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * {@code SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhengwei143"
        },
        "content": "     * @see SaveItSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 12,
      "leo-1997": 17,
      "zhengwei143": 11,
      "xllliu": 3,
      "-": 108,
      "yshu7": 5
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leo-1997"
        },
        "content": "import seedu.saveit.model.ReadOnlySaveIt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlySaveIt\u003e saveIt, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonvank"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(saveIt, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonvank": 2,
      "leo-1997": 2,
      "-": 70
    }
  }
]
